|******************************************************************************
|* dmisg1114m001  0  VRC B61U a7 isg 
|* DCR for Approval
|* Installation user             
|* 2015-01-14
|******************************************************************************
|* Main table dmisg114 DCR, Form Type 1
|******************************************************************************
|* ISGEC004003, IT0047, Dharmendra, Dt. 21-01-2015, B61U a7 isg    
|*
|* PATCH001018, Dharmendra, 13-03-2015
|*****************************************************************************
|*IDENT PATCH002030, Mani sharma , Dt . 14-04-2015, VRC B61u a7 isg   
|*Email Alert on Accept/Reject
|******************************************************************************
|* IDENT ISGEC01127 Saikat Ghosh, Date 28-07-2015, Case 36522 
|* PLM-Update Incoming document Master needs modifications 
|* Requirement:
|* 	When DCR is approved, ERP generates XML file to UNLOCK, in this case only 
|*	the key word will be changed to REVISED.

|****************************** declaration section ***************************
declaration:

  table   tdmisg114 | DCR
  table   tdmisg115
  table   tdmisg001
  table   tdmisg005
  table   tdmisg003
  table   tdmisg000
  table   tdmisg101
  table   tbpmdm001
  table   ttccom001
  table   tdmisg103
  
|   extern	domain	tfgld.user	o.emno
  string	query.string(200)
  string	unlock.path(100)
  domain	tcmcs.str100	approver.remarks(1)
  domain tclogn 	v.logname
  #include <bic_dam>
  #include <bic_cmf>
  #include <bic_text>

|****************************** program section ********************************
before.program:
| 	o.emno = logname$
| 	query.string = "dmisg114.user = :o.emno and (dmisg114.stat = dmisg.dcr.approval or dmisg114.stat = dmisg.dcr.approved)"

| 	query.extend.where(query.string)
|****************************** choice section **********************************
choice.process:
before.choice:
	if not check.conditions() then
		choice.again()
	endif	
	
on.choice:
	process.dcr()
	if send.email.alert() then
		message("Sending Email Failed")
	endif	
	
functions:

function process.dcr()
{
	if dmisg114.rejc = tcyesno.yes then
		reject.dcr()
	else if dmisg114.accp = tcyesno.yes then
		if	ask.enum("dmisg000004", tcyesno.no) = tcyesno.yes	then
			|This will also expire all linked documents........?
			v.logname = logname$
			select	dmisg000.*
			from 	dmisg000
			where 	dmisg000._index1 = {:v.logname}
			as set with 1 rows
			selectdo
				unlock.path = strip$(dmisg000.ulok)
				accept.dcr()
			selectempty
				message("Unlock Path Not Maintained for this User")
			endselect
		endif	
	endif	
	endif
}

function reject.dcr()
{
	select	dmisg114.*
	from	dmisg114 for update
	where	dmisg114._index1 = {:dmisg114.dcrn}
	selectdo
		dmisg114.stat = dmisg.dcr.creation
		dmisg114.proc = tcyesno.no
		db.update(tdmisg114, db.retry, e)
		
		select 	dmisg115.*
		from	dmisg115
		where	dmisg115._index1 = {:dmisg114.dcrn}
		selectdo
			select 	dmisg001.wfst
			from	dmisg001 for update
			where	dmisg001._index1 = {:dmisg115.docd, :dmisg115.revn}
			selectdo
				dmisg001.wfst = dmisg.wfst.released
				db.update(tdmisg001, db.retry, e)
			endselect
		endselect
		
		commit.transaction()
	endselect
	message("DCR has been rejected.")
}


function accept.dcr()
{
	select	dmisg114.*
	from	dmisg114 for update
	where	dmisg114._index1 = {:dmisg114.dcrn}
	selectdo
		dmisg114.stat = dmisg.dcr.approved
		dmisg114.appt = utc.num()
		db.update(tdmisg114, db.retry, e)
		
		select 	dmisg115.*
		from	dmisg115
		where	dmisg115._index1 = {:dmisg114.dcrn}
		selectdo
			Change_Status()
		endselect
		
		commit.transaction()
	endselect
	message("DCR has been approved.")

}


function Change_Status()
{
	long	ret, k, rt, ret_val
	string	tmp.error(100), error(200)
	
	select	dmisg001.*
	from	dmisg001 for update
	where	dmisg001._index1 = {:dmisg115.docd, :dmisg115.revn}
	selectdo
		dal.change.object("dmisg001")
		dal.set.field("dmisg001.stat", dmstat.expire)
		dal.set.field("dmisg001.wfst", dmisg.wfst.underrevision)
		ret = dal.save.object("dmisg001")
		error = ""
		tmp.error = ""
		if	ret <> 0	then
			error = ""
			rt = dal.count.error.messages()
			for k = rt to 1 step -1
				ret_val = dal.get.error.message(tmp.error)
				error = error & trim$(tmp.error)
			endfor
		endif	
		if	not isspace(error)	then
			mess("@" & error, 0)
		endif	
		Change_Status_Incoming_Lot_Item()
		create.xml.file()
	endselect
	clean.mess()	
}

function Change_Status_Incoming_Lot_Item()
{
	long	ret1, k, rt1, ret_val
	string	tmp.error(100), error1(200)
	
	select	dmisg005.stat, dmisg005.cprj, dmisg005.cspa, dmisg005.loti,
		dmisg005.item
	from	dmisg005 for update
	where	dmisg005.docn = {:dmisg115.docd}
	and	dmisg005.revn = {:dmisg115.revn}
	selectdo
		dal.change.object("dmisg005")
		dal.set.field("dmisg005.stat", dmstat.expire)
		ret1 = dal.save.object("dmisg005")
		error1 = ""
		tmp.error = ""
		if	ret1 <> 0	then
			error1 = ""
			rt1 = dal.count.error.messages()
			for k = rt1 to 1 step -1
				ret_val = dal.get.error.message(tmp.error)
				error1 = error1 & trim$(tmp.error)
			endfor
		endif	
		if	not isspace(error1)	then
			mess("@" & error1, 0)
		endif
		|Change_Status_Item_Release_Line()
	endselect	
}

function boolean check.conditions()
{
	if dmisg114.stat = dmisg.dcr.approved then
		message("DCR is already approved.")
		return(false)
	endif
	
	if dmisg114.accp = tcyesno.no and dmisg114.rejc = tcyesno.no then
		message("select Accept or Reject.")
		return(false)
	endif
	
	return(true)
}

function create.xml.file()
{
	long    Head1, Head2, Head3, Head4, retval, cmfId, fd.write
	
	Head1 = 0
	Head2 = 0
	Head3 = 0
	Head4 = 0
	retval = 0
	cmfId = 0
	fd.write = 0

	if not isspace(unlock.path) then
	
		cmfId = xmlNewNode("InforLN-PLM")
| 		Head2 = xmlSetAttribute(cmfID, "Type","Unlock")				|#ISGEC01127.o
 		Head2 = xmlSetAttribute(cmfID, "Type", "Revised")			|#ISGEC01127.n

		Head1 = xmlNewDataElement("Documents","", cmfId)
	
		Head3 = xmlNewDataElement("Document","", Head1)
	
		retval = xmlSetAttribute(Head3, "VaultUserName",trim$(dmisg001.user))
		retval = xmlSetAttribute(Head3, "VaultDBName",trim$(dmisg001.name))
		retval = xmlSetAttribute(Head3, "FileName",trim$(dmisg001.dsca))	|# PATCH001018.n
		retval = xmlSetAttribute(Head3, "IsgecDataSource",trim$(dmisg001.sorc))
		retval = xmlSetAttribute(Head3, "Main","True")
		retval = xmlSetAttribute(Head3, "ComponentStatus",trim$(dmisg114.comp))
		retval = xmlSetAttribute(Head3, "ApprovalRequiredBy",dmisg114.apdt)
		retval = xmlSetAttribute(Head3, "Description",trim$(dmisg114.dsca))
		retval = xmlSetAttribute(Head3, "RequestPriority",dmisg114.reqs)
		retval = xmlSetAttribute(Head3, "DCRCategory",dmisg115.catg)
		retval = xmlSetAttribute(Head3, "DCRDate",dmisg114.apdt)
		retval = xmlSetAttribute(Head3, "DCRNo",trim$(dmisg115.dcrn))
		retval = xmlSetAttribute(Head3, "UserID",trim$(logname$))
		retval = xmlSetAttribute(Head3, "RevisionNo",trim$(dmisg001.revn))
		retval = xmlSetAttribute(Head3, "DocumentID",trim$(dmisg001.dcid))
		retval = xmlSetAttribute(Head3, "Element",trim$(dmisg001.cspa))	
		retval = xmlSetAttribute(Head3, "Project",trim$(dmisg001.cprj))
		
		select	dmisg003.*
		from	dmisg003
		where	dmisg003._index1 = {:dmisg001.docn, :dmisg001.revn}
		selectdo
			Head4 = xmlNewDataElement("Document","", Head1)

			retval = xmlSetAttribute(Head4, "Type",ltoe(1))
			retval = xmlSetAttribute(Head4, "Status",trim$(dmisg003.stat))
			retval = xmlSetAttribute(Head4, "PDF_filename",trim$(dmisg003.pdff))
			retval = xmlSetAttribute(Head4, "Main","False")			|# PATCH001018.n
			retval = xmlSetAttribute(Head4, "DrawingNumber",trim$(dmisg003.drgn))
			retval = xmlSetAttribute(Head4, "DocumentRevision",trim$(dmisg003.drev))
			retval = xmlSetAttribute(Head4, "DrawingTitle",trim$(dmisg003.dcfn))
			retval = xmlSetAttribute(Head4, "DocumentFileName",trim$(dmisg003.drgt))
		endselect
		
		fd.write = seq.open(unlock.path & "\" & trim$(dmisg001.docn) & ".xml", "w")
	
		xmlWritePretty(fd.write, cmfId, 0 )
		seq.close(fd.write)
	
		xmlDelete(cmfId, 0)

	endif

}


function long send.email.alert()						|PATCH002030.sn
{
	string tmp.file(200),line(500)
	long fp,srno
	domain	tclogn	user.id
	long    message.ID
        long    to.ID
        long    attachment.ID
        long    ret

        domain ttcmf.prov service       
                        |Infor ERP Enterprise eMessage Connector service for 
                        |transporting messages
        long stat       |Variable to hold return values
        long mid        |CMF message id
	
	tmp.file = creat.tmp.file$(bse.tmp.dir$())
	fp = seq.open(tmp.file,"w+")
	if fp <=0 then
		message("Temp file can not be created")
		return(1)
	endif
	
	user.id = logname$
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:user.id}
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
	selectempty
		bpmdm001.mail = ""
	endselect
	
	if isspace(bpmdm001.mail) then
		message("Email ID for DCR Approver/Rejector" & tccom001.nama & " Not maintained")
		return(1)
	endif		
	
	line = ""
	if dmisg114.accp = tcyesno.yes  then
| 		ret = text.to.buf("dmisg114.remk", language$, 1, approver.remarks)
		line = strip$(line) & "Your DCR No. " & dmisg114.dcrn & "with Document No. "&dmisg115.docd & "and Revision No." &dmisg115.revn &"has been Approved"
		line = strip$(line) & " with the following remarks -" & strip$(shiftl$(dmisg114.remk)) & " by " & tccom001.nama & "."
	endif
	
	if dmisg114.rejc = tcyesno.yes  then
| 		ret = text.to.buf("dmisg114.remk", language$, 1, approver.remarks)
		line = strip$(line) & "Your DCR No. " & dmisg114.dcrn & "with Document No. "&dmisg115.docd & "and Revision No." &dmisg115.revn &"has been Rejected"
		line = strip$(line) & " with the following remarks -" & strip$(shiftl$(dmisg114.remk)) & " by " & tccom001.nama & "."
	endif
	
	seq.write(line,len(line),fp)
	ret = seq.close(fp)
	
	
	
	
	|******* Email Header
        message.ID = cmf.create()
	
	if dmisg114.accp = tcyesno.yes then
		line = "Regarding Approval of DCR No. " & str$(dmisg114.dcrn) & "."
	else
		line = "Regarding Rejection of DCR No. " & str$(dmisg114.dcrn) & "."	
	endif
        ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        ret = cmf.setSubject(message.ID,line)
	
	|******** from ID
	to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	ret = cmf.setRecipientName(to.ID,tccom001.nama)
        ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	ret = cmf.setRecipientType(to.ID, "SMTP")
 
	|******** to ID
	if dmisg114.accp = tcyesno.yes then 
		select dmisg101.eunt
		from   dmisg101
		where  dmisg101._index2 = {:dmisg114.user,dmisg.cact.approver} 
		as set with 1 rows
		selectdo
		endselect
		
		
		select dmisg103.emno
		from    dmisg103
		where   dmisg103._index2 = {:dmisg101.eunt,:dmisg114.cspa,:dmisg114.cprj}
		and     dmisg103.aopt = (dmalert.dcr.app)
		selectdo
			create.receiptant(dmisg103.emno,message.ID)
		selectempty
			select dmisg103.emno
			from    dmisg103
			where   dmisg103._index2 = {:dmisg101.eunt,:dmisg114.cspa}
			and     dmisg103.aopt = (dmalert.dcr.app)
			selectdo
				create.receiptant(dmisg103.emno,message.ID)
			selectempty
				select dmisg103.emno
				from   dmisg103
				where  dmisg103._index1 = {dmalert.dcr.app,:dmisg101.eunt}
				selectdo
					create.receiptant(dmisg103.emno,message.ID)
				endselect	
			endselect	
		endselect
	endif	
	if dmisg114.rejc = tcyesno.yes then 
		select 	bpmdm001.mail,tccom001.nama 
		from 	tccom001,bpmdm001
		where 	tccom001._index4 = {:dmisg114.crea}
		and	tccom001.emno refers to bpmdm001
		selectdo
			to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
			ret = cmf.setRecipientName(to.ID,tccom001.nama)
			ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
			ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
			ret = cmf.setRecipientType(to.ID, "SMTP")
		selectempty
			message("Email ID for Approver "& tccom001.nama &" not Maintained" )
			return(1)
		endselect
	endif 
	|********* Mail Body
	attachment.ID = cmf.createAttachment(message.ID)
	ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	ret = cmf.setAttachmentMIME(attachment.ID,"text/plain")                       
	ret = cmf.setAttachmentFileName(attachment.ID,tmp.file,"abc.txt")


	|*********  Send mail
        if message.ID <>0 then
                stat = cmf.startService("SMTP",2)
                if stat<>0 then
                        message("Message could not be sent "&
                                "(Infor ERP Enterprise eMessage Connector"&
                                " service did not start)")
                        return(1)
                endif
                stat = cmf.send(message.ID,"SMTP")
                if stat<>0 then
                        message("Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&
                                "service refused message)")
                        cmf.stopService("SMTP",2)
                        return(1)
                endif
                stat = cmf.stopService("SMTP",2)
        endif
	return(0)
}
							
function long create.receiptant(domain tcemno in.emno,long i.message.ID)
{

	long    to.ID,ret
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index1 = {:in.emno}
	and	tccom001.emno refers to bpmdm001
	selectdo
		to.ID = cmf.createRecipient(i.message.ID, ttcmf.role.to)  
		ret = cmf.setRecipientName(to.ID,tccom001.nama)
		ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
		ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
		ret = cmf.setRecipientType(to.ID, "SMTP")
	selectempty
		message("Email ID for Approver/Rejector not maintained" )
		return(1)
	endselect
	return(0)	
}									|PATCH002030.en
