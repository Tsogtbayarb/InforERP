|******************************************************************************
|* tdisg2500m001  0  VRC B61U a7 isg 
|* Approve Indent
|* Installation user             
|* 2017-03-16
|******************************************************************************
|* Main table tdpur200 Purchase Requisitions, Form Type 1
|******************************************************************************
|* Mudit Sharma, 2017-03-27
|* New Development
|*
|* ID:ISGEC0166,IT0479,Anadi Shankar,VRC B61U a7 isg 
|* Insertion Of Data On Table "tpisg229","tpisg230".
|****************************** declaration section ***************************
declaration:

	table   ttdpur200 | Purchase Requisitions
	table   ttdpur201
	table   ttdpur203
	table   ttdpur204
	table   ttcmcs052
	table   ttdisg210
	table   ttdisg211
	table   tbpmdm001
	table   ttccom001
	table   tttaad200
	table	ttpisg235
	table	ttpisg229					|#ISGEC0166.n
	table	ttpisg230					|#ISGEC0166.n
	table	ttdisg003
	table	tdmisg140
	table	ttpisg220
	table	tdmisg001
	table	ttpisg239
					|#ISGEC0166.n

 extern domain tcamnt	amnt.f
 extern domain tcamnt	oamt1, s.wght
 extern domain tcamnt	amfr1, var.perc
 extern domain tcamnt	amto1
 extern domain tccprj	cprj.f
 extern domain tcdsca	proj.n
 extern domain tcnama	user1
 extern domain tcemno	emco1
 extern domain tcyesno	ret1
 extern domain tcorno	export.indent
 extern domain tcorno	i.rqno
 extern domain tcorno  rqno2
 extern domain tcdate	curr.date
 extern domain tcorno	idgr1
	domain	tfgld.user	user
	domain	dmdoc.docid     v.docn
	domain	dmdoc.revv	v.revn, var.revi
	
	domain	tcdate		var.trdt
	domain	tcmcs.str50	var.indv,var.bohd, var.iref
	domain	tcmcs.st150m	iref.230
	domain	tccuni		iref.cuni
	
	domain	tcmcs.long	v.dsno, var.pono, count.adct					|#ISGEC0166.n
	domain	tcwght		v.wght, v.count						|#ISGEC0166.n
	domain	tcqsl1		var.qnty, sum.qnty, var.perc1					|#Anadi.n 31-07-2018
	domain	tcmcs.long	var.sern, pos1, pos2, c.docn
 long error,ret, flag
 string query.string(5000),error.msg,query.string1(2000), result(80)
#include <bic_dam>
#include <bic_cmf>
#include <bic_text>
#pragma useddll ottstpapihand
|****************************** program section ********************************
before.program:
	
	user1 = logname$
	select tccom001.emno:user1			
	from	tccom001
	where	tccom001.loco = :user1
	selectdo
	endselect
	
	flag = 0
| 	query.string = "tdpur200.rqst = tdpur.rqst.submitted"
| 	
| 	select tdisg211.idgr,
| 		tdisg211.amfr:amfr1,
| 		tdisg211.amto:amto1
| 	from	tdisg211
| 	where	tdisg211.apco = {:user1}
| 	selectdo
| 		select tdisg212.emco:emco1
| 		from	tdisg212
| 		where	tdisg212._index1 = {:tdisg211.idgr}
| 		and	tdisg212.emco <> ""
| 		selectdo
| 			
| 			select	sum(tdpur201.oamt):oamt1
| 			from	tdpur201
| 			where	tdpur201._index1 = {:tdpur200.rqno}
| 			selectdo
| 			endselect
| 			
| 			if oamt1 < tdisg211.amfr or oamt1 > tdisg211.amto	then
| 				if flag = 0 then
| 					query.string = strip$(query.string) & " and (tdpur200.logn = " & quoted.string(emco1)
| 					flag = 1
| 				else
| 					query.string = strip$(query.string) & " or tdpur200.logn = " & quoted.string(emco1)
| 				endif
| 			endif
| 		endselect
| 	selectempty
| 		|query.string = strip$(query.string) & " and isspace(tdpur200.logn) "
| 	endselect
| 	
| 	if not isspace(emco1) then
| 		query.string = trim$(query.string) &")"
| 	endif
| 	
| 	query.extend.where(query.string)
	
	
		select tdisg211.idgr,
			tdisg211.amfr:amfr1,
			tdisg211.amto:amto1
		from	tdisg211
		where	tdisg211.apco = {:user1}
		selectdo
			select tdisg212.emco:emco1
			from	tdisg212
			where	tdisg212._index1 = {:tdisg211.idgr}
			and	tdisg212.emco <> ""
			selectdo
										|TEST.sn{For login code that differ in login code and actual code}
				select tccom001.loco:emco1			
				from	tccom001
				where	tccom001._index1 = {:emco1}
				as set with 1 rows
				selectdo
				endselect
										|TEST.en
				select	tdpur200.rqno:rqno2
				from	tdpur200
				where	tdpur200.logn = :emco1
				and	tdpur200.rqst = tdpur.rqst.submitted
				selectdo
					select	sum(tdpur201.oamt):oamt1
					from	tdpur201
| 					where	tdpur201._index1 = {:tdpur200.rqno}
					where	tdpur201._index1 = {:rqno2}
					selectdo
					endselect
					if flag = 0	then
						if oamt1 < amfr1 or oamt1 > amto1	then
						else
							query.string = query.string & "(tdpur200.rqno = " & quoted.string(rqno2)
							flag = 1
						endif
					else
						if oamt1 < amfr1 or oamt1 > amto1	then
						else
							query.string = query.string & " or tdpur200.rqno = "& quoted.string(rqno2)
						endif
					endif
				endselect
			endselect
		endselect
		
	if isspace(query.string)	then
		message("There is no Purchase Requisition for you")
		exit()
	else
		query.string = trim$(query.string)&")"
		query.extend.where(query.string)
	endif

|****************************** group section **********************************


|****************************** field section **********************************

field.amnt.f:
before.field:
	select sum(tdpur201.oamt):amnt.f
	from	tdpur201
	where	tdpur201._index1 = {:tdpur200.rqno}
	selectdo
	endselect

field.cprj.f:
before.field:
	select tdpur201.cprj
	from	tdpur201
	where 	tdpur201._index1 = {:tdpur200.rqno}
	as set with 1 rows
	selectdo
		cprj.f = tdpur201.cprj
	endselect
	
field.proj.n:
before.field:
	select (tcmcs052.dsca):proj.n
	from	tcmcs052
	where	tcmcs052._index1 = {:tdpur201.cprj}
	selectdo
	endselect
	
|****************************** choice section **********************************
choice.approve:
on.choice:
	if ask.enum("tdisg000009",tcyesno.no) = tcyesno.yes	then
		curr.date = utc.num()
		
		select tccom001.emno:user1			
		from	tccom001
		where	tccom001.loco = :user1
		selectdo
		endselect
		
		select tdpur200.*
		from	tdpur200
		where	tdpur200._index1 = {:tdpur200.rqno}
		selectdo
			db.retry.point()
			select tdpur203.*
			from	tdpur203 for update
			where	tdpur203._index1 = {:tdpur200.rqno,:curr.date}
			as set with 1 rows
			selectdo
				assign.tdpur203()
				db.insert(ttdpur203,db.skip.dupl,e)
				commit.transaction()
			selectempty
				assign.tdpur203()
				db.insert(ttdpur203,db.skip.dupl,e)
				commit.transaction()
			endselect
		endselect
		
		select tdpur201.*
		from 	tdpur201
		where	tdpur201._index1 = {:tdpur200.rqno}
		selectdo
			db.retry.point()
			select tdpur204.*
			from	tdpur204 for update
			where	tdpur204._index1 = {:tdpur200.rqno,:curr.date}
			as set with 1 rows
			selectdo
				assign.tdpur204()
				db.insert(ttdpur204,db.skip.dupl,e)
				commit.transaction()
			selectempty
				assign.tdpur204()
				db.insert(ttdpur204,db.skip.dupl,e)
				commit.transaction()
			endselect
		endselect

		select tdpur200.*
		from	tdpur200 for update
		where	tdpur200._index1 = {:tdpur200.rqno}
		selectdo
			tdpur200.rqst = tdpur.rqst.approved
			tdpur200.aemn = user1
			db.update(ttdpur200,DB.RETRY,error)
			commit.transaction()
		endselect

		select tdpur201.*
		from 	tdpur201 for update
		where	tdpur201._index1 = {:tdpur200.rqno}
		selectdo
			tdpur201.rejc = tcyesno.no
			db.update(ttdpur201,DB.RETRY,error)
			commit.transaction()
		endselect
		
		select tdisg210.*
		from	tdisg210 for update
		where	tdisg210._index1 = {:tdpur200.rqno}
		selectdo
			user1 = logname$
			tdisg210.apdt = utc.num()
			tdisg210.apvr = user1
			db.update(ttdisg210,DB.RETRY,error)
			commit.transaction()
		selectempty
			user1 = logname$
			assign.tdisg210()
			db.insert(ttdisg210,db.skip.dupl,error)
			commit.transaction()
		endselect
		
		select tdpur200.*
		from	tdpur200
		where	tdpur200._index1 = {:tdpur200.rqno}
		selectdo
			if send.email.alert() then
				message("Sending Email Failed..")
			endif
		
			message("Purchase Requisition has been Approved...")
		endselect
		update.progress.update.transaction()
		update_pmdl()				|#Anadi
	endif
choice.reject:
on.choice:
	if ask.enum("tdisg000010",tcyesno.no) = tcyesno.yes	then

		select tccom001.emno:user1			
		from	tccom001
		where	tccom001.loco = :user1
		selectdo
		endselect
		
		select tdpur200.*
		from	tdpur200
		where	tdpur200._index1 = {:tdpur200.rqno}
		selectdo
			select tdpur203.*
			from	tdpur203 for update
			where	tdpur203._index1 = {:tdpur200.rqno}
			as set with 1 rows
			selectdo
				assign.tdpur203.1()
				db.insert(ttdpur203,db.skip.dupl,error)
				commit.transaction()
			selectempty
				assign.tdpur203.1()
				db.insert(ttdpur203,db.skip.dupl,error)
				commit.transaction()
			endselect
		endselect
		
		select tdpur201.*
		from 	tdpur201
		where	tdpur201._index1 = {:tdpur200.rqno}
		selectdo
			select tdpur204.*
			from	tdpur204 for update
			where	tdpur204._index1 = {:tdpur200.rqno}
			as set with 1 rows
			selectdo
				assign.tdpur204.1()
				db.insert(ttdpur204,db.skip.dupl,error)
				commit.transaction()
			selectempty
				assign.tdpur204.1()
				db.insert(ttdpur204,db.skip.dupl,error)
				commit.transaction()
			endselect
		endselect

		select tdpur200.*
		from	tdpur200 for update
		where	tdpur200._index1 = {:tdpur200.rqno}
		selectdo
			user1 = logname$
			tdpur200.rqst = tdpur.rqst.rejected
			|tdpur200.logn = user1
			db.update(ttdpur200,DB.RETRY,error)
			commit.transaction()
		endselect

		select tdpur201.*
		from 	tdpur201 for update
		where	tdpur201._index1 = {:tdpur200.rqno}
		selectdo
			|tdpur201.rejc = tcyesno.yes	|#temp
			db.update(ttdpur201,DB.RETRY,error)
			commit.transaction()
		endselect
		
		message("Purchase Requisition has been Rejected...")
	endif
	
|************************************ Function Section ****************************
functions:
function assign.tdpur203()
{
tdpur203.rqno = tdpur200.rqno
tdpur203.trdt = utc.num()
tdpur203.orig = tdpur200.orig
tdpur203.remn = tdpur200.remn
tdpur203.rdep = tdpur200.rdep
tdpur203.cofc = tdpur200.cofc
tdpur203.rdat = tdpur200.rdat
tdpur203.aemn = user1
tdpur203.adep = tdpur200.adep
tdpur203.conv = tdpur200.conv
tdpur203.cwar = tdpur200.cwar
tdpur203.rqst = tdpur.rqst.approved
tdpur203.spap = tcyesno.yes
tdpur203.logn = tdpur200.logn
tdpur203.ccur = tdpur200.ccur
tdpur203.ccon = tdpur200.ccon
tdpur203.urgt = tdpur200.urgt
tdpur203.cnty = tdpur200.cnty
tdpur203.rcod = tdpur200.rcod
put.var(pid,"tdpur203.cdf_rodt",utc.num())
}

function assign.tdpur204()
{
tdpur204.rqno = tdpur201.rqno
tdpur204.pono = tdpur201.pono
tdpur204.trdt = utc.num()
tdpur204.item = tdpur201.item
tdpur204.nids = tdpur201.nids
tdpur204.effn = tdpur201.effn
tdpur204.crrf = tdpur201.crrf
tdpur204.citt = tdpur201.citt
tdpur204.mpnr = tdpur201.mpnr
tdpur204.cmnf = tdpur201.cmnf
tdpur204.mitm = tdpur201.mitm
tdpur204.qoor = tdpur201.qoor
tdpur204.cuqp = tdpur201.cuqp
tdpur204.cvqp = tdpur201.cvqp
tdpur204.leng = tdpur201.leng
tdpur204.widt = tdpur201.widt
tdpur204.thic = tdpur201.thic
tdpur204.otbp = tdpur201.otbp
tdpur204.nsds = tdpur201.nsds
tdpur204.dldt = tdpur201.dldt
tdpur204.pric = tdpur201.pric
tdpur204.cupp = tdpur201.cupp
tdpur204.cvpp = tdpur201.cvpp
tdpur204.oamt = tdpur201.oamt
tdpur204.cwar = tdpur201.cwar
tdpur204.cadr = tdpur201.cadr
tdpur204.cprj = tdpur201.cprj
tdpur204.cspa = tdpur201.cspa
tdpur204.cact = tdpur201.cact
tdpur204.cstl = tdpur201.cstl
tdpur204.ccco = tdpur201.ccco
tdpur204.glco = tdpur201.glco
tdpur204.rcod = tdpur201.rcod
tdpur204.urgt = tdpur201.urgt

tdpur204.logn = user1
tdpur204.rejc = tcyesno.no
}

function assign.tdisg210()
{
tdisg210.rqno = tdpur200.rqno
tdisg210.apdt = utc.num()
tdisg210.apvr = user1
}

function assign.tdpur203.1()
{
tdpur203.rqno = tdpur200.rqno
tdpur203.trdt = utc.num()
tdpur203.orig = tdpur200.orig
tdpur203.remn = tdpur200.remn
tdpur203.rdep = tdpur200.rdep
tdpur203.cofc = tdpur200.cofc
tdpur203.rdat = tdpur200.rdat
tdpur203.aemn = tdpur200.aemn
tdpur203.adep = tdpur200.adep
tdpur203.conv = tdpur200.conv
tdpur203.cwar = tdpur200.cwar
tdpur203.rqst = tdpur.rqst.rejected
tdpur203.spap = tcyesno.no
tdpur203.logn = tdpur200.logn
tdpur203.ccur = tdpur200.ccur
tdpur203.ccon = tdpur200.ccon
tdpur203.urgt = tdpur200.urgt
tdpur203.cnty = tdpur200.cnty
tdpur203.rcod = tdpur200.rcod
}

function assign.tdpur204.1()
{
tdpur204.rqno = tdpur201.rqno
tdpur204.pono = tdpur201.pono
tdpur204.trdt = utc.num()
tdpur204.item = tdpur201.item
tdpur204.nids = tdpur201.nids
tdpur204.effn = tdpur201.effn
tdpur204.crrf = tdpur201.crrf
tdpur204.citt = tdpur201.citt
tdpur204.mpnr = tdpur201.mpnr
tdpur204.cmnf = tdpur201.cmnf
tdpur204.mitm = tdpur201.mitm
tdpur204.qoor = tdpur201.qoor
tdpur204.cuqp = tdpur201.cuqp
tdpur204.cvqp = tdpur201.cvqp
tdpur204.leng = tdpur201.leng
tdpur204.widt = tdpur201.widt
tdpur204.thic = tdpur201.thic
tdpur204.otbp = tdpur201.otbp
tdpur204.nsds = tdpur201.nsds
tdpur204.dldt = tdpur201.dldt
tdpur204.pric = tdpur201.pric
tdpur204.cupp = tdpur201.cupp
tdpur204.cvpp = tdpur201.cvpp
tdpur204.oamt = tdpur201.oamt
tdpur204.cwar = tdpur201.cwar
tdpur204.cadr = tdpur201.cadr
tdpur204.cprj = tdpur201.cprj
tdpur204.cspa = tdpur201.cspa
tdpur204.cact = tdpur201.cact
tdpur204.cstl = tdpur201.cstl
tdpur204.ccco = tdpur201.ccco
tdpur204.glco = tdpur201.glco
tdpur204.rcod = tdpur201.rcod
tdpur204.urgt = tdpur201.urgt

tdpur204.logn = user1
tdpur204.rejc = tcyesno.yes
}

function long send.email.alert()
{

	string tmp.file(200),line(500)
	long fp,srno
	domain	tclogn	user.id
	long    message.ID
        long    to.ID
        long    attachment.ID
        long    ret
	domain ttdsca	name1
	domain tcqiv1	total.price
	domain tcmcs.str30m	date5
	long 	yy,mm,dd,pp,qq,nn
	
	|***Added by Veena********|
	string 	str1(100),str2(100),str3(100),str4(100),str5(100),str6(100),str7(100) | Added by Veena
	str1 = ""
	str2 = ""
	str3 = ""
	str4 = ""
	str5 = ""
	str6 = ""
	str7 = ""
	|****************************|
	
        domain ttcmf.prov service       
                        |Infor ERP Enterprise eMessage Connector service for 
                        |transporting messages
        long stat       |Variable to hold return values
        long mid        |CMF message id
	
	
	select tccom001.nama:name1
	from	tccom001
	where	tccom001.loco = :tdpur200.logn
	selectdo
	endselect
	
	select	tdpur201.pric,tdpur201.cprj
	from	tdpur201
	where	tdpur201._index1 = {:tdpur200.rqno}
	selectdo
		total.price = total.price + tdpur201.pric
	endselect
	
	select tcmcs052.dsca
	from	tcmcs052
	where	tcmcs052._index1 = {:tdpur201.cprj}
	selectdo
	endselect
	
	utc.to.date(tdpur200.rdat,yy,mm,dd,pp,qq,nn)
	date5 = str$(dd)&"-"&str$(mm)&"-"&str$(yy)
	
	tmp.file = creat.tmp.file$(bse.tmp.dir$())
	fp = seq.open(tmp.file,"w+")
	if fp <=0 then
		message("Temp file can not be created")
		return(1)
	endif
	
	|***Added by Veena**********************|
	
| 	str1 = "Requisition        : " & tdpur200.rqno
| 	str2 = "Created on         : " & date5
| 	str3 = "Requester          : " & name1
| 	str4 = "Project            : " & tdpur201.cprj
| 	str5 = "Reference A        : " & tdpur200.refa
| 	str6 = "Reference B        : " & tdpur200.refb
| 	str7 = "Amount             : " & str$(total.price)

	|****************************************|
	
	|***********MAIL CONTENT*****************|
	line = ""
	line = strip$(line) & " Indent No. " & tdpur200.rqno
	line = strip$(line) & " from Requester " & name1
	line = strip$(line) & " has been sent to you." & chr$(13)&chr$(10)
	
	line = line & "Requisition  : " & tdpur200.rqno & chr$(13)&chr$(10)
	line = line & "Created on   : " & date5 & chr$(13)&chr$(10)
	line = line & "Requester    : " & name1 & chr$(13)&chr$(10)
	line = line & "Project      : " & tdpur201.cprj &" "& tcmcs052.dsca & chr$(13)&chr$(10)
	line = line & "Reference A  : " & tdpur200.refa & chr$(13)&chr$(10)
	line = line & "Reference B  : " & tdpur200.refb & chr$(13)&chr$(10)
	line = line & "Amount       : " & str$(total.price)&" "&tdpur200.ccur &chr$(13)&chr$(10)
	
	seq.write(line,len(line),fp)
	ret = seq.close(fp)
	|****************************************|

	user.id = logname$
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:user.id}
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
	selectempty
		bpmdm001.mail = ""
	endselect
	
	if isspace(bpmdm001.mail) then
		message("Email ID for Approver" & tccom001.nama & " Not maintained")
		return(1)
	endif	

	select tccom001.nama:name1
	from	tccom001
	where	tccom001.loco = :tdpur200.logn
	selectdo
	endselect
	
	|******* Email Header
        message.ID = cmf.create()
	
		line = "New Notification; Indent no " & tdpur200.rqno & " from Requester " & shiftl$(strip$(name1)) & " for item "& shiftl$(strip$(tdpur200.refa)) & " has been sent to you."
		
        ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        ret = cmf.setSubject(message.ID,line)
	
	|******** from ID
	to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	ret = cmf.setRecipientName(to.ID,tccom001.nama)
        ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	ret = cmf.setRecipientType(to.ID, "SMTP")
 
	|******* to ID
| 		create.receiptant(dmisg103.emno,message.ID)
| 		create.receiptant(tdpur200.ccon,message.ID)

	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
| 	where 	tccom001._index4 = {:dmisg114.user}
| 	where 	tccom001._index4 = {:tdpur200.ccon}
	where 	tccom001._index1 = {:tdpur200.ccon}
	and	tccom001.emno refers to bpmdm001
	selectdo
		to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
		ret = cmf.setRecipientName(to.ID,tccom001.nama)
		ret = cmf.setRecipientAddress(to.ID, shiftl$(strip$(bpmdm001.mail)))	
		ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
		ret = cmf.setRecipientType(to.ID, "SMTP")
	selectempty
		message("Email ID for Buyer "& tdpur200.ccon &" not Maintained" )
		return(1)
	endselect
	
	
	
	|********* Mail Body
	attachment.ID = cmf.createAttachment(message.ID)
	ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	ret = cmf.setAttachmentMIME(attachment.ID,"text/plain")                       
	ret = cmf.setAttachmentFileName(attachment.ID,tmp.file,"abc.txt")


	|*********  Send mail
        if message.ID <>0 then
                stat = cmf.startService("SMTP",2)
                if stat<>0 then
                        message("Message could not be sent "&
                                "(Infor ERP Enterprise eMessage Connector"&
                                " service did not start)")
                        return(1)
                endif
                stat = cmf.send(message.ID,"SMTP")
                if stat<>0 then
                        message("Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&
                                "service refused message)")
                        cmf.stopService("SMTP",2)
                        return(1)
                endif
                stat = cmf.stopService("SMTP",2)
        endif
	return(0)
}


function long create.receiptant(domain tcemno in.emno,long i.message.ID)
{

	long    to.ID,ret
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index1 = {:in.emno}
	and	tccom001.emno refers to bpmdm001
	selectdo
		to.ID = cmf.createRecipient(i.message.ID, ttcmf.role.to)  
		ret = cmf.setRecipientName(to.ID,tccom001.nama)
		ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
		ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
		ret = cmf.setRecipientType(to.ID, "SMTP")
	selectempty
		message("Email ID for Approver/Rejector not maintained" )
		return(1)
	endselect
	return(0)	
}




function update.progress.update.transaction()									|#ISGEC0166.sn
{
	long srno
	
	select	tdpur201.*
	from	tdpur201
	where	tdpur201._index1 = {:tdpur200.rqno}
	selectdo
		
		srno = 1
		var.trdt = utc.num()
		var.bohd = "CT_INDENTAPPROVED"
		var.indv = tdpur200.rqno &"_"& str$(tdpur201.pono)
		
		user = logname$
		if user(1;1) = "0" then
			user = str$(lval(user))
		endif
		
		select tpisg229.*
		from	tpisg229
		where	tpisg229._index1 = {:var.trdt,:var.bohd,:var.indv,:srno}
		selectdo
		selectempty
			tpisg229.trdt = var.trdt
			tpisg229.bohd = var.bohd
			tpisg229.indv = var.indv
			tpisg229.proj = tdpur201.cprj
			tpisg229.elem = tdpur201.cspa
			tpisg229.user = toupper$(user)
			
			tpisg229.srno = 1
			
			on case tdpur200.rqst
			
| 			case tdpur.rqst.submitted:
| 				tpisg229.stat = "Submit For Approval"
| 				break
			case tdpur.rqst.approved:
				tpisg229.stat = "Approved"
				break
			endcase	
			db.insert(ttpisg229,db.skip.dupl,e)
			if e = 0 then
				commit.transaction()
			else
				abort.transaction()
			endif
		endselect 
		
		select	count(tdisg003.docn):v.count, sum(tdisg003.wght):v.wght,
			sum(tdisg003.qnty):sum.qnty, tdisg003.docn, tdisg003.quom
		from	tdisg003 
		where	tdisg003._index1 = {:tdpur200.rqno,:tdpur201.pono}
		group by tdisg003.docn, tdisg003.quom
		selectdo
| 		endselect
			select	a_dmisg140.iref:iref.230
			from	dmisg140 a_dmisg140  
			where	a_dmisg140.docn = :tdisg003.docn
			selectdo						
			endselect									
			
			select	a_tpisg232.cuni:iref.cuni
			from	tpisg232 a_tpisg232
			where	a_tpisg232.iref =:iref.230
			selectdo
			endselect
	
			select tpisg230.*
			from	tpisg230 
			where	tpisg230._index1 = {:var.trdt,:var.bohd,:var.indv,:srno}
			selectdo
			selectempty
				tpisg230.trdt = var.trdt
				tpisg230.bohd = var.bohd
				tpisg230.indv = var.indv
				tpisg230.srno = srno
				tpisg230.dsno = get.last.serial.num()
				tpisg230.proj = tdpur201.cprj
				tpisg230.elem = tdpur201.cspa
				tpisg230.dwno = tdisg003.docn
| 				tpisg230.dwno = get.docn()
				tpisg230.wght = v.wght
				tpisg230.pitc = v.count
				tpisg230.quan = sum.qnty								|#ISGEC01100.sn
				tpisg230.cuni = tdisg003.quom
				tpisg230.iref = iref.230
				tpisg230.iuom = iref.cuni
				db.insert(ttpisg230,db.skip.dupl,e)
				if e = 0 then
					commit.transaction()
					srno = srno + 1
				else
					abort.transaction()
				endif
			endselect
		endselect
		
		select	sum(tdisg003.qnty):var.qnty,
			tdisg003.quom
		from	tdisg003 
		where	tdisg003._index1 = {:tdpur200.rqno,:tdpur201.pono}
		group by tdisg003.quom
		selectdo
			select	tpisg235.*
			from	tpisg235
			where	tpisg235._index1 = {:var.trdt,:var.bohd,:var.indv,:srno}
			selectdo
				
			selectempty
				tpisg235.trdt = var.trdt
				tpisg235.bohd = var.bohd
				tpisg235.indv = var.indv
				tpisg235.srno = srno
				tpisg235.sern = get.last.unit.serial.number()
				tpisg235.cuni = tdisg003.quom
				tpisg235.qnty = var.qnty
						
				db.insert(ttpisg235,db.skip.dupl,e)
				if e = 0 then
					commit.transaction()
				else
					abort.transaction()
				endif
			endselect	
		endselect
	endselect
}

function domain tcmcs.long get.last.unit.serial.number()
{

	select	tpisg235.sern
	from	tpisg235
	order by tpisg235.sern desc
	as set with 1 rows
	selectdo
		var.sern = tpisg235.sern + 1
	selectempty
		var.sern = 0
	endselect
	
	return(var.sern)
}

function domain tcmcs.long get.last.serial.num()
{
	select	tpisg230.dsno:v.dsno
	from	tpisg230
	order by tpisg230.dsno desc
	as set with 1 rows
	selectdo
		v.dsno = v.dsno + 1
	selectempty
		v.dsno = 1
	endselect

	return(v.dsno)
}

function domain dmdoc.docid get.docn()
{
	select	tdisg003.docn
	from	tdisg003 
	where	tdisg003._index1 = {:tdpur200.rqno,:tdpur201.pono}
	selectdo
		
	selectempty
		tdisg003.docn = ""
	endselect
	
	return(tdisg003.docn)
}												|#ISGEC0166.en

function update_pmdl()										|#ISGEC01100.sn
{
| 	get.po.index()
	select	tdisg003.docn 
	from	tdisg003
	where	tdisg003._index1 = {:tdpur200.rqno}|, :var.pono}
	group by tdisg003.docn
	selectdo
		select	dmisg140.*
		from	dmisg140 for update
		where	dmisg140.docn =:tdisg003.docn
		and	dmisg140.docn <> ""
		selectdo
			flag = 0
			
			dmisg140.iadt = get.least.date()
			
			select	tpisg230.*
			from	tpisg230
			where	tpisg230.dwno = :dmisg140.docn
			and	tpisg230.bohd = "CT_INDENTAPPROVED"
			order by tpisg230.trdt asc
			selectdo
				flag = 1

				v.count = 0
				v.wght = 0.00
				get.po.index()
				get.po.req.bom.item.weight()
				
			endselect
			
			if flag = 1 then
				dmisg140.upct = tcyesno.yes
				
				db.update(tdmisg140,db.retry,e)
						
				if e = 0 then
					commit.transaction()
				else
					abort.transaction()
				endif
			endif
			
			
		endselect
	endselect

}

function domain tcdate get.least.date()
{
	select	tpisg230.trdt
	from	tpisg230, dmisg140
	where	tpisg230.proj =:dmisg140.cprj
	and	tpisg230.dwno = :tdisg003.docn
	and	tpisg230.bohd = "CT_INDENTAPPROVED"
	and 	dmisg140.iref = :dmisg140.iref
	order by tpisg230.trdt asc
	as set with 1 rows
	selectdo
	selectempty
		tpisg230.trdt = 0
	endselect
	result = sprintf$("%u002 %001",tpisg230.trdt) 
	return(tpisg230.trdt)
}

function get.po.index()
{
	pos1 = pos(tpisg230.indv,"_")
	pos2 = len(tpisg230.indv)
	
	pos2 = pos2 -pos1
	
	var.indv = tpisg230.indv(1;pos1-1)
	var.revi = tpisg230.indv(pos1+1;pos2)
	var.revi = trim$(var.revi)
	var.pono = lval(tpisg230.indv(pos1+1;pos2))
}

function get.po.req.bom.item.weight()
{
	select	count(tdisg003.docn):v.count,
		sum(tdisg003.wght):v.wght
	from	tdisg003 
	where	tdisg003._index1 = {:var.indv}
	and	tdisg003.docn =:dmisg140.docn
	selectdo
		dmisg140.idct = v.count
		dmisg140.idwt = v.wght
	endselect
	
}
