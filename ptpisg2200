|******************************************************************************
|* tpisg220  0  VRC B61U a7 isg 
|* tpisg220 - DAL2
|* merino1
|* 18-02-08 [12:47]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
|* ID: ISGECMOD011, Gokul Chaurasia, 08-02-2018, VRC B61U a7 isg
|* New Devlopment
|*
|* ID: ISGEC01128, Prasanna Bhuyan, VRC B61U a7 isg, 28-11-2018
|* Modifications
|*
|* ID: ISGEC016016, Sahil Sharma,  VRC B61U a7 isg, 24-01-2019
|* Modifications
|*
|* ID: ISGEC01179, Prasanna Bhuyan, VRC B61U a7 isg, 28-03-2019
|* Insertion in log table "tpisg253" when something is updated in session "tpisg2120m014"
|*
|* ID: ISGEC01181, Prasanna Bhuyan, VRC B61U a7 isg, 28-03-2019
|* Insertion in log table "tpisg254" when something is updated in session "tpisg2120m013"
|* And Input is Disabled in session "tpisg2120m013" Whose Document No. doesn't exist 
|*
|* Adarsh Pal, VRC B61U a7 isg, 26-04-2019
|* Updation of Dal for Materials New Session for RFQ-TO-PO
|*
|* Adarsh Pal, VRC B61U a7 isg, 01-05-2019
|* New Checks on Start and Finish Dates on Cumulative Progress Basis
|*
|* Adarsh Pal, VRC B61U a7 isg, 14-05-2019
|* Manual Flag Readonly if activity is of type: PARENT
|******************************************************************************
|------------------------ Declaration Section ---------------------------------
#include <bic_dal2>
	
	table	ttpisg220 | Project Activity Master
	table	ttpisg200 | Product Wise Activity Master
	table	ttpisg240
	table	ttpisg241
	table	ttpisg221
	table	ttpisg253 | Control Tower Change Flag-Log		|#ISGEC01179.n
	table	ttpisg254 | Manual Activity Progress Log		|#ISGEC01181.sn
	table	tdmisg140 | Project MDL					|#ISGEC01181.en
	
	
	domain	tcmcs.str30	var.cact, parent.act, chk.pact
	domain	tcpono		flag
	domain	tcmcs.long	pact.len
	domain	tcsess		sess.code, sess.code1
	domain	tcmcs.long	idno
	domain	tcdate 		curr.date		|#ISGEC01179.n
	domain	dmdoc.docid	docn			|#ISGEC01181.n
	extern	domain	tccprj		i.cprj, t.cprj, imp.cprj
	extern	domain	tcorno		i.pcod, i.acty, t.pcod, imp.pcod
	extern	domain	tcmcs.str30	t.cact, t.pact, imp.cact, imp.pact
	
|-------------------------- Object Hooks --------------------------------------

function extern long before.open.object.set()
{
	import("prog.name$", sess.code)
	get.var(pid,"prog.name$",sess.code1)			|#ISGEC016016.n
	handle.field.dependencies()
	return(0)
}

| function extern long before.save.object(long type)
function extern long after.save.object(long type)
{
	on case type									|#ISGEC01179.sn								
	case DAL_UPDATE :
| 			if sess.code1 = "tpisg2120m014" then						|#Adarsh.26.04.2019.o
			if sess.code1 = "tpisg2120m014" or sess.code1 = "tpisg2120m015" then		|#Adarsh.26.04.2019.n
				with.old.object.values.do(insert.old.values.in.control.tower.flag.log.file)
			else								|#ISGEC01181.sn
| 				if sess.code1 = "tpisg2120m013" then					|#Adarsh.26.04.2019.o
				if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016"  then	|#Adarsh.26.04.2019.n
					with.old.object.values.do(insert.old.values.in.manual.activity.progress.log.file)
				endif
			endif								|#ISGEC01181.en
			break
	endcase										
											|#ISGEC01179.en
	return(0)
}

| function extern long after.save.object(long type)
| {
| 	
| 	on case type
| 		case 	DAL_NEW :
| 		case	DAL_UPDATE :
| 				if not valid.finish.date(tpisg220.cpgv) then
| 					if	tpisg220.acfn	<>	0	then
| 						return(DALHOOKERROR)
| 					endif
| 				endif
| 			break
| 	endcase
| 	return(0)
| }

function extern long before.destroy.object()
{
	t.cprj = tpisg220.cprj
	t.pcod = tpisg220.pcod
	t.cact = tpisg220.cact
	t.pact = tpisg220.pact
	return(0)
}

function extern long after.destroy.object()
{
| 	with.old.object.values.do(	delete.predecessors.activity,
| 					t.cprj,
| 					t.pcod,
| 					t.cact,
| 					t.pact)

| 	if not renumber.in.220(tpisg220.cprj, tpisg220.pcod) then
| 		commit.transaction()
| 	else
| 		return(DALHOOKERROR)
| 	endif
	 

	return(0)
}


| function extern boolean method.is.allowed(long type)		|#ISGEC01128.sn
| {
| 	on case type
| 	case DAL_NEW :
| 			return(false)
| 	endcase
| 	return(true)
| }									|#ISGEC01128.sn
|------------------------------ Field Hooks ------------------------------------

|* [tpisg220.cprj]

function extern boolean tpisg220.cprj.is.mandatory(long mode)
{

	return(true)
}

|* [tpisg220.pcod]

function extern boolean tpisg220.pcod.is.mandatory(long mode)
{
	
	return(true)
}



function extern void tpisg220.pcod.update(long mode)
{
	select	dmisg140.pcod:tpisg220.pcod
	from	dmisg140
	where	dmisg140._index2 = {:tpisg220.cprj}
	as set with 1 rows
	selectdo
	selectempty
		tpisg220.pcod = ""
	endselect
}




|* [tpisg220.cact]

function extern boolean tpisg220.cact.is.mandatory(long mode)
{
	return(true)
}

|* [tpisg220.acfn]

| function extern boolean tpisg220.acfn.is.mandatory(long mode)
| {
| 	if	tpisg220.cpgv <> 100	then
| 		return(false)
| 	endif
|
|	 return(true)
| }

function extern boolean tpisg220.cact.is.valid(long mode)
{
	if not check.activity.code(tpisg220.pcod,
				    tpisg220.cact)	then
		dal.set.error.message("@Please Select Valid Activity Code")
		return(DALHOOKERROR)
	endif
	
	return(true)
}

|* [tpisg220.pact]

function extern boolean tpisg220.pact.is.valid(long mode)
{
	if not isspace(tpisg220.pact)	then
| 		if not check.predecessor.activity(tpisg220.cprj,
| 						   tpisg220.pcod,
| 						   tpisg220.schd,
| 						   tpisg220.pact) then
		if not check.activity.code(tpisg220.pcod,
					tpisg220.pact)	then
			dal.set.error.message("@Please Select Valid Predecessor Activity")
			return(DALHOOKERROR)
		endif
	endif
	
	
	return(true)
}
| function extern boolean tpisg220.sele.is.valid(long mode)
| {
| 	if tpisg220.sele = tcyesno.yes then
| 		check.child()
| 		if flag = 1 then 
| 			dal.set.error.message("@Invalid Selection")
| 			return(DALHOOKERROR)
| 		endif
| 	endif
| 	return(true)
| }

|* [tpisg220.bcod]

| function extern boolean tpisg220.bcod.is.valid(long mode)						|#Anadi.so
| {
| 	if not isspace(tpisg220.bcod)	then
| 		if not check.basis.code(tpisg220.cprj,
| 					tpisg220.pcod,
| 					tpisg220.bcod)	then
| 			dal.set.error.message("@Please Select Valid Lead Time Basis")
| 			return(DALHOOKERROR)
| 		endif
| 	endif

| 	return(true)
| }													|#anadi.eo

|----------------------------- Function Section ---------------------------------

function handle.field.dependencies()
{
	dal.field.depends.on("tpisg220.pcod",HOOK_UPDATE,"tpisg220.cprj")
| 	dal.field.depends.on("tpisg220.manu",HOOK_IS_READONLY,"tpisg220.frez")						|#ISGEC01128.sn		|14.05.19.Adarsh.o
	dal.field.depends.on("tpisg220.manu",HOOK_IS_READONLY,"tpisg220.frez",HOOK_IS_READONLY,"tpisg220.acty")					|14.05.19.Adarsh.n
	dal.field.depends.on("tpisg220.rmcm",HOOK_IS_READONLY,"tpisg220.frez")	
	
	dal.field.depends.on("tpisg220.cpgv",HOOK_IS_READONLY,"tpisg220.manu")				|#ISGEC01181.sn
																	|01.05.19.Adarsh.so
| 	dal.field.depends.on("tpisg220.acsd",HOOK_IS_READONLY,"tpisg220.manu")								
| 	dal.field.depends.on("tpisg220.acfn",HOOK_IS_READONLY,"tpisg220.manu")					
																	|01.05.19.Adarsh.eo
																	|01.05.19.Adarsh.sn
	dal.field.depends.on("tpisg220.acsd",HOOK_IS_READONLY,"tpisg220.manu",HOOK_IS_APPLICABLE + HOOK_IS_MANDATORY,"tpisg220.cpgv")				
	dal.field.depends.on("tpisg220.acfn",HOOK_IS_READONLY,"tpisg220.manu",HOOK_IS_APPLICABLE + HOOK_IS_MANDATORY,"tpisg220.cpgv")			
																	|01.05.19.Adarsh.en
}
																	|01.05.19.Adarsh.sn
function extern	boolean tpisg220.acsd.is.applicable()
{
	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then
		if tpisg220.cpgv = 0 then
			return(false)
		else
			if tpisg220.cpgv > 0 and tpisg220.cpgv < 100 then
				return(true)
			else
				if tpisg220.cpgv = 100 then
					return(true)
				endif
			endif
		endif
	endif	
	return(false)
}

function extern	boolean tpisg220.acfn.is.applicable()
{
	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then
		if tpisg220.cpgv = 0 then
			return(false)
		else
			if tpisg220.cpgv > 0 and tpisg220.cpgv < 100 then
				return(false)
			else
				if tpisg220.cpgv = 100 then
					return(true)
				endif
			endif
		endif
	endif	
	return(false)
}

function extern	boolean	tpisg220.acsd.is.mandatory()
{
	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then
		if tpisg220.cpgv > 0 and tpisg220.cpgv < 100 then
				return(true)
		else
			if tpisg220.cpgv = 100 then
				return(true)
			else
				return(false)
			endif
		endif
	endif
	return(false)
}

function extern	boolean	tpisg220.acfn.is.mandatory()
{
	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then
		if tpisg220.cpgv = 100 then
			return(true)
		endif
	endif
	return(false)
}
																	|01.05.19.Adarsh.en
													|#Adarsh.26.04.2019.so	
| function extern boolean tpisg220.cpgv.is.readonly()
| {
| 	if sess.code1 = "tpisg2120m013" then								|#Adarsh.26.04.2019.o				
| 	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then				|#Adarsh.26.04.2019.n	
| 		check_document_no(tpisg220.pcod, tpisg220.cprj, tpisg220.sub1, tpisg220.cact, docn)
| 		
| 		if not isspace(docn)	then
| 			return(false)
| 		endif

| 	endif
| 	
| 	return(true)
| }

| function extern boolean tpisg220.acsd.is.readonly()
| {
| 	if sess.code1 = "tpisg2120m013" then								|#Adarsh.26.04.2019.o
| 	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then				|#Adarsh.26.04.2019.n	
| 		check_document_no(tpisg220.pcod, tpisg220.cprj, tpisg220.sub1, tpisg220.cact, docn)
| 		
| 		if not isspace(docn)	then
| 			return(false)
| 		endif

| 	endif
| 	
| 	return(true)
| }

| function extern boolean tpisg220.acfn.is.readonly()
| {
| 	if sess.code1 = "tpisg2120m013" then								|#Adarsh.26.04.2019.o
| 	if sess.code1 = "tpisg2120m013" or sess.code1 = "tpisg2120m016" then				|#Adarsh.26.04.2019.n	
| 		check_document_no(tpisg220.pcod, tpisg220.cprj, tpisg220.sub1, tpisg220.cact, docn)
| 		
| 		if not isspace(docn)	then
| 			return(false)
| 		endif

| 	endif
| 	
| 	return(true)
| }												|#ISGEC01181.en
													|#Adarsh.26.04.2019.eo
function extern boolean tpisg220.rmcm.is.readonly()
{
| 	if sess.code1 <> "tpisg2120m014"  then					|#ISGEC016016.n		|#Adarsh.26.04.2019.o
	if sess.code1 <> "tpisg2120m014" or sess.code1 <> "tpisg2120m015" then				|#Adarsh.26.04.2019.n
| 		if	tpisg220.frez <> tcyesno.yes	then			|#ISGEC016016.o
		if	tpisg220.frez = tcyesno.yes	then			|#ISGEC016016.n
			return(true)
		endif

| 		return(true)							|#ISGEC016016.o
	endif
	
	return(false)
}													 

function extern boolean tpisg220.manu.is.readonly()
{
| 	if sess.code1 <> "tpisg2120m014" then					|#ISGEC016016.n			|14.05.19.Adarsh.o
	if sess.code1 <> "tpisg2120m014" and sess.code1 <> "tpisg2120m015" then					|14.05.19.Adarsh.n
| 		if	tpisg220.frez <> tcyesno.yes	then			|#ISGEC016016.o
		if	tpisg220.frez = tcyesno.yes	then			|#ISGEC016016.n
			return(true)
		else
			if trim$(tpisg220.acty) = "PARENT" then
				return(true)
			endif
		endif
	endif	
| 		return(true)							|#ISGEC016016.o
	if sess.code1 = "tpisg2120m014" or sess.code1 = "tpisg2120m015" then
		if trim$(tpisg220.acty) = "PARENT" then
			return(true)
		endif
	endif		
	return(false)
}													|#ISGEC01128.en



| function boolean check.parent()
| {
| 	while(tpisg220.pact <> var.cact)
| 		select	tpisg220.pact,
| 			tpisg220.sele
| 		from	tpisg220
| 		where	tpisg220.cact = :var.cact
| 		selectdo
| 			
| 			var.cact = tpisg220.pact
| 			
| 			if  tpisg220.sele = tcyesno.no then
| 				return(false)
| 			endif
| 			
| 			
| 		endselect
| 	endwhile
| 	
| 	return(true)
| }

function check_document_no(									|#ISGEC01181.sn
				domain	tcorno		i.pcod,
				domain	tccprj		i.cprj,
				domain	tcmcs.s200u	i.sub1,
				domain	tcmcs.str30	i.cact,
			ref	domain	dmdoc.docid	o.docn
								)
{
	select	dmisg140.docn:o.docn
	from	dmisg140
	where	dmisg140._index1 = {:i.pcod, :i.cprj}
	and	(dmisg140.iref =:i.sub1
	or	dmisg140.iref =:i.cact)
	as set with 1 rows
	selectdo
	selectempty
		o.docn = ""
	endselect
}												|#ISGEC01181.en

function boolean check.activity.code(
		domain	tcorno		i.pcod,
		domain	tcmcs.str30	i.cact)
{
	select	tpisg200.cact
	from	tpisg200
	where	tpisg200._index1 = {:i.pcod,
				    :i.cact}
	selectdo
	selectempty
		return(false)
	endselect
	
	return(true)
}

function boolean check.predecessor.activity(
		domain	tccprj		i.cprj,
		domain	tcorno		i.pcod,
		domain	tcyesno		i.schd,
		domain	tcmcs.str30	i.pact)
{
	domain	tcmcs.str30		dummy.cact
	
	dummy.cact = ""

	select	a_tpisg220.cact:dummy.cact
	from	tpisg220	a_tpisg220
	where	a_tpisg220._index1 = {:i.cprj,
				      :i.pcod}
	and	a_tpisg220.schd = :i.schd
	and	a_tpisg220.pact = :i.pact
	selectdo
	selectempty
		return(false)
	endselect
	
	return(true)
}

function boolean check.basis.code(
		domain	tccprj		i.cprj,
		domain	tcorno		i.pcod,
		domain	tcorno		i.bcod)
{
	select	tpisg219.bcod
	from	tpisg219
	where	tpisg219._index1 = {:i.cprj,
				    :i.pcod,
				    :i.bcod}
	selectdo
	selectempty
		return(false)
	endselect
	
	return(true)
}

function delete.predecessors.activity(	domain	tccprj		del.cprj,
					domain	tcorno		del.pcod,
					domain	tcmcs.str30	del.cact,
					domain	tcmcs.str30	del.pact,
					domain	tcmcs.s200u	del.iref)
{	
	pact.len = len(trim$(del.cact))
	
	select	tpisg220.*
	from	tpisg220   for update
	where	tpisg220._index1 = {:del.cprj}
	and	tpisg220.sub1 =:del.iref
	selectdo
		var.cact = tpisg220.cact(1;pact.len)
		if trim$(del.cact) = trim$(var.cact) then
			select	tpisg221.*
			from	tpisg221 for update
			where	tpisg221._index1 = {:t.cprj,:t.pcod,:tpisg220.cact}
			selectdo
				db.delete(ttpisg221,db.retry,e)
			endselect
			
			db.delete(ttpisg220,db.retry,e)
			commit.transaction()
		endif
	endselect
}

function insert.old.values.in.control.tower.flag.log.file()					|#ISGEC01179.sn
{
	
	curr.date = utc.num()
	
	select	tpisg253.*
	from	tpisg253
	where	tpisg253._index1 = {:tpisg220.cprj, :tpisg220.pcod, :tpisg220.cact, :curr.date}
	selectdo
	selectempty
		tpisg253.cprj = tpisg220.cprj
		tpisg253.pcod = tpisg220.pcod
		tpisg253.cact = tpisg220.cact
		tpisg253.actp = tpisg220.actp
		tpisg253.desc = tpisg220.desc
		tpisg253.dept = tpisg220.dept
		tpisg253.sub1 = tpisg220.sub1
		tpisg253.manu = tpisg220.manu
		tpisg253.rmcm = tpisg220.rmcm
		tpisg253.updt = curr.date
		tpisg253.user = logname$
		db.insert(ttpisg253,db.skip.dupl,e)
	endselect
}												|#ISGEC01179.en

function insert.old.values.in.manual.activity.progress.log.file()				|#ISGEC01181.sn
{
	
	curr.date = utc.num()
	
	select	tpisg254.*
	from	tpisg254
	where	tpisg254._index1 = {:tpisg220.cprj, :tpisg220.pcod, :tpisg220.cact, :curr.date}
	selectdo
	selectempty
		tpisg254.cprj = tpisg220.cprj
		tpisg254.pcod = tpisg220.pcod
		tpisg254.cact = tpisg220.cact
		tpisg254.desc = tpisg220.desc
		tpisg254.sub1 = tpisg220.sub1
		tpisg254.bohd = tpisg220.bohd
		tpisg254.cpgv = tpisg220.cpgv
		tpisg254.acsd = tpisg220.acsd
		tpisg254.acfn = tpisg220.acfn
		tpisg254.updt = curr.date
		tpisg254.user = logname$
		db.insert(ttpisg254,db.skip.dupl,e)
	endselect
}												|#ISGEC01181.en

| function boolean valid.finish.date
| 					(
| 						domain	tcamnt		i.cpgv
| 						)
| {
| 	if	i.cpgv	<	100.0	then
| 		dal.set.error.message("@ Finish Date Not Allowed")
| 		return(false)
| 	endif
| 	
| 	return(true)
| }

|---------------------------------- END ----------------------------------------
