|******************************************************************************
|* tdmsl503  0  VRC B61U a7 isg 
|* DAL of table tdmsl503
|* merino1
|* 16-12-23 [12:35]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
|* ID : ISGEC017006, IT0386, Saurabh Dubey, VRC B61U a7 isg, Isgec Onsite Deployment
|* Merino Services
|* New field inserted in table and further logic added
|*
|* ID : ISGEC01054, Priya Jindal, 1/3/2018
|* Conditions for update
|******************************************************************************
     
	table	ttdpur400	|Purchase Order
	table	ttdpur401
	table	ttpisg122
	table	ttctax400
	table	ttcisg104
	table	ttdmsl503	|Purchase Order Lines Footer and Line Description
	table	ttctax940	|GH638.04102021
	table	ttcmcs065	|GH638.04102021
	
	domain	tctax.seqn.l	o.rnsb.l
	
	#include <bic_dal2>
	#include "itcisg00001"
	#define CREDIT.ELIGIBILITY.APPLICABLE tdmsl503.crel = tcyesno.yes


function extern long before.open.object.set()
{
	field.dependecies()
	return(0)
}

function extern long after.save.object(long type)
{				|#ISGEC017006.sn
	long ret.val
	
	on case type
	case DAL_UPDATE :
		select	tdpur401.cvat, tdpur401.rnso.l, tdpur401.rnsb.l,
			tdpur401.hcod.l
		from	tdpur401 for update
		where	tdpur401._index1 = {
					:tdmsl503.orno, 
					:tdmsl503.pono
					}
		selectdo
			if tdmsl503.cvat <> tdpur401.cvat or tdmsl503.gstn.c <> tdpur401.rnso.l or tdmsl503.gstn.b <> tdpur401.rnsb.l then |ISGEC01054.n
				dal.change.object("tdpur401")
				
				if not isspace(tdmsl503.cvat) then
					dal.set.field("tdpur401.cvat", tdmsl503.cvat)
				endif
				
				if tdmsl503.gstn.c <> 0 then
					dal.set.field("tdpur401.rnso.l", tdmsl503.gstn.c)
				endif
				
				if tdmsl503.gstn.b <> 0 then
					dal.set.field("tdpur401.rnsb.l", tdmsl503.gstn.b)
				endif
				
				ret.val = dal.save.object("tdpur401")
				
				if ret.val <> 0 then
					show.dal.messages(MSG.ALL)
					return(DALHOOKERROR)
				endif
			endif														|ISGEC01054.n
		endselect
		break
	endcase
						|#ISGEC017006.en
	return(0)
}

function	extern	boolean	method.is.allowed(long	type)
{
	on case type
	case DAL_DESTROY :
		if	order.status() then
			return(false)
		endif
		break
	endcase	
	return(true)
}

|****************************** tdmsl503.ldes *********************************
function	extern	boolean	tdmsl503.ldes.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.lde2 *********************************
function	extern	boolean	tdmsl503.lde2.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.lde3 *********************************
function	extern	boolean	tdmsl503.lde3.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}
										|#ISGEC017006.sn
|****************************** tdmsl503.typo *********************************
function	extern	boolean	tdmsl503.typo.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.mtrd *********************************
function	extern	boolean	tdmsl503.mtrd.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.rcma *********************************
function	extern	boolean	tdmsl503.rcma.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.crel *********************************
function	extern	boolean	tdmsl503.crel.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.code *********************************
function	extern	boolean	tdmsl503.code.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.cvat *********************************
function	extern	boolean	tdmsl503.cvat.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.ipgs *********************************
function	extern	boolean	tdmsl503.ipgs.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.ipss *********************************
function	extern	boolean	tdmsl503.ipss.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.clgs *********************************
function	extern	boolean	tdmsl503.clgs.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.gstn.b *********************************
function	extern	boolean	tdmsl503.gstn.b.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.gstn.c *********************************
function	extern	boolean	tdmsl503.gstn.c.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.impr *********************************
function	extern	boolean	tdmsl503.impr.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.ldat *********************************
function	extern	boolean	tdmsl503.ldat.is.derived(long	type)
{
	if	order.status()	then
		return(true)
	endif
	return(false)
}

|****************************** tdmsl503.ipgs *********************************

function extern boolean tdmsl503.ipgs.is.applicable(long type)
{
	on case type
	case DAL_NEW :
	case DAL_UPDATE :
		if CREDIT.ELIGIBILITY.APPLICABLE then
			return(true)
		endif
		break
	endcase
	
	return(false)
}

|****************************** tdmsl503.ipss *********************************

function extern boolean tdmsl503.ipss.is.applicable(long type)
{
	on case type
	case DAL_NEW :
	case DAL_UPDATE :
		if CREDIT.ELIGIBILITY.APPLICABLE then
			return(true)
		endif
		break
	endcase
	
	return(false)
}

|****************************** tdmsl503.clgs *********************************

function extern boolean tdmsl503.clgs.is.applicable(long type)
{
	on case type
	case DAL_NEW :
	case DAL_UPDATE :
		if CREDIT.ELIGIBILITY.APPLICABLE then
			return(true)
		endif
		break
	endcase
	
	return(false)
}
										|#ISGEC017006.en
|****************************** function section ******************************
function	domain	tcbool	order.status()
{
	select	tdpur400.hdst
	from	tdpur400
	where	tdpur400._index1	=	{:tdmsl503.orno}
	and	tdpur400.hdst		not	in	(tdpur.hdst.created,tdpur.hdst.modified)
	as	set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function	field.dependecies()
{
	dal.field.depends.on("tdmsl503.ldes", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.lde2", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.lde3", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.typo", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.rcma", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.mtrd", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.crel", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.code", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.cvat", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.ipgs", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.ipss", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.clgs", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.impr", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.gstn.c", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.gstn.b", HOOK_IS_DERIVED, "tdmsl503.orno")
	dal.field.depends.on("tdmsl503.ipgs", HOOK_IS_APPLICABLE, "tdmsl503.crel")
	dal.field.depends.on("tdmsl503.ipss", HOOK_IS_APPLICABLE, "tdmsl503.crel")
	dal.field.depends.on("tdmsl503.clgs", HOOK_IS_APPLICABLE, "tdmsl503.crel")
}

						|#ISGEC017006.sn
function extern boolean tdmsl503.code.is.valid(long mode)
{
	domain	tcmcs.str100	o.err.msg
	domain	tcisg.item.typ	o.ityp
	
	
	tcisgdll0100.get.item.type.from.goods.service(tdmsl503.typo, o.ityp)
	
	if tcisgdll0100.check.HSN.SAC.code(o.ityp, tdmsl503.code, o.err.msg) then
		dal.set.error.message("@%s", o.err.msg)
		return(false)
	endif
	
	return(true)
}


function extern boolean tdmsl503.cvat.is.valid(long mode)
{
	domain	tcmcs.s250m	o.error.msgs
	
	if not tcmcs.dll0036.tax.code.belongs.to.country(OWN.COUNTRY, tdmsl503.cvat, o.error.msgs) then
		dal.set.error.message("@%s", o.error.msgs)
		return(false)
	endif
	
	return(true)
}


function extern boolean tdmsl503.gstn.b.is.valid(long mode)
{
	domain	tccom.bpid	o.temp.bpid
	domain	tcccty		o.temp.bptc
	domain	tcdate		o.temp.date
	domain	tcmcs.str100	o.err.mess
	
	select	tdpur401.bptc:o.temp.bptc,
		tdpur401.otbp:o.temp.bpid,
		tdpur401.odat:o.temp.date
	from	tdpur401
	where	tdpur401._index1 = {:tdmsl503.orno, :tdmsl503.pono}
	selectdo
	selectempty
		o.temp.bptc = ""
		o.temp.bptc = ""
		o.temp.date = 0
	endselect
	
	if not tcisgdll0100.check.bp.seqn.l.effectivity.l(	o.temp.bpid,
								o.temp.bptc,
								tdmsl503.gstn.b,	|* Supplier GSTIN Seq.
								o.temp.date,		|* Order Date
								o.err.mess) then
								
		dal.set.error.message("@%s", o.err.mess)
		return(false)
	endif
	
	return(true)
}


function extern boolean tdmsl503.gstn.c.is.valid(long mode)
{
	if not tcisgdll0100.check.if.company.registraion.seq.exists(tdmsl503.gstn.c) then
		dal.set.error.message("@Regsiatration Sequence Not Valid.... ")
		return(false)
	endif
	
	if not valid.registration.no.sequence.own() then						|GH638.04102021.strt
		dal.set.error.message("@Please select valid Isgec GSTIN.")	
		return(false)
	endif	
	
	return(true)
}
						|#ISGEC017006.en
						
function boolean valid.registration.no.sequence.own()
{
	select	tdpur400.cofc
	from	tdpur400
	where	tdpur400._index1 = {:tdmsl503.orno}
	selectdo
		select	tcmcs065.comp
		from	tcmcs065
		where	tcmcs065._index1 = {:tdpur400.cofc}
		and	tcmcs065.typd = 2
		selectdo
			select	tctax940.fico
			from	tctax940
			where	tctax940._index1 = {:tdpur401.rnso.l}
			selectdo
			endselect	
		endselect	
	endselect

	if tctax940.fico = tcmcs065.comp then
		return(true)
	else
		return(false)
	endif
}									|GH638.04102021.end
						
|****************************** END OF CODE ***********************************
