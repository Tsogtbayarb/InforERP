|******************************************************************************
|* ciisg2405m2000  0  VRC B61U a7 isg 
|* Data For GSTR-1
|* merino1                       
|* 2017-06-13
|******************************************************************************
|* Main table cisli205 Invoice-Source Relations, Form Type 4
|******************************************************************************
|* ID : ISGECGST006, IT0386, Saurabh Dubey, 14 June 2017, VRC B61U a7 isg
|* GSTR-1, Functional : Mrs. Veena(Isgec)
|* Isgec Onsite Deployment
|* Merino Services
|******************************************************************************
|* GH284CR582_000,Data for GSTR-1 Advance receipt in company 651
|* Paras Kukreti, 2020-02-28
|******************************************************************************
                                                                                
|****************************** declaration section ***************************
declaration:

	table	tcisli205 | Invoice-Source Relations
	table	ttpisg039
	table	ttpisg122
	table	ttdisg831
	table	ttdisg832
	table	ttccom130
	table	ttcmcs143
	table	ttcmcs032
	table	ttcmcs033
	table	ttcmcs035
	table	ttcmcs036
	table	ttcmcs010
	table	ttccom139
	table	ttctax400
	table	ttctax941
	table	ttppin020
	table	ttfacr200
	table	ttfgld106
	table	ttfgld001
	table	ttfgld070
	table	ttpisg122

	extern	domain	tcgld.docn      idoc.f
	extern 	domain 	tcgld.docn      idoc.t
	extern 	domain 	tctran      	ityp.f    
	extern 	domain 	tctran		ityp.t    
	extern 	domain 	tcncmp		sfcp.f 
	extern 	domain 	tcncmp		sfcp.t 
	extern 	domain 	tcmcs.str15	invoice.catg, supply.type, adv.doc, rep.dcdt
	extern 	domain 	tcmcs.str10	exp.type
	extern 	domain 	tcmcs.str1	rcm.appl, exp.inv, goods.or.services
	extern 	domain 	tcmcs.str2	place.of.supply, bill.to.code, ship.to.code, own.code
	extern	domain	tcnama		bill.to.nama, ship.to.nama, own.nama
	extern	domain	tcpstc		bill.to.zipcode, ship.to.zipcode, own.zipcode
	extern	domain	tcdsca		bill.to.country, ship.to.country, own.ccty
	extern	domain	tcdsca		bill.to.state, ship.to.state, own.state
	extern	domain	tcdsca		bill.to.city, ship.to.city, own.city
	extern	domain	tcmcs.str215m	bill.to.address, ship.to.address, own.address
	extern	domain	tcfovn		gstn.b.no		|* Bill To GSTIN
	extern	domain	tcfovn		gstn.s.no		|* Ship To GSTIN
	extern	domain	tcfovn		gstn.c.no		|* Company(Isgec) GSTIN
	extern	domain	tcpvat		cgst.rate, sgst.rate, igst.rate, utgst.rate, cess.rate
	extern	domain	tcamnt		cgst.amnt, sgst.amnt, igst.amnt, utgst.amnt, cess.amnt
	extern	domain	tcamnt		tot.amnt, assv.val
	extern	domain	tfgld.date	adv.doc.date
	extern	domain	tfgld.year	fyer.f
	extern	domain	tfgld.prod	fprd.f, fprd.t
		domain	tcccty		ccty.s, ccty.b
		domain	tcmcs.cste	cste.s, cste.b
		domain	tcncmp		curr.comp
	
	string	err.file(100), file.name(100), line(2500)
		long  	stat.fp, ret2
		
	#pragma used dll ottdllbw 
	#define DOMESTIC.INVOICE cisli205.ccur = "INR"
	#define ADV.TYPE "AAR"
	#include "itcisg00001"

|****************************** program section ********************************
before.program:
	curr.comp = get.compnr()

|****************************** group section **********************************

group.1:
init.group:
	get.screen.defaults()

|****************************** choice section ********************************

choice.print.report:
on.choice:
	generate.file()

|****************************** field section *********************************

field.sfcp.f:
before.input:
	sfcp.f = get.compnr()
	
when.field.changes:
	sfcp.t = sfcp.f	
	

field.ityp.f:
when.field.changes:
	ityp.t = ityp.f
	

field.idoc.f:
when.field.changes:
	idoc.t = idoc.f


|****************************** function section ******************************

functions:

function generate.file()
{
	err.file = "c:\temp\" & str$(utc.num()) & ".xls"
	
	file.name = "c:\temp\" & str$(utc.num())  & ".xls"
	
	stat.fp = seq.open(err.file, "w+")
	
	generate.header()
	read.main.table()
	
	message("Please refer to file %s in C:", file.name)
	
	seq.close(stat.fp)
	ret2 = server2client(err.file,file.name,1)
	ret2 = app_start(file.name,"c:","","","")
}


function generate.header()
{
	if stat.fp >0 then
		
			line =concat$("	", 
			sprintf$("AdvanceReceipt_Date"),		|1
			sprintf$("AdvanceReceipt_Document_Number"),	|2
			sprintf$("Customer_Billing_Name"),		|3
			sprintf$("Customer_Billing_GSTIN"),		|4
			sprintf$("State_Place_of_Supply"),		|5
			sprintf$("Item_Type_G_or_S"),			|6
			sprintf$("Item_Description"),			|7
			sprintf$("HSN_SAC_code"),			|8
			sprintf$("Item_Quantity"),			|9
			sprintf$("Item_UnitOfMeasurement"),		|10
			sprintf$("Item_Rate"),				|11
			sprintf$("Total_Item_Discount_Amount"),	|12
			sprintf$("Item_Taxable_Value"),		|13
			sprintf$("IGST_Rate"),				|14
			sprintf$("IGST_Amount"),			|15
			sprintf$("CGST_Rate"),				|16
			sprintf$("CGST_Amount"),			|17
			sprintf$("SGST_Rate"),				|18
			sprintf$("SGST_Amount"),			|19
			sprintf$("CESS_Rate"),				|20
			sprintf$("CESS_Amount"),			|21
			sprintf$("Flag_Advance_For_Bill_of_Supply"),	|22
			sprintf$("Flag_Reverse_Charge"),		|23
			sprintf$("Original_ AdvanceReceipt_Date"), 	|24
			sprintf$("Original_AdvanceReceipt_Document_Number"),	|25
			sprintf$("Supplier_GSTIN"),			|26
			sprintf$("Customer_Billing_Address"),		|27
			sprintf$("Customer_Billing_City"),		|28
			sprintf$("Customer_Billing_State"),		|29
			sprintf$(""))						|Last
	
	
		line = strip$(shiftl$(line))
		seq.puts(line, stat.fp)
	endif
}

function read.main.table()
{
	domain	tccprj		temp.cprj
	domain	tfgld.amnt	tax.amnt
	
	sfcp.f = curr.comp
	sfcp.t = 250
	
	if curr.comp = 700 then
		sfcp.t = 700
	endif
	
	if curr.comp = 651 then							|#GH284CR582_000.sn
		sfcp.t = 651
	endif									|#GH284CR582_000.en
	
	select	tfgld001.ncmp
	from	tfgld001
	where	tfgld001._index1 inrange {:sfcp.f} and {:sfcp.t}
	selectdo
		switch.to.company(tfgld001.ncmp)
		
		select	tfacr200.dim1, tfacr200.amth, tfacr200.vatc,
			tfacr200.cvat, tfacr200.ttyp, tfacr200.ninv,
			tfacr200.line, tfacr200.docd ,tfacr200.refr
		from	tfacr200
		where	tfacr200._index3  = {:fyer.f}
		and	tfacr200.prod inrange :fprd.f and :fprd.t
		and	tfacr200.trec = tfacr.trec.advance
		selectdo
			tt.align.according.domain(tfacr200.dim1, temp.cprj, "tccprj")
			
			select	tpisg122.*
			from	tpisg122
			where	tpisg122._index1 = {:temp.cprj}
			selectdo
			selectempty
				tpisg122.gstn.c = 0
				tpisg122.gstn.b = 0
				tpisg122.gstn.s = 0
			endselect
			
			if tpisg122.ctyp = tpisg.cont.typ.goods then
				goods.or.services = "G"
			else
				goods.or.services = "S"
			endif
			
			|* Customer Details
			get.GSTIN.details(
					0,
					tpisg122.gstn.b,	|* Bill to GSTIN
					gstn.b.no,		|* GST No.
					bill.to.nama,
					bill.to.country,
					bill.to.zipcode,
					bill.to.code,
					bill.to.state,
					bill.to.city,
					bill.to.address
					)
					
			|* Consignee Details
			get.GSTIN.details(
					0,
					tpisg122.gstn.s,	|* Ship To GSTIN(Consignee)
					gstn.s.no,		|* GST No.
					ship.to.nama,
					ship.to.country,
					ship.to.zipcode,
					ship.to.code,
					ship.to.state,
					ship.to.city,
					ship.to.address
					)
			
			|* Own(Isgec) Details
			get.GSTIN.details(
					1,
					tpisg122.gstn.c,	|* Isgec GSTIN(Company)
					gstn.c.no,		|* GST No.
					own.nama,
					own.ccty,
					own.zipcode,
					own.code,
					own.state,
					own.city,
					own.address
					)
					
			place.of.supply = bill.to.code
			
			get.tax.rates.and.tax.amounts(tctax.indt.l.cgst, cgst.rate, cgst.amnt)	|* For CGST
			get.tax.rates.and.tax.amounts(tctax.indt.l.sgst, sgst.rate, sgst.amnt)	|* For SGST
			get.tax.rates.and.tax.amounts(tctax.indt.l.utgst,utgst.rate,utgst.amnt)	|* For UTGST
			get.tax.rates.and.tax.amounts(tctax.indt.l.igst, igst.rate, igst.amnt)	|* For IGST

			sgst.rate = sgst.rate + utgst.rate
			sgst.amnt = sgst.amnt + utgst.amnt
			
			tax.amnt = cgst.amnt + sgst.amnt + igst.amnt
			tfacr200.amth(1) = abs(tfacr200.amth(1)) - abs(tax.amnt)	|* For deducting tax amount from tfacr200.amth which contains 
											|* aggregated value but printing line should contain base value only
			if tfgld.dll5018.document.finalized(	tfgld001.ncmp, 		
								tfacr200.ttyp,
								tfacr200.ninv) then
				print.detail()
			endif	
		endselect
	endselect
		
	switch.to.company(curr.comp)	
}




function print.detail()
{
	line = concat$("	",
		sprintf$("%D(%02d/%02m/%04Y)", tfacr200.docd),		|1			
		sprintf$("%s", (tfacr200.ttyp & " " & str$(tfacr200.ninv))),|2
		sprintf$("%s", bill.to.nama),				|3
		sprintf$("%s", gstn.b.no),				|4
		sprintf$("%s", place.of.supply),			|5
		sprintf$("%s", goods.or.services),			|6
		sprintf$("%s", ""),					|7
		sprintf$("%s", ""),					|8	
		sprintf$("%f", "0.00"),				|9
		sprintf$("%s", ""),					|10
		sprintf$("%f", "0.00"),				|11
		sprintf$("%f", "0.00"),				|12
		sprintf$("%f", tfacr200.amth(1)),			|13
		sprintf$("%f", igst.rate),				|14
		sprintf$("%f", igst.amnt),				|15
		sprintf$("%f", cgst.rate),				|16
		sprintf$("%f", cgst.amnt),				|17
		sprintf$("%f", sgst.rate),				|18
		sprintf$("%f", sgst.amnt),				|19
		sprintf$("%f", cess.rate),				|20
		sprintf$("%f", cess.amnt),				|21
		sprintf$("%s", "N"),					|22
		sprintf$("%s", "N"),					|23
		sprintf$("%s", ""),					|24
		sprintf$("%s", ""),					|25
		sprintf$("%s", gstn.c.no),				|26
		sprintf$("%s", bill.to.address),			|27
		sprintf$("%s", bill.to.city),				|28
		sprintf$("%s", bill.to.code),				|29
		sprintf$(""))						|Last

		line = strip$(shiftl$(line))
		
		seq.puts(line, stat.fp)
}


function get.GSTIN.details
		(
			domain	tcsrnb		i.reg.flag,	|* Flag(if BP GSTIN Seq. or Own GSTIN Seq.)
			domain	tctax.seqn.l	i.seqn.l,	|* Tax Sequence No.
		ref	domain	tctax.txnb.l	o.txnb.l,	|* Registration No.	
		ref	domain	tcnama		o.bp.nama,
		ref	domain	tcdsca		o.ccty.dsca,
		ref	domain	tcpstc		o.pstc,		|* Zip (Postal) Code
		ref	domain	tcmcs.str2	o.scod,		|* Statutory State Code
		ref	domain	tcdsca		o.cste.dsca,	|* State
		ref	domain	tcdsca		o.city.dsca,	|* City
		ref	domain	tcmcs.str215m	o.addr.desc	|* Address
		)
{	
	domain	tccom.cadr	temp.cadr
	
	o.addr.desc = ""
	
	if i.reg.flag = 0 then
		select	tctax400.cadr.l:temp.cadr,
			tctax400.fovn:o.txnb.l
		from	tctax400
		where	tctax400._index3 = {:i.seqn.l}
		selectdo
		selectempty
			temp.cadr = ""
			o.txnb.l = ""
		endselect	
	else
		tctax.dll9140.get.own.reg.number.based.on.seq(i.seqn.l, o.txnb.l)
		tcisgdll0100.get.financial.company.address.CDF.from.seqn(i.seqn.l, temp.cadr)
	endif
		
	select	tccom130.nama:o.bp.nama,
		tccom130.ln01,
		tccom130.ln02,
		tccom130.ln03,
		tccom130.ln04,
		tccom130.ln05,
		tccom130.ln06,
		tccom130.ccty,
		tccom130.cste,
		tccom130.ccit,
		tccom130.pstc:o.pstc,
		tcmcs010.dsca:o.ccty.dsca,
		tcmcs143.dsca:o.cste.dsca,
		tccom139.dsca:o.city.dsca
	from	tccom130, tcmcs010, tcmcs143, tccom139
	where	tccom130._index1 = {:temp.cadr}
	and	tccom130.ccty refers to tcmcs010 UNREF CLEAR
	and	tccom130.cmba refers to tcmcs143 UNREF CLEAR
	and	tccom130.cmbb refers to tccom139 UNREF CLEAR
	selectdo
		o.addr.desc = 	trim$(tccom130.ln01) & " " &
				trim$(tccom130.ln02) & " " &
				trim$(tccom130.ln03) & " " &
				trim$(tccom130.ln04) & " " &
				trim$(tccom130.ln05) & " " &
				trim$(tccom130.ln06)
		
		tcisgdll0100.get.statutory.state.code(	tccom130.ccty, 
							tccom130.cste, 
							o.scod)	|* Statutory State Code		
				
	selectempty
		o.bp.nama = ""
		o.pstc = ""
		o.ccty.dsca = ""
		o.cste.dsca = ""
		o.city.dsca = ""
		o.scod = ""
		o.addr.desc = ""
	endselect
}

function get.tax.rates.and.tax.amounts
			(
				domain	tctax.indt.l	i.indt.l,	|* Indirect Tax Type
			ref	domain	tcpvat		o.pvat,		|* Tax Rate
			ref	domain	tfgld.amnt	o.amnt		|* Tax Amount
			)
{
	|* Tax Calculation : As Tax Code is Multiple Tax Code
	|* instead of Aggregate Tax Code, so DLL for tax
	|* Calculation can't be used
	
	select	tcmcs035.sern
	from	tcmcs035
	where	tcmcs035._index1 = {:tfacr200.vatc, :tfacr200.cvat}
	and	tcmcs035.indt.l = :i.indt.l
	selectdo
		select	tcmcs033.pvat:o.pvat,
			tcmcs033.edat
		from	tcmcs033
		where	tcmcs033._index1 = {
					:tfacr200.vatc,
					:tfacr200.cvat,
					:tcmcs035.sern
					}
		order by tcmcs033.edat desc
		as set with 1 rows
		selectdo
		selectempty
			o.pvat = 0.00
		endselect
		
		select	tfgld070.vaar
		from	tfgld070
		where	tfgld070._index1 = {
					:tfacr200.vatc,
					:tfacr200.cvat,
					:tcmcs035.sern
					}
		selectdo
		selectempty
			tfgld070.vaar = ""
			o.amnt = 0.00
		endselect
		
		if not isspace(tfgld070.vaar) then
			o.amnt = get.tax.amount(	tfacr200.ttyp, 
							tfacr200.ninv, 
							tfacr200.line, 
							tfgld070.vaar)
		endif
	selectempty
		o.pvat = 0.00	
		o.amnt = 0.00
	endselect	
}


function domain tfgld.amnt get.tax.amount
		(
			domain	tfgld.ttyp	i.ttyp,
			domain	tfgld.docn	i.docn,
			domain	tfgld.lino	i.line,
			domain	tfgld.leac	i.leac
		)
{
	domain	tfgld.amnt	debit.amnt, credit.amnt, temp.amnt
	
	debit.amnt = 0.00
	credit.amnt = 0.00
	temp.amnt = 0.00
	
	select	tfgld106.dbcr, tfgld106.amth
	from	tfgld106
	where	tfgld106._index3 = {
				:i.leac,
				:i.ttyp,
				:i.docn,
				:i.line
				}
	selectdo
		if tfgld106.dbcr = tfgld.dbcr.debit then
			debit.amnt = debit.amnt + tfgld106.amth(1)
		else
			credit.amnt = credit.amnt + tfgld106.amth(1)
		endif
	endselect
	
	temp.amnt = debit.amnt - credit.amnt	
	
	return(abs(temp.amnt))
}
