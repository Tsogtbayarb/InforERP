|******************************************************************************
|* tdisg045  0  VRC B61U a7 isg 
|* Project PO wise child item
|* baan
|* 15-04-10 [10:49]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
| ******************** Includes
	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

|*************** Table declaration ******************
		table	ttdisg045
		table	ttdmsl400
		table   tdmisg001
		table   ttpmsl000
		table   ttdpur406
		table   ttdpur401
		
	extern domain dmdoc.typeid  i.type	
	extern domain tppdm.cspa    cspa.var
	extern domain tcitem        item.var
|****************************** object hooks **********************************

function extern boolean method.is.allowed(
			long		i.method)
{
	on case i.method
		case DAL_NEW:
		if not new.method.is.allowed() then
			dal.set.error.message("@Cannot insert a record.")	
			return(false)
		endif
		break
	case DAL_UPDATE:
		if not update.method.is.allowed() then
			dal.set.error.message("@Cannot modify this record.")
			return(false)
		endif
		break
	case DAL_DESTROY:
		if not destroy.method.is.allowed() then
			dal.set.error.message("@Cannot delete this record.")
			return(false)
		endif
		break
	endcase

	return(true)
}

function extern long before.open.object.set()
{
	read.parameters()
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	on case type
		case DAL_NEW:
			break
		case DAL_UPDATE:
			break
	ENDCASE
	return(0)
}

function extern long set.object.defaults()
{
	tdisg045.cspa = cspa.var
	tdisg045.loti = item.var
	return(0)
}

function extern long before.new.object()
{	
	return(0)
}

function extern long before.get.object()
{
	return(0)
}

function extern long after.get.object()
{

	select dmisg001.type
	from    dmisg001
	where   dmisg001._index1 = {:tdisg045.docn,:tdisg045.revi}
	selectdo
		if strip$(shiftl$(dmisg001.type)) <> i.type then	|* IF DATADOC NOT MATCH & RECEIPT  FOUND THEN
			skip.io("",e)							|* skip 
		endif
		
		if   chek.receipt.exist() then
			skip.io("",e)	
		endif	
			
		if strip$(shiftl$(dmisg001.type)) = i.type then	|* IF DATADOC MATCH & RECEIPT NOT FOUND THEN
			if  not chek.receipt.exist() then
			endif						|* not skip 
		endif
	endselect
	cspa.var = tdisg045.cspa
	item.var = tdisg045.loti
	read.project(tdisg045.orno,tdisg045.pono)	
	return(0)
}

function long read.parameters()
{
	select tpmsl000.type
	from   tpmsl000
	where  tpmsl000._index1 = {0}
	as set with 1 rows
	selectdo
		i.type = tpmsl000.type
		i.type = strip$(shiftl$(i.type))
	endselect
| 	get.element.item()get.element.item
	return(0)
}

|**** Dependencies Section ****************************************************

function void define.field.dependencies()
{
	|* Initialize field relations.
	dal.init.field.dependencies()
	
	dal.field.depends.on("tdisg045.item", HOOK_IS_DERIVED,
				"tdisg045.orno")
	dal.field.depends.on("tdisg045.docn", HOOK_IS_DERIVED,
				"tdisg045.orno")
	
	dal.field.depends.on("tdisg045.ddsc", HOOK_IS_DERIVED,
				"tdisg045.orno")
	
	dal.field.depends.on("tdisg045.dsca", HOOK_IS_DERIVED,
				"tdisg045.orno")	
				
	dal.field.depends.on("tdisg045.revi", HOOK_IS_DERIVED,
				"tdisg045.orno")
	dal.field.depends.on("tdisg045.loti", HOOK_IS_DERIVED,
				"tdisg045.orno")
	dal.field.depends.on("tdisg045.cspa",HOOK_UPDATE+HOOK_IS_DERIVED,
				"tdisg045.orno")
			
	|* Add direct dependent fields.
	|* Please keep the fields in alphabetical order.

	dal.finalize.field.dependencies()
}

function boolean new.method.is.allowed()
{
	return(true)
}

function boolean update.method.is.allowed()
{
	return(true)
}
function boolean destroy.method.is.allowed()
{
			long		delete.allowed

	with.old.object.values.do(	deleting_allowed,
					delete.allowed)	|* ref
	if not delete.allowed then
		return(false)
	endif

	return(true)
}

function void deleting_allowed(
	ref		long		o.delete.allowed)
{
	o.delete.allowed = true
}

|**********************  Drawing Description ****************
function extern boolean tdisg045.item.is.derived(long mode)
{
	on case mode
		case DAL_NEW:
			return(false)
			break
		case DAL_UPDATE:
			return(true)
			break
	ENDCASE
return (true)
}
function extern boolean tdisg045.ddsc.is.derived(long mode)
{
	on case mode
		case DAL_NEW:
			return(false)
			break
		case DAL_UPDATE:
			return(true)
			break
	ENDCASE
return (true)
}

|********************** Document Number *******************
function extern boolean tdisg045.docn.is.derived(long mode)
{
	on case mode
		case DAL_NEW:
			return(false)
			break
		case DAL_UPDATE:
			return(true)
			break
	ENDCASE
return (true)
}

|********************** Item Description *******************
function extern boolean tdisg045.dsca.is.derived(long mode)
{
	return (false)
}

|********************** Revision *******************
function extern boolean tdisg045.revi.is.derived(long mode)
{
	on case mode
		case DAL_NEW:
			return(false)
			break
		case DAL_UPDATE:
			return(true)
			break
	ENDCASE
return (true)
}

|****************************************************
function extern boolean tdisg045.loti.is.derived(long mode)
{	
	return (true)	
}

function extern boolean tdisg045.cspa.is.derived(long mode)
{
	return (true)		
}

| function extern tdisg045.cspa.update()
| {

| 	if not isspace(tdisg045.orno) then
| 		select tdisg045.
| 	endif	
| }
|********************* Internal Function *************



function read.project(domain tcorno  in.orno,domain tcpono in.pono)

{
	select tdisg045.cprj
	from   tdisg045
	where  tdisg045._index1 = {:in.orno,:in.pono}
	selectdo
	endselect

}


function boolean chek.receipt.exist()
{
	select tdpur406.rcno,tdpur406.rseq
	from   tdpur406
	where  tdpur406._index1 = {:tdisg045.orno,:tdisg045.pono}
	selectdo
		return (true)
	endselect
return (false)
}

