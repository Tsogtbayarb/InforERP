|******************************************************************************
|* tfisg019  0  VRC B61U a7 isg 
|* DAL for tfisg019
|* 10344
|* 20-02-04 [10:36]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************

	table	ttfisg019
	table	ttfisg020
	table	ttpisg087
	table	ttpisg089
	table	ttcemm030
	table	ttfisg014
	table	ttfisg015
	
#include <bic_dal2>

function extern long before.open.object.set()
{
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	return(0)
}

function define.field.dependencies()
{
	dal.field.depends.on("tfisg019.amti", HOOK_IS_DERIVED + HOOK_UPDATE, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn", "tfisg019.hcod")
	dal.field.depends.on("tfisg019.amto", HOOK_IS_DERIVED + HOOK_UPDATE, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn", "tfisg019.hcod")
	dal.field.depends.on("tfisg019.oami", HOOK_IS_DERIVED + HOOK_UPDATE, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn", "tfisg019.amti")
	dal.field.depends.on("tfisg019.oamo", HOOK_IS_DERIVED + HOOK_UPDATE, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn", "tfisg019.amto")
	dal.field.depends.on("tfisg019.cmti", HOOK_IS_DERIVED, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn")
	dal.field.depends.on("tfisg019.cmto", HOOK_IS_DERIVED, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn")
	dal.field.depends.on("tfisg019.rmks", HOOK_IS_DERIVED, "tfisg019.year", "tfisg019.mnth", "tfisg019.eunt", "tfisg019.rvsn")
	dal.field.depends.on("tfisg019.namt", HOOK_UPDATE, "tfisg019.amti", "tfisg019.amto")
	dal.field.depends.on("tfisg019.cnmt", HOOK_UPDATE, "tfisg019.cmti", "tfisg019.cmto")
	dal.field.depends.on("tfisg019.oamn", HOOK_UPDATE, "tfisg019.oami", "tfisg019.oamo")							
}

function extern boolean tfisg019.amti.is.derived(long mode)
{
	
| 	if readonly_budget() then
| 		return(true)
| 	else
| 		if check_readonly_budgeted_outlook_amount() then
| 			return(true)
| 		else
| 			return(false)
| 		endif
| 	endif

	if readonly_approve_sendfoapprove() then
		return(true)
	endif
	
| 	if mode = DAL_UPDATE then
		if tfisg019.hcod = "H0000001" or tfisg019.hcod = "H0000003" then
			return(true)
		endif
| 	endif
	return(false)
}

function extern boolean tfisg019.amto.is.derived(long mode)
{
| 	if readonly_budget() then
| 		return(true)
| 	else
| 		if check_readonly_budgeted_outlook_amount() then
| 			return(true)
| 		else
| 			return(false)
| 		endif
| 	endif

	if readonly_approve_sendfoapprove() then
		return(true)
	endif
	
| 	if mode = DAL_UPDATE then
		if tfisg019.hcod = "H0000001" or tfisg019.hcod = "H0000003" then
			return(true)
		endif
| 	endif
	return(false)
}

function extern boolean tfisg019.oami.is.derived()
{
	if readonly_approve_sendfoapprove() then
		return(true)
	endif
| 	if check_readonly_budgeted_outlook_amount() then
| 		return(true)
| 	else
		return(false)
| 	endif
}

function extern boolean tfisg019.oamo.is.derived()
{
	if readonly_approve_sendfoapprove() then
		return(true)
	endif
	
| 	if check_readonly_budgeted_outlook_amount() then
| 		return(true)
| 	else
		return(false)
| 	endif
}

function extern boolean tfisg019.cmti.is.derived()
{
	if readonly_approve_sendfoapprove() then
		return(true)
	endif
	
	if readonly_actual() then
		return(false)
	endif
	return(true)
}

function extern boolean tfisg019.cmto.is.derived()
{
	if readonly_approve_sendfoapprove() then
		return(true)
	endif
	
	if readonly_actual() then
		return(false)
	endif
	return(true)
}

function extern boolean tfisg019.amti.is.valid()
{
	if tfisg019.amti > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg019.amto.is.valid()
{
	if tfisg019.amto > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg019.oami.is.valid()
{
	if tfisg019.oami > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg019.oamo.is.valid()
{
	if tfisg019.oamo > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern	boolean tfisg019.hcod.is.valid()
{
	select	tfisg011.hcod
	from	tfisg011
	where	tfisg011._index1 = {:tfisg019.hcod}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern boolean tfisg019.rmks.is.derived()
{
	if readonly_approve_sendfoapprove() then
		return(true)
	endif
	return(false)
}

function extern void tfisg019.amti.update(long mode)
{
	if mode = DAL_NEW then
		if tfisg019.hcod = "H0000001" then
			tfisg019.amti = update.budget.inflow(tfisg019.year, tfisg019.mnth, tfisg019.eunt)
		else
			tfisg019.amti = 0
		endif
	endif
}

function extern void tfisg019.amto.update(long mode)
{
	if mode = DAL_NEW then
		if tfisg019.hcod = "H0000003" then 
			tfisg019.amto = update.budget.outflow(tfisg019.year, tfisg019.mnth, tfisg019.eunt)
		else
			tfisg019.amto = 0
		endif
	endif
}

function extern void tfisg019.cmti.update(long mode)
{
	if mode = DAL_NEW then
		if tfisg019.hcod = "H0000001" then
			tfisg019.cmti = update.actual.inflow(tfisg019.year, tfisg019.mnth, tfisg019.eunt)
		else
			tfisg019.cmti = 0
		endif
	endif
}

function extern void tfisg019.cmto.update(long mode)
{
	if mode = DAL_NEW then
		if tfisg019.hcod = "H0000003" then 
			tfisg019.cmto = update.actual.outflow(tfisg019.year, tfisg019.mnth, tfisg019.eunt)
		else
			tfisg019.cmto = 0
		endif
	endif
}

function extern void tfisg019.oami.update(long mode)
{
	if mode = DAL_NEW then
		tfisg019.oami = 0
	endif
}

function extern void tfisg019.oamo.update(long mode)
{
	if mode = DAL_NEW then
		tfisg019.oamo = 0
	endif
}

function extern void tfisg019.namt.update()
{
	tfisg019.namt = tfisg019.amti - tfisg019.amto
}
									
function extern void tfisg019.oamn.update()
{
	tfisg019.oamn = tfisg019.oami - tfisg019.oamo
}
								
function extern void tfisg019.cnmt.update()
{
	tfisg019.cnmt = tfisg019.cmti - tfisg019.cmto
}
						
function boolean check_readonly_budgeted_outlook_amount()
{
	string		date.result(80)
	long		mnth.num
	domain	tfgld.year	year
	domain	tpisg.month	month
	
	date.result = sprintf$("%D(%02d/%02m/%04Y)", date.num())
	year = lval(trim$(date.result(7;4)))
	mnth.num = lval(trim$(date.result(4;2)))
	month = ltoe(mnth.num)
	
	select	tfisg020.rtyp,
		tfisg020.stat
	from	tfisg020
	where	tfisg020._index1 = {:tfisg019.year, :tfisg019.mnth, :tfisg019.eunt, :tfisg019.rvsn}
	as set with 1 rows
	selectdo
		if tfisg020.rtyp = tpisg.rvsntype.complete and (tfisg020.stat = tpisg.rvsnstat.free or tfisg020.stat = tpisg.rvsnstat.reject) then
			return(false)
		else
			if (tfisg020.rtyp = tpisg.rvsntype.partial or tfisg020.rtyp = tpisg.rvsntype.launch) and (tfisg020.stat = tpisg.rvsnstat.free or tfisg020.stat = tpisg.rvsnstat.reject) then
				if year < tfisg019.year then
					return(false)
				else
					if year = tfisg019.year then
						if mnth.num > etol(tfisg019.mnth) then
							return(true)
						else
							return(false)
						endif
					else
						return(true)
					endif
				endif
			else
				return(true)
			endif
		endif
	endselect
	return(false)
}

function boolean readonly_actual()
{
	select	tfisg020.rtyp
	from	tfisg020
	where	tfisg020._index1 = {:tfisg019.year, :tfisg019.mnth, :tfisg019.eunt, :tfisg019.rvsn}
	and	tfisg020.rtyp = tpisg.rvsntype.launch
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function boolean readonly_budget()
{
	select	tfisg020.rtyp
	from	tfisg020
	where	tfisg020._index1 = {:tfisg019.year, :tfisg019.mnth, :tfisg019.eunt, :tfisg019.rvsn}
	and	tfisg020.rtyp = tpisg.rvsntype.partial
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern domain	tcamnt	update.budget.inflow(	domain	tfgld.year	year,
							domain	tpisg.month	mnth,
							domain	tcemm.grid	eunt)
{
	domain	tcamnt	bios.inflow
	bios.inflow = 0
	
	select	tpisg087.ccod
	from	tpisg087
	where	tpisg087.lddn = {:eunt}
	selectdo
		select	tpisg089.amti
		from	tpisg089
		where	tpisg089._index1 = {:tpisg087.ccod}
		and	tpisg089.year = :year
		and	tpisg089.mnth = :mnth
		selectdo
			bios.inflow = bios.inflow + tpisg089.amti
		endselect
	endselect
	
	return(bios.inflow)
}

function extern domain	tcamnt	update.budget.outflow(	domain	tfgld.year	year,
							domain	tpisg.month	mnth,
							domain	tcemm.grid	eunt)
{
	domain	tcamnt	bios.outflow
	bios.outflow = 0
	
	select	tpisg087.ccod
	from	tpisg087
	where	tpisg087.lddn = {:eunt}
	selectdo
		select	tpisg089.amto
		from	tpisg089
		where	tpisg089._index1 = {:tpisg087.ccod}
		and	tpisg089.year = :year
		and	tpisg089.mnth = :mnth
		selectdo
			bios.outflow = bios.outflow + tpisg089.amto
		endselect
	endselect
	
	return(bios.outflow)
}

function boolean readonly_approve_sendfoapprove()
{
	select	tfisg020.stat
	from	tfisg020
	where	tfisg020._index1 = {:tfisg019.year, :tfisg019.mnth, :tfisg019.eunt, :tfisg019.rvsn}
	and	(tfisg020.stat = tpisg.rvsnstat.sendforapp or tfisg020.stat = tpisg.rvsnstat.approved)
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function domain	tcamnt	update.actual.inflow(	domain	tfgld.year	year,
						domain	tpisg.month	mnth,
						domain	tcemm.grid	eunt)
{
	domain	tcamnt	monthly.inflow, opening.inflow, aios.inflow
	monthly.inflow = 0
	opening.inflow = 0
	aios.inflow = 0
	
	select	tpisg087.ccod
	from	tpisg087
	where	tpisg087.lddn = {:eunt}
	selectdo
		select	tfisg014.iamt
		from	tfisg014
		where	tfisg014._index1 = {:year, :mnth, :tpisg087.ccod}
		as set with 1 rows
		selectdo
			monthly.inflow = monthly.inflow + tfisg014.iamt
		endselect
		
		select	tfisg015.iamt
		from	tfisg015
		where	tfisg015._index1 = {:tpisg087.ccod}
		as set with 1 rows
		selectdo
			opening.inflow = opening.inflow + tfisg015.iamt
		endselect
	endselect
	aios.inflow = monthly.inflow + opening.inflow
	
	return(aios.inflow)
}

function domain	tcamnt	update.actual.outflow(	domain	tfgld.year	year,
						domain	tpisg.month	mnth,
						domain	tcemm.grid	eunt)
{
	domain	tcamnt	monthly.outflow, opening.outflow, aios.outflow
	monthly.outflow = 0
	opening.outflow = 0
	aios.outflow = 0
	
	select	tcemm030.fcmp
	from	tcemm030
	where	tcemm030._index1 = {:eunt}
	as set with 1 rows
	selectdo
		select	tfisg014.oamt
		from	tfisg014
		where	tfisg014._index1 = {:year, :mnth, :tpisg087.ccod}
		as set with 1 rows
		selectdo
			monthly.outflow = monthly.outflow + tfisg014.oamt
		endselect
		
		select	tfisg015.oamt
		from	tfisg015
		where	tfisg015._index1 = {:tpisg087.ccod}
		as set with 1 rows
		selectdo
			opening.outflow = opening.outflow + tfisg015.oamt
		endselect
	endselect
	aios.outflow = monthly.outflow + opening.outflow
	return(aios.outflow)
}
