|******************************************************************************
|* tdisg045  0  VRC B61U a7 isg 
|* DAL for tdisg045
|* Ravi kumar
|* 20-10-22 [10:10]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
                  
	table	ttdisg046
	table	ttdisg832
	table	ttdisg045
	table	ttdisg831
	
	extern	domain	tcorno	invn.edrn
#include <bic_dal2>


function extern long before.open.object.set()
{
	define.dependency()
	return(0)
}

function extern long before.save.object(long type)
{
	on case type
	case DAL_NEW :
		if isspace(tdisg046.rcno) then
			dal.set.error.message("@ Reciept cannot be blank")
			return(DALHOOKERROR)
		endif
	case DAL_UPDATE :
		if tdisg046.nins = 0 then
			dal.set.error.message("@Installment should be Mandatory")
			return(DALHOOKERROR)
		endif
	endcase
	
	return(0)
}

function extern boolean method.is.allowed(long type)
{
	select	tdisg045.stat
	from	tdisg045
	where	tdisg045._index1 = {:tdisg046.rqno}
	as set with 1 rows
	selectdo
	endselect
	
	on case type
	case DAL_NEW :
	case DAL_UPDATE :
	case DAL_DESTROY :
		if tdisg045.stat = tdisg.stat.created then
			return(true)
		else
			return(false)
		endif
		break
	endcase
	
	return(true)
}


function define.dependency()
{
	dal.field.depends.on("tdisg046.rcln", HOOK_UPDATE, "tdisg046.rqno", "tdisg046.rcno")
	dal.field.depends.on("tdisg046.item", HOOK_UPDATE, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln")
	dal.field.depends.on("tdisg046.hsnc", HOOK_UPDATE, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln")
	dal.field.depends.on("tdisg046.dbks", HOOK_UPDATE, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln")
	dal.field.depends.on("tdisg046.qnty", HOOK_UPDATE + HOOK_IS_VALID, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln")
	dal.field.depends.on("tdisg046.cuni", HOOK_UPDATE, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln")
	dal.field.depends.on("tdisg046.amnt", HOOK_IS_VALID, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln",
						HOOK_UPDATE, "tdisg046.nins", "tdisg046.ninc")
	dal.field.depends.on("tdisg046.cvat", HOOK_UPDATE, "tdisg046.rqno", "tdisg046.rcno", "tdisg046.rcln")
	dal.field.depends.on("tdisg046.ninc", HOOK_UPDATE, "tdisg046.nins")
}

function extern boolean tdisg046.rcno.is.valid(long mode)
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno}
	as set with 1 rows
	selectdo
		return(true)
	selectempty
		return(false)
	endselect
	return(false)
}

function extern tdisg046.rcln.update()
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno,
		tdisg832.rcln
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno}
	as set with 1 rows
	selectdo
		tdisg046.rcln = tdisg832.rcln
	endselect
}


function extern tdisg046.item.update()
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno,
		tdisg832.rcln,
		tdisg832.gdsc
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
	as set with 1 rows
	selectdo
		tdisg046.item = tdisg832.gdsc
	endselect
}

function extern	tdisg046.hsnc.update()
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno,
		tdisg832.rcln,
		tdisg832.code
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
	as set with 1 rows
	selectdo
		tdisg046.hsnc = tdisg832.code
	endselect
}

function extern	tdisg046.dbks.update()
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno,
		tdisg832.rcln,
		tdisg832.tfcd
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
	as set with 1 rows
	selectdo
		tdisg046.dbks = tdisg832.tfcd
	endselect
}

function extern	tdisg046.qnty.update()
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno,
		tdisg832.rcln,
		tdisg832.pqty
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
	as set with 1 rows
	selectdo
		tdisg046.qnty = tdisg832.pqty
	endselect
}

function extern boolean tdisg046.qnty.is.valid(long mode)
{
	domain	tcqiv1	tot.qnty.line
	tot.qnty.line = 0
	
	select	tdisg045.note,
		tdisg045.invn,
		tdisg045.rqno
	from	tdisg045
	where	tdisg045._index1 = {:tdisg046.rqno}
	as set with 1 rows
	selectdo
		select	tdisg831.edrn
		from	tdisg831
		where	tdisg831._index2 = {:tdisg045.invn}
		selectdo
			select	tdisg832.pqty
			from	tdisg832
			where	tdisg832._index1 = {:tdisg831.edrn, :tdisg046.rcno, :tdisg046.rcln}
			selectdo
				tot.qnty.line = tot.qnty.line + tdisg832.pqty
			endselect
		endselect
	endselect
	
	if tdisg045.note = tdisg.notes.credit then
		if tot.qnty.line < tdisg046.qnty then
			dal.set.error.message("@ Quantity is not more than preceding Custom Invoice Quantity")
			return(DALHOOKERROR)
		endif
	else
		return(true)
	endif
	
	return(true)
}

function extern	tdisg046.cuni.update()
{
	invn.edrn = get.edrn()
	select	tdisg832.rcno,
		tdisg832.rcln,
		tdisg832.pcun
	from	tdisg832
	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
	as set with 1 rows
	selectdo
		tdisg046.cuni = tdisg832.pcun
	endselect
}

function extern	tdisg046.amnt.update()
{
	domain	tccprj		o.cprj		|Project
	domain	tccom.bpid	o.ofbp
	domain	tppdm.cspa	o.tppin020.cspa
	domain	tppdm.aalc	o.insa1
	o.insa1 = 0 
	
| 	invn.edrn = get.edrn()
| 	select	tdisg832.rcno,
| 		tdisg832.rcln,
| 		tdisg832.bivl
| 	from	tdisg832
| 	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
| 	as set with 1 rows
| 	selectdo
| 		tdisg046.amnt = tdisg832.bivl
| 	endselect
	get.CRDB.info(tdisg046.rqno, o.cprj, o.ofbp)
	get.linked.element.from.installment(o.cprj, o.ofbp, tdisg046.nins, o.tppin020.cspa, o.insa1)
	tdisg046.amnt = abs(o.insa1)
}

function extern boolean tdisg046.amnt.is.valid(long mode)
{
	domain	tcamnt	tot.amnt.line
	tot.amnt.line = 0
	
	select	tdisg045.note,
		tdisg045.invn,
		tdisg045.rqno
	from	tdisg045
	where	tdisg045._index1 = {:tdisg046.rqno}
	as set with 1 rows
	selectdo
		select	tdisg831.edrn
		from	tdisg831
		where	tdisg831._index2 = {:tdisg045.invn}
		selectdo
			select	tdisg832.bivl
			from	tdisg832
			where	tdisg832._index1 = {:tdisg831.edrn, :tdisg046.rcno, :tdisg046.rcln}
			selectdo
				tot.amnt.line = tot.amnt.line + tdisg832.bivl
			endselect
		endselect
	endselect
	
	if tdisg045.note = tdisg.notes.credit then
		if tot.amnt.line < tdisg046.amnt then
			dal.set.error.message("@ Amount is not more than preceding Custom Invoice Amount")
			return(DALHOOKERROR)
		endif
	else
		return(true)
	endif
	
	return(true)
}

function extern	tdisg046.cvat.update()
{
	invn.edrn = get.edrn()
| 	select	tdisg832.rcno,								|GH489CR000.a.s
| 		tdisg832.rcln,
| 		tdisg832.cvat
| 	from	tdisg832
| 	where	tdisg832._index1 = {:invn.edrn, :tdisg046.rcno, :tdisg046.rcln}
| 	as set with 1 rows
| 	selectdo
| 		tdisg046.cvat = tdisg832.cvat
| 	endselect
	
	select	tdisg045.cvat
	from	tdisg045
	where	tdisg045._index1 = {:tdisg046.rqno}
	as set with 1 rows
	selectdo
		tdisg046.cvat = tdisg045.cvat
	endselect								|GH489CR000.a.e
}

function domain	tcorno	get.edrn()
{
	select	tdisg045.rqno,
		tdisg045.invn
	from	tdisg045
	where	tdisg045._index1 = {:tdisg046.rqno}
	as set with 1 rows
	selectdo
	endselect
	
	select	tdisg831.edrn
	from	tdisg831
	where	tdisg831._index2 = {:tdisg045.invn}
	as set with 1 rows
	selectdo
	selectempty
		tdisg831.edrn = ""
	endselect
	
	return(tdisg831.edrn)
}

function	extern boolean	tdisg046.nins.is.valid()
{
	domain	tccprj		o.cprj		|Project
	domain	tccom.bpid	o.ofbp
	domain	tccprj		o.tppin020.cprj
	domain	tppdm.cspa	o.cspa,o.tppin020.cspa
	domain	tcorno		o.edrn, bind.rcno, bind.edrn, bind.rqno
	domain	tppdm.nins	bind.nins
	domain	tcmcs.long	bind.rcln
	domain	tdisg.stat	o.stat
	domain	tdisg.notes	o.note
	domain	tppdm.aalc	o.insa1, o.insa2
	
	o.insa1 = 0
	o.insa2 = 0
	
	o.stat = Get.CRDB.status(tdisg046.rqno)
	o.note = Get.CRDB.note.type(tdisg046.rqno)
	
	get.CRDB.info(tdisg046.rqno, o.cprj, o.ofbp)

	get.linked.element.from.purchase.receipt(tdisg046.rcno, tdisg046.rcln, o.cspa)
	get.linked.element.from.installment(o.cprj, o.ofbp, tdisg046.nins, o.tppin020.cspa, o.insa1)
	
	if o.cspa <> o.tppin020.cspa then
		dal.set.error.message("@ Element not matched with Receipt Line Element")
		return(DALHOOKERROR)
	endif


	select 	tppin020.cprj:o.tppin020.cprj
	from	tppin020
	where	tppin020._index1 = {:o.cprj, :o.ofbp, :tdisg046.nins}
	and	tppin020.cdf_nins = 0
	as set with 1 rows
	selectdo
		dal.set.error.message("@ Only Linked Billing Schedule is Allowed")
		return(DALHOOKERROR)
	endselect
	
	if o.stat = tdisg.stat.created then
		select	tdisg831.edrn:bind.edrn
		from	tdisg831
		where	tdisg831._index4 = {:o.cprj, :o.ofbp}
		selectdo
			if bind.edrn <> tdisg832.edrn then
				select	tdisg832.nins:bind.nins
				from	tdisg832
				where	tdisg832._index1 = {:bind.edrn}
				and	tdisg832.nins = :tdisg046.nins
				as set with 1 rows
				selectdo
					dal.set.error.message("@Installment is Already Linked With Billing Advice %s", bind.edrn)
					return(false)
				endselect
			else
				select	tdisg832.nins:bind.nins,
					tdisg832.rcno:bind.rcno,
					tdisg832.rcln:bind.rcln
				from	tdisg832
				where	tdisg832._index1 = {:bind.edrn}
				and	tdisg832.nins <> 0
				and	tdisg832.nins = :tdisg046.nins
				selectdo
					if bind.rcno <> tdisg832.rcno or bind.rcln <> tdisg832.rcln then
						dal.set.error.message("@Installment is Already Linked With Billing Advice %s", bind.edrn)
						return(false)
					endif
				endselect
			endif
		endselect
		
		select	tdisg046.rqno:bind.rqno
		from	tdisg046
		where	tdisg046._index1 <> {:tdisg046.rqno}
		and	tdisg046.nins = :tdisg046.nins
		selectdo
			dal.set.error.message("@Installment is Already Linked With Credit/Debit Request No. %s", bind.rqno)
			return(false)
		endselect
	endif	
	
	get.linked.element.from.installment(o.cprj, o.ofbp, tdisg046.nins, o.tppin020.cspa, o.insa2)
	
	if o.note = tdisg.notes.credit then
		if o.insa2 > 0 then
			dal.set.error.message("@Installment should be Negative")
			return(false)
		endif
	else
		if o.note = tdisg.notes.debit then
			if o.insa2 < 0 then
				dal.set.error.message("@Installment should be Positive")
				return(false)
			endif
		endif
	endif
			
	return(true)
}

|*** Billing Schedule
function extern tdisg046.ninc.update()
{
	domain	tppdm.nins	export.ninc
	
	domain	tccprj		o.cprj		|Project
	domain	tccom.bpid	o.ofbp
	
	get.CRDB.info(tdisg046.rqno, o.cprj, o.ofbp)

	select 	tppin020.cdf_nins:export.ninc
	from	tppin020
	where	tppin020._index1 = {:o.cprj, :o.ofbp, :tdisg046.nins}
	as set with 1 rows
	selectdo
	selectempty
		export.ninc = 0
	endselect
	
	tdisg046.ninc = export.ninc
	
}



function extern domain tdisg.stat Get.CRDB.status
					(
						domain	tcorno		i.rqno	
					)
{
	select 	tdisg045.stat
	from	tdisg045
	where	tdisg045._index1 = {:i.rqno}
	as set with 1 rows
	selectdo
	endselect
	
	return(tdisg045.stat)
}

function extern get.CRDB.info
				(
					domain	tcorno		i.rqno,		
				ref 	domain	tccprj		o.cprj,		|Project
				ref 	domain	tccom.bpid	o.ofbp		|Business Partner	
				)
{
	select	tdisg045.invn
	from	tdisg045
	where	tdisg045._index1 = {:i.rqno}
	as set with 1 rows
	selectdo
		select 	tdisg831.cprj:o.cprj,
			tdisg831.ofbp:o.ofbp
		from	tdisg831
		where	tdisg831._index2 = {:tdisg045.invn}
		as set with 1 rows
		selectdo
		endselect
	endselect

}

function extern get.linked.element.from.purchase.receipt
				(
					domain	whinh.shpm	i.rcno,		|Receipt 
					domain	tcpono		i.rcln,		|Receipt Line
				ref 	domain	tppdm.cspa	o.cspa		|Element
				)
{
	select 	whisg312.cspa:o.cspa
	from	whisg312
	where	whisg312._index1 = {:i.rcno,:i.rcln}
	as set with 1 rows
	selectdo
	selectempty
		o.cspa = ""
	endselect
}

function extern get.linked.element.from.installment
				(
					domain	tccprj		i.cprj,		|Project
					domain	tccom.bpid	i.ofbp,		|Business Partner
					domain	tppdm.nins	i.nins,		|Installment
| 					domain	tppdm.nins	i.ninc,		|Billing Schedule
				ref 	domain	tppdm.cspa	o.cspa,		|Element
				ref	domain	tppdm.aalc	o.insa		|Installament Amount
				)
{
	select 	tppin020.cspa:o.cspa,
		tppin020.insa:o.insa
	from	tppin020
	where	tppin020._index1 = {:i.cprj, :i.ofbp, :i.nins}
	as set with 1 rows
	selectdo
	selectempty
		o.cspa = ""
	endselect
}

function extern domain tdisg.notes Get.CRDB.note.type
					(
						domain	tcorno		i.rqno	
					)
{
	select 	tdisg045.note
	from	tdisg045
	where	tdisg045._index1 = {:i.rqno}
	as set with 1 rows
	selectdo
	endselect
	
	return(tdisg045.note)
}


