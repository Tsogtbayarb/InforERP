|******************************************************************************
|* tfmsl2400m500  0  VRC B61U a7 isg 
|* Supplier Ledger - New
|* Installation User             
|* 2015-10-26
|******************************************************************************
|* Main table tfacp200 Open Items (Purchase Invoices &amp; Payments), Form Type 4
|******************************************************************************
|* ISGEC004022, Dharmendra, 26-10-2-15, B61U a7 isg
|*
|* ID ISGEC002023, Manish Manchanda, 2015-11-23
|* variable initialization
|*
|* ID ISGEC017015,Shilpa Janardanan, 30/03/2017
|* Correction in the report printing structure
|* Printing Assignment for Advance & Removed TDS for Advance & advance anticipated
|*
|* ID ISGEC0010210, Priya Jindal, 20/11/2017
|* Tds/Wct reversal impact not coming  in new supplier ledger properly.
|*
|* ID ISGEC001212, Priya Jindal, 6/1/2018, B61U a7 isg
|* Addition of 2 fields in report
|*
|* ID ISGEC01058, Priya Jindal, 7/6/2018, B61U a7 isg
|* Changes For Foreign Supplier
|*
|* ID CR-534-GH-241, Paras Kukreti(TV), 08/01/2020, B61U a7 isg
|* Changes For Foreign Supplier
|*
|* ID CR-543-GH-247, Paras Kukreti(TV), 18/01/2020, B61U a7 isg
|* In supplier ledger - tfmsl2400m000, advance payment shows net off with TDS 
|* and after assigning the advance amount with invoice, the amount of TDS is 
|* again credited.
|*
|* GH563CR857, RAvi Kumar, 27-05-2021
|* Modification in report Supplier Ledger for MSME suppliers
|****************************** declaration section ***************************
declaration:

	table  	ttfacp200 | Open Items (Purchase Invoices &amp; Payments)
	table	ttccom120
	table	ttccom130
	table	ttfcmg100
	table	ttfacp203
	table	ttcemm170
	table	ttfgld107
	table	ttfgld110
	table	ttfacp251	|ISGEC001212.n
	table	ttdpur401	|ISGEC001212.n
|****************************** Form variables ***************************
	extern 	domain	tfgld.docn	docn.f
	extern 	domain 	tfgld.docn	docn.t
	extern 	domain 	tfgld.ttyp	ttyp.f    fixed
	extern 	domain 	tfgld.ttyp      ttyp.t    fixed
	extern	domain	tcncmp		comp.f
	extern	domain	tcncmp		comp.t
	extern	domain	tccom.bpid	suno.f
	extern	domain	tccom.bpid	suno.t
	extern	domain	tfgld.date	docd.f
	extern	domain	tfgld.date	docd.t	
	extern	domain	tcyesno		domestic.supp
	extern	domain	tcyesno		foreign.supp
	extern	domain	tcyesno		summery
	extern	domain	tcyesno		print.all
	extern	domain	tcyesno		print.bank.anti
	extern	domain	tcyesno		print.bank.reco
	extern	domain	tcyesno		print.assi
	extern	domain	tcyesno		print.refr
	extern	domain	tcyesno		print.text
	extern	domain	tcyesno		compress
	extern 	domain 	tcyesno  text.txt
		domain	tfgld.ttyp	tran.type
		domain tfgld.docn	tran.docn
		domain	tfgld.lino	tran.lino
		domain	tcccur		tran.ccur
		domain	tccom.bpid	tran.ifbp
		domain	tfacp.tpay	tran.tpay
		domain	tfgld.amnt	tran.amth(3)
		domain	tfgld.amnt	tran.amnt
		domain	tfcmg.step	tran.step
		long	report.id
|****************************** Report variables ***************************	
	extern domain  tcmcs.str100m	address1
	extern domain  tcmcs.str100m	address2
	extern domain  tcmcs.str100m	address3
	extern domain  tcmcs.str100m	address4
	extern domain  tcmcs.str100m	address5
	extern domain  tcmcs.str100m	address6
	extern	domain	tfgld.amnt	opening.bal
	extern	domain	tfgld.amnt	opening.bal.cr
	extern	domain	tfgld.amnt	opening.bal.dr
	extern	domain	tfgld.amnt	debit.amount
	extern	domain	tfgld.amnt	credit.amount
	extern	domain	tcmcs.str2	balance.type
	extern	domain	tcclot		document.type
	extern	domain	tcmcs.str12	document.no
	extern	domain	tcmcs.str10	cheque.no
	extern	domain	tcyesno		print.opening
	extern	domain	tcmcs.str2	v.type
	extern	domain	tfgld.amnt	opening.credit
	extern	domain	tfgld.amnt	opening.debit
	extern	domain	tfgld.amnt	net.opening
	extern	domain	tfgld.amnt	debit.amount.fc
	extern	domain	tfgld.amnt	debit.amount.hc
	extern	domain	tfgld.amnt	credit.amount.fc
	extern	domain	tfgld.amnt	credit.amount.hc
	extern	domain	tfgld.amnt	open.bal.deb.fc
	extern	domain	tfgld.amnt	open.bal.cre.fc
	extern	domain	tfgld.amnt	open.bal.deb.hc
	extern	domain	tfgld.amnt	open.bal.cre.hc
	extern	domain	tcyesno		data.found
	extern	domain	tccprj		project					|ISGEC001212.n
	extern	domain	tcorno		orderno					|ISGEC001212.n
	extern	domain	tccreg	creg.f, creg.t		|GH563CR857.a
|****************************** program section ********************************
before.program:
	summery = tcyesno.no
	print.assi = tcyesno.no
	print.refr = tcyesno.no
	print.text = tcyesno.no
	compress = tcyesno.no

|****************************** group section **********************************

group.1:
init.group:
   get.screen.defaults()

|****************************** choice section ********************************

choice.cont.process:
on.choice:
   execute(print.data)

choice.print.data:
on.choice:
|    if rprt_open() then
|        read.main.table()
|        rprt_close()
|    else
|        choice.again()
|    endif
	data.found = tcyesno.no
	if domestic.supp = tcyesno.yes then
		report.id = brp.open("rtfmsl240021500", "D", 1)
		read.main.table.domestic()
	else
		report.id = brp.open("rtfmsl240021600", "D", 1)
		read.main.table.foreign()
	endif
	if data.found = tcyesno.no then
		message("No data within selection")
	endif	
	brp.close(report.id)
|****************************** field section *********************************
field.comp.f:
when.field.changes:
	comp.t = comp.f
	
check.input:
	select tcemm170.comp from tcemm170
	where 	tcemm170._index1 = {:comp.f}		
	selectdo
	selectempty
		Message("Enter valid company")
	endselect
	
field.comp.t:
check.input:
	select tcemm170.comp from tcemm170
	where 	tcemm170._index1 = {:comp.t}		
	selectdo
	selectempty
		Message("Enter valid company")
	endselect
	
field.suno.f:
when.field.changes:
	suno.t = suno.f
	
field.docd.f:
when.field.changes:
	docd.t = docd.f
	
field.ttyp.f:
when.field.changes:
   ttyp.t = ttyp.f

field.docn.f:
when.field.changes:
   docn.t = docn.f

before.zoom:
	if not isspace(ttyp.f)  then
		query.extend.where.in.zoom("tfgld018.ttyp = " & quoted.string(ttyp.f))
	endif	

field.docn.t:
before.zoom:
	if not isspace(ttyp.t)  then
		query.extend.where.in.zoom("tfgld018.ttyp = "  & quoted.string(ttyp.t))
	endif
	
field.domestic.supp:
when.field.changes:
	if domestic.supp = tcyesno.yes then
		foreign.supp = tcyesno.no
		display("foreign.supp")
	endif
	
field.foreign.supp:
when.field.changes:
	if foreign.supp = tcyesno.yes then
		domestic.supp = tcyesno.no
		display("domestic.supp")
	endif	
	
field.print.all:
when.field.changes:
	if print.all = tcyesno.yes then
		print.bank.anti = tcyesno.no
		print.bank.reco = tcyesno.no
		display("print.bank.anti")
		display("print.bank.reco")
	endif

field.print.bank.anti:
when.field.changes:
	if print.bank.anti = tcyesno.yes then
		print.all = tcyesno.no
		print.bank.reco = tcyesno.no
		display("print.all")
		display("print.bank.reco")
	endif
	
field.print.bank.reco:
when.field.changes:
	if print.bank.reco = tcyesno.yes then
		print.all = tcyesno.no
		print.bank.anti = tcyesno.no
		display("print.all")
		display("print.bank.anti")
	endif	


field.creg.f:					|GH563CR857.a
when.field.changes:
	creg.t = creg.f

|****************************** function section ******************************

functions:

function read.main.table.domestic()
{
	print.opening = tcyesno.no
	
	select 	tccom120.otbp, tccom120.cadr,tccom130.nama, tccom120.creg, tcmcs045.dsca	|GH563CR857.a
	from 	tccom120,tccom130, tcmcs045					|GH563CR857.a
	where	tccom120._index1 inrange {:suno.f} and {:suno.t}
	and	tccom130.ccty = "IN "		
	and	tccom120.creg inrange :creg.f and :creg.t			|GH563CR857.a
	and	tccom120.creg refers to tcmcs045				|GH563CR857.a
	and	tccom120.cadr refers to tccom130
	order by tccom120._index1
	selectdo
		opening.bal = 0
		opening.bal.dr = 0
		opening.bal.cr = 0
		opening.credit = 0
		opening.debit = 0
		net.opening = 0
		
		address1 = tccom.dll4032.get.address.line1(tccom120.cadr)
		address2 = tccom.dll4032.get.address.line2(tccom120.cadr)
		address3 = tccom.dll4032.get.address.line3(tccom120.cadr)
		address4 = tccom.dll4032.get.address.line4(tccom120.cadr)
		address5 = tccom.dll4032.get.address.line5(tccom120.cadr)
		address6 = tccom.dll4032.get.address.line6(tccom120.cadr)
		address1 = strip$(address1) & " " & strip$(address2) & " " & strip$(address3)
		address2 = strip$(address4) & " " & strip$(address5) & " " & strip$(address6)
		
		print.opening = tcyesno.yes
		select tcemm170.* from tcemm170
		where 	tcemm170._index1 inrange {:comp.f} and {:comp.t}		
		selectdo
			get.opening.transaction()
		endselect
		
		net.opening = abs(opening.debit) - abs(opening.credit)
		if net.opening < 0 then
			opening.bal.cr = abs(net.opening)
		else
			opening.bal.dr = abs(net.opening)
		endif						

		print.opening = tcyesno.no
		select tcemm170.* from tcemm170
		where 	tcemm170._index1 inrange {:comp.f} and {:comp.t}		
		selectdo
			get.inrange.transaction()
		endselect
	selectempty
	endselect
}

function read.main.table.foreign()
{
	print.opening = tcyesno.no
	
	select 	tccom120.otbp, tccom120.cadr,tccom130.nama, tccom120.creg, tcmcs045.dsca	|GH563CR857.a
	from 	tccom120,tccom130, tcmcs045					|GH563CR857.a
	where	tccom120._index1 inrange {:suno.f} and {:suno.t}
	and	tccom130.ccty <> "IN "	
	and	tccom120.creg inrange :creg.f and :creg.t			|GH563CR857.a
	and	tccom120.creg refers to tcmcs045				|GH563CR857.a
	and	tccom120.cadr refers to tccom130
	order by tccom120._index1
	selectdo
		open.bal.deb.fc = 0
		open.bal.cre.fc = 0
		open.bal.deb.hc = 0
		open.bal.cre.hc = 0
		net.opening	= 0 
		
		address1 = tccom.dll4032.get.address.line1(tccom120.cadr)
		address2 = tccom.dll4032.get.address.line2(tccom120.cadr)
		address3 = tccom.dll4032.get.address.line3(tccom120.cadr)
		address4 = tccom.dll4032.get.address.line4(tccom120.cadr)
		address5 = tccom.dll4032.get.address.line5(tccom120.cadr)
		address6 = tccom.dll4032.get.address.line6(tccom120.cadr)
		address1 = strip$(address1) & " " & strip$(address2) & " " & strip$(address3)
		address2 = strip$(address4) & " " & strip$(address5) & " " & strip$(address6)
		
		print.opening = tcyesno.yes
		select tcemm170.* from tcemm170
		where 	tcemm170._index1 inrange {:comp.f} and {:comp.t}		
		selectdo
			get.opening.transaction()
		endselect
									|#ISGEC002023.sn
| 		net.opening = abs(open.bal.deb.fc) - abs(open.bal.cre.fc)
| 		if net.opening < 0 then
| 			open.bal.cre.fc = abs(net.opening)
| 			open.bal.deb.fc = 0 
| 		else
| 			open.bal.deb.fc = abs(net.opening)
| 			open.bal.cre.fc = 0 
| 		endif						
| 		
| 		net.opening = 0
| 		net.opening = abs(open.bal.deb.hc) - abs(open.bal.cre.hc)
| 		if net.opening < 0  then
| 			open.bal.cre.hc = abs(net.opening)
| 			open.bal.deb.hc = 0
| 		else
| 			open.bal.deb.hc = abs(net.opening)
| 			open.bal.cre.hc = 0
| 		endif			
									|#ISGEC002023.en
	
		print.opening = tcyesno.no
		select tcemm170.* from tcemm170
		where 	tcemm170._index1 inrange {:comp.f} and {:comp.t}		
		selectdo
			get.inrange.transaction()
		endselect
	endselect
}

function get.inrange.transaction()
{
    	select 	tfacp200.*
    	from 	tfacp200
    	where  	tfacp200._index1 inrange {:ttyp.f, :docn.f}
				and	{:ttyp.t, :docn.t}
	and	tfacp200.ifbp = :tccom120.otbp	
	and	tfacp200.docd inrange :docd.f and :docd.t
	and	tfacp200._compnr = :tcemm170.comp
| 	order by tfacp200._index1
	order by tfacp200.tdoc, tfacp200.docn
   	selectdo
		if trim$(tfacp200.tdoc) = "AAP" 				|#CR-543-GH-247.n
			and tfacp200.whti = tcyesno.no then			|#CR-543-GH-247.n
		else								|#CR-543-GH-247.n
			initialize.variables()
			on case tfacp200.tpay
			case tfacp.tpay.invoice:		|Purchase Invoice(1)
				select	tfacp251.orno						|ISGEC001212.sn
				from	tfacp251
				where	tfacp251._index1 = {:tcemm170.comp,:tfacp200.ttyp,:tfacp200.ninv}
				and	tfacp251._compnr = :tcemm170.comp
				as set with 1 rows
				selectdo
					orderno = tfacp251.orno
					select	tdpur401.cprj:project
					from	tdpur401
					where	tdpur401._index1 = {:tfacp251.orno}
					and	tdpur401._compnr = :tcemm170.comp
					as set with 1 rows
					selectdo
					endselect
				endselect							
				if isspace(orderno) and isspace(project) then
					get.var(pid,"tfacp200.cdf_prno",orderno)						
					get.var(pid,"tfacp200.cdf_cprj",project)
				endif								|ISGEC001212.en
				
				if tfacp200.whti = tcyesno.yes then
					invoice.transaction.with.tds()
				else
					invoice.transaction.without.tds()
				endif
				break
			case tfacp.tpay.normal:			|Normal Payment(2)
				if print.bank.anti = tcyesno.yes or print.all = tcyesno.yes then	
	| 				normal.transaction()						|#CR-534-GH-241.o
					document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)		|#CR-534-GH-241.sn
					credit.debit.balance.amount()
					send.report.for.printing()					|#CR-534-GH-241.en
				endif
				break
			case tfacp.tpay.credit:			|Credit Note(4)
				get.var(pid,"tfacp200.cdf_prno",orderno)	|ISGEC001212.n						
				get.var(pid,"tfacp200.cdf_cprj",project)	|ISGEC001212.n
				credit.transaction()
				break	
			case tfacp.tpay.correction:		|Correction(5)
				correction.transaction()
				break
			case tfacp.tpay.anticipated:		|anticipated Payment(8)
				anticipated.transaction()
				break
			case tfacp.tpay.advance:		|Advance payment(9)
	| 			advance.transaction()					|#CR-534-GH-241.o
				if tfacp200.whti = tcyesno.yes then			|#CR-534-GH-241.sn
					invoice.transaction.with.tds()
				else													
					invoice.transaction.without.tds()		
				endif							|#CR-534-GH-241.en
				break
			case tfacp.tpay.unallocated:		|Unallocated Payment(10)
				get.var(pid,"tfacp200.cdf_prno",orderno)	|ISGEC001212.n						
				get.var(pid,"tfacp200.cdf_cprj",project)	|ISGEC001212.n
				unallocated.payment.transaction()
				break
			case tfacp.tpay.advance.ant:		|Advance Anticipated(11)
				get.var(pid,"tfacp200.cdf_prno",orderno)	|ISGEC001212.n						
				get.var(pid,"tfacp200.cdf_cprj",project)	|ISGEC001212.n
				advance.anticipated.transaction()
				break	
			case tfacp.tpay.unallocated.ant:	|Unallocated anticipated(12)	
				get.var(pid,"tfacp200.cdf_prno",orderno)	|ISGEC001212.n						
				get.var(pid,"tfacp200.cdf_cprj",project)	|ISGEC001212.n
				unallocated.anticipated.transaction()
				break
				
			case tfacp.tpay.assignment:
				assignment()				|#ISGEC017015.n
			endcase
		endif								|#CR-543-GH-247.n
	selectempty
   	endselect

}


function get.opening.transaction()
{
    	select 	tfacp200.*
    	from 	tfacp200
    	where  	tfacp200._index1 inrange {:ttyp.f, :docn.f}
				and	{:ttyp.t, :docn.t}
	and	tfacp200.ifbp = :tccom120.otbp	
	and	tfacp200.docd < :docd.f
	and	tfacp200._compnr = :tcemm170.comp
	order by tfacp200._index1
   	selectdo
		initialize.variables()
		on case tfacp200.tpay
		case tfacp.tpay.invoice:
			if tfacp200.whti = tcyesno.yes then
				invoice.transaction.with.tds()
			else
				invoice.transaction.without.tds()
			endif
			break
		case tfacp.tpay.normal:
			if print.bank.anti = tcyesno.yes or print.all = tcyesno.yes then
| 				normal.transaction()						|#CR-534-GH-241.o
				document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)		|#CR-534-GH-241.sn
				credit.debit.balance.amount()
				send.report.for.printing()					|#CR-534-GH-241.en
			endif
			break
		case tfacp.tpay.credit:
			credit.transaction()
			break	
		case tfacp.tpay.correction:
			correction.transaction()
			break
		case tfacp.tpay.anticipated:
			anticipated.transaction()
			break	
		case tfacp.tpay.advance:
| 			advance.transaction()					|#CR-534-GH-241.o
			if tfacp200.whti = tcyesno.yes then			|#CR-534-GH-241.sn
				invoice.transaction.with.tds()
			else							
				invoice.transaction.without.tds()		
			endif							|#CR-534-GH-241.en
			break
		case tfacp.tpay.unallocated:
			unallocated.payment.transaction()
			break			
		case tfacp.tpay.advance.ant:
			advance.anticipated.transaction()
			break	
		case tfacp.tpay.unallocated.ant:
			unallocated.anticipated.transaction()
			break
		endcase
   	endselect

}

function invoice.transaction.with.tds()
{
	domain tfgld.amnt total.amount, tfacp203.amount
	total.amount = 0
	tfacp203.amount = 0
	
	select	tfacp203.amth
	from	tfacp203
	where	tfacp203._index1 = {:tfacp200.ttyp, :tfacp200.ninv}
	and	tfacp203.ifbp = :tfacp200.ifbp
	and	tfacp203._compnr = :tcemm170.comp
	and	tfacp203.txtp = tctax.txtp.income.tax			|test.n
	selectdo
		tfacp203.amount = tfacp203.amount + tfacp203.amth(1)
	endselect	
	
	document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
	document.type = enum.descr$("tfacp.tpay", tfacp200.tpay)
	if  tfacp200.tpay = tfacp.tpay.advance then				|#ISGEC017015.sn
| 		total.amount = tfacp200.amth(1) - tfacp203.amount		|#CR-534-GH-241.o
		total.amount = tfacp200.amth(1)					|#CR-534-GH-241.n
	else									|#ISGEC017015.en
		total.amount = tfacp200.amth(1) + tfacp203.amount
	endif
	
	if total.amount < 0 then
		debit.amount = total.amount
		credit.amount = 0
	else
		credit.amount = total.amount	
		debit.amount = 0
	endif

	send.report.for.printing()
	document.type = "TDS Deduction"
	credit.amount = 0
	if  tfacp200.tpay <>  tfacp.tpay.advance then				|#ISGEC017015.n
		debit.amount = tfacp203.amount
		send.report.for.printing()
	endif
	
}

function invoice.transaction.without.tds()
{
	document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)	
	credit.debit.balance.amount()
	send.report.for.printing()
}

function normal.transaction()
{
	domain tcncmp	var.ncmp
	
	var.ncmp = get.compnr()
	select 	tfcmg007.paym
	from	tfcmg007
	where	tfcmg007._index2 = {:tfacp200.paym}
	and	tfcmg007.tacc = tfcmg.tacc.ant.supplier
| 	and	tfcmg007._compnr = :tcemm170.comp
	and	tfcmg007._compnr = :var.ncmp
	selectdo
	selectempty
		document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
		credit.debit.balance.amount()
		send.report.for.printing()
	endselect
}

function credit.transaction()
{
	document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
	credit.debit.balance.amount()
	if print.all = tcyesno.yes then
		send.report.for.printing()
	else	
		if isspace(tfacp200.tdoc) and tfacp200.docn = 0 then
			send.report.for.printing()
		else
			if print.assi = tcyesno.yes then
				send.report.for.printing()
			endif	
		endif
	endif	
}

function correction.transaction()
{
	document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
	credit.debit.balance.amount()
	send.report.for.printing()
}

function anticipated.transaction()
{
	if print.all = tcyesno.yes then
		document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
		document.type = enum.descr$("tfacp.tpay", tfacp200.tpay)
		tfacp200.isup = tfacp200.tdoc & " " & str$(tfacp200.docn)
		get.cheque.no()
		credit.debit.balance.amount()
		send.report.for.printing()
	else			
		if print.bank.anti = tcyesno.yes then
			document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
			document.type = enum.descr$("tfacp.tpay", tfacp200.tpay)
			if print.opening = tcyesno.no then
				if compress = tcyesno.yes then
					if tran.type = tfacp200.tdoc and tran.docn = tfacp200.docn and
						tran.tpay = tfacp200.tpay and 
						tran.ifbp = tfacp200.ifbp and tran.ccur = tfacp200.ccur then
					
					else	
						get_same_cheque_sum()
					endif	
				else	
					on case tfacp200.step
					case tfcmg.step.doc.acc.by.cust:	|Step 6	
					case tfcmg.step.doc.acc.sent:		|Step 7
						if tfacp200.amth(1) < 0 and tfacp200.lino < 9999 then
							debit.amount = tfacp200.amth(1)
							credit.amount = 0
							get.cheque.no()
							send.report.for.printing()
						endif	
						break
					case tfcmg.step.doc.rejected:		|Step 17
						get.cheque.no()
						credit.debit.balance.amount()
						send.report.for.printing()
						break
					endcase
				endif		
			else
				on case tfacp200.step
				case tfcmg.step.doc.acc.by.cust:	|Step 6	
				case tfcmg.step.doc.acc.sent:		|Step 7
					if tfacp200.amth(1) < 0 and tfacp200.lino < 9999 then
						debit.amount = tfacp200.amth(1)
						credit.amount = 0
						get.cheque.no()
						send.report.for.printing()
					endif	
					break
				case tfcmg.step.doc.rejected:		|Step 17
					get.cheque.no()
					credit.debit.balance.amount()
					send.report.for.printing()
					break
				endcase
			endif
		endif	
	endif	
}

function advance.transaction()
{
	if print.bank.anti = tcyesno.yes then
		select 	tfcmg007.paym
		from	tfcmg007
		where	tfcmg007._index2 = {:tfacp200.paym}
		and	tfcmg007.tacc = tfcmg.tacc.ant.supplier
| 		and	tfcmg007._compnr = :tcemm170.comp
		and	tfcmg007._compnr = 200
		selectdo
		selectempty
			if tfacp200.whti = tcyesno.yes then
				invoice.transaction.with.tds()
			else
				invoice.transaction.without.tds()
			endif
		endselect
	endif
}

function unallocated.payment.transaction()
{

	domain tcncmp	var.ncmp
	
	var.ncmp = get.compnr()
	
	if print.all = tcyesno.yes then
		document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
		credit.debit.balance.amount()
		send.report.for.printing()
	else	
		if print.bank.anti = tcyesno.yes then
			select 	tfcmg007.paym
			from	tfcmg007
			where	tfcmg007._index2 = {:tfacp200.paym}
			and	tfcmg007.tacc = tfcmg.tacc.ant.supplier
| 			and	tfcmg007._compnr = :tcemm170.comp
			and	tfcmg007._compnr = :var.ncmp
			selectdo
			selectempty
				if tfacp200.whti = tcyesno.yes then
					invoice.transaction.with.tds()
				else
					invoice.transaction.without.tds()
				endif
			endselect
		endif
	endif	
}


function advance.anticipated.transaction()
{
	domain tfgld.amnt total.amount
	total.amount = 0
	if print.all = tcyesno.yes then
		document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
		credit.debit.balance.amount()
		send.report.for.printing()
	else	
		if print.bank.anti = tcyesno.yes then
			if tfacp200.whti = tcyesno.yes then
				on case tfacp200.step
				case tfcmg.step.doc.acc.by.cust:	|Step 6	
				case tfcmg.step.doc.acc.sent:		|step 7
					if tfacp200.amth(1) < 0 then
						document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
						document.type = enum.descr$("tfacp.tpay", tfacp200.tpay)
| 						total.amount = tfacp200.amth(1) + tfacp200.wtph(1)	|#CR-534-GH-241.o
						total.amount = tfacp200.amth(1)				|#CR-534-GH-241.n
						if total.amount < 0 then
							debit.amount = total.amount
							credit.amount = 0
						else
							credit.amount = total.amount
							debit.amount = 0
						endif
						send.report.for.printing()
						select	tfacp203.amth
						from	tfacp203
						where	tfacp203._index1 = {:tfacp200.ttyp, :tfacp200.ninv}
						and	tfacp203.ifbp = :tfacp200.ifbp
						and	tfacp203._compnr = :tcemm170.comp
						selectdo
							document.type = "TDS Deduction"
							credit.amount = tfacp203.amth(1)
							debit.amount = 0
| 							send.report.for.printing()		|#ISGEC017015.o	|#Blocked as per discussion with Dhananjay
						endselect	
					endif
					break
				case tfcmg.step.doc.rejected:	|Step 17
					get.cheque.no()
					document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
					credit.debit.balance.amount()
					send.report.for.printing()
					break
				endcase
			else
				on case tfacp200.step
				case tfcmg.step.doc.acc.by.cust:	|Step 6	
				case tfcmg.step.doc.acc.sent:		|Step 7
					if tfacp200.amth(1) < 0 then
						document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
						credit.debit.balance.amount()
						send.report.for.printing()
					endif	
					break
				case tfcmg.step.doc.rejected:		|Step 17
					get.cheque.no()
					document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
					credit.debit.balance.amount()
					send.report.for.printing()
					break
				endcase
			endif
		endif
	endif		
}

function unallocated.anticipated.transaction()
{
	if print.all = tcyesno.yes then
		document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
		credit.debit.balance.amount()
		send.report.for.printing()
	else	
		if print.bank.anti = tcyesno.yes then
			on case tfacp200.step
			case tfcmg.step.doc.acc.by.cust:	|Step 6	
			case tfcmg.step.doc.acc.sent:		|Step 7
				document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
				credit.debit.balance.amount()
				send.report.for.printing()
				break
			case tfcmg.step.doc.rejected:		|Step 17
				get.cheque.no()
				document.no = tfacp200.tdoc & " " & str$(tfacp200.docn)
				credit.debit.balance.amount()
				send.report.for.printing()
				break
			endcase
		endif	
	endif	
}

function get.cheque.no()
{
	select	tfcmg100.cheq
	from	tfcmg100
	where	tfcmg100.typo = :tfacp200.tdoc
	and	tfcmg100.doco = :tfacp200.docn
	and	tfcmg100.ptbp = :tfacp200.ifbp
	and	tfcmg100._compnr = :tcemm170.comp
	selectdo
		cheque.no = trim$(tfcmg100.cheq)
	selectempty
		cheque.no = ""
	endselect
}

function credit.debit.balance.amount()
{
	domain	tfgld.amnt	with.tax		|test.n
	domain	tfgld.docn	get.ninv
	domain	tfgld.ttyp	get.ttyp
	
	
	with.tax = 0
	document.type = enum.descr$("tfacp.tpay", tfacp200.tpay)
	if domestic.supp = tcyesno.yes then
		if tfacp200.amth(1) < 0 then
			debit.amount = tfacp200.amth(1)
			credit.amount = 0
		else
			debit.amount = 0
			credit.amount = tfacp200.amth(1)
		endif
		
		if tfacp200.step = tfcmg.step.doc.rejected then			
			select	acp200.ttyp:tran.type,
				acp200.ninv:tran.docn,
				acp200.tpay:tran.tpay,
				acp200.step:tran.step|,
| 				acp200.lino:tran.lino,
| 				acp200.ifbp:tran.ifbp,
| 				acp200.ccur:tran.ccur,
| 				acp200.amth:tran.amth,
| 				acp200.amnt:tran.amnt
			from	tfacp200 acp200
			where	acp200._index2 = {:tfacp200.ifbp}
			and	acp200.tdoc = :tfacp200.tdoc
			and	acp200.docn = :tfacp200.docn
			selectdo
				select tfacp200.wtph
				from	tfacp200
				where	tfacp200.ttyp = :tran.type
				and	tfacp200.ninv = :tran.docn
				and	tfacp200.docn = 0 
				selectdo
				endselect
				
				with.tax = tfacp200.wtph(1)
			endselect
			if tfacp200.amth(1) < 0 then
				debit.amount = tfacp200.amth(1) +  with.tax
				credit.amount = 0
			else
				debit.amount = 0
				credit.amount = tfacp200.amth(1) - with.tax
			endif
		endif								|test.en
		
	else
		if tfacp200.ccur = "INR" then
			if tfacp200.amth(1) < 0 then
				debit.amount.fc = 0
				debit.amount.hc = abs(tfacp200.amth(1))
			else
				credit.amount.fc = 0
				credit.amount.hc = abs(tfacp200.amth(1))
			endif
		else	
			if tfacp200.amth(1) < 0 then
				debit.amount.fc = abs(tfacp200.amnt)
				debit.amount.hc = abs(tfacp200.amth(1))
			else
				credit.amount.fc = abs(tfacp200.amnt)
				credit.amount.hc = abs(tfacp200.amth(1))
			endif
		endif	
	endif
}

function initialize.variables()
{
	document.no = ""
	credit.amount = 0
	debit.amount = 0
	cheque.no = ""
	debit.amount.fc = 0
	credit.amount.fc = 0
	debit.amount.hc = 0
	credit.amount.hc = 0
	project = ""			|ISGEC001212.n
	orderno = ""			|ISGEC001212.n
}

function send.report.for.printing()
{
	if print.all = tcyesno.yes then
		tfacp200.isup = tfacp200.tdoc & " " & str$(tfacp200.docn)
	endif

	if domestic.supp = tcyesno.yes then
		if print.opening = tcyesno.no then
			data.found = tcyesno.yes	
			if (debit.amount <> 0) or (credit.amount <> 0) then		|#ISGEC017015.n
				brp.ready(report.id)
			endif
			
		else
			opening.debit = opening.debit + abs(debit.amount)
			opening.credit = opening.credit + abs(credit.amount)
			opening.bal = opening.bal + abs(credit.amount) - abs(debit.amount)
		endif
	else
		if print.opening = tcyesno.no then	
			data.found = tcyesno.yes
| 			if (debit.amount <> 0) or (credit.amount <> 0) then |#ISGEC017015.n  |ISGEC01058.o
			if (debit.amount <> 0) or (credit.amount <> 0) or (debit.amount.hc <> 0) or (credit.amount.hc <> 0)  then |#ISGEC01058.n
				brp.ready(report.id)
				endif
				
		else
			open.bal.deb.fc = open.bal.deb.fc + abs(debit.amount.fc)
			open.bal.cre.fc = open.bal.cre.fc + abs(credit.amount.fc)
			open.bal.deb.hc = open.bal.deb.hc + abs(debit.amount.hc)
			open.bal.cre.hc = open.bal.cre.hc + abs(credit.amount.hc)
		endif
	endif	
}

function get_same_cheque_sum()
{
	domain tcyesno	record.found
		
	record.found = tcyesno.no
	select	acp200.tdoc:tran.type,
		acp200.docn:tran.docn,
		acp200.tpay:tran.tpay,
		acp200.step:tran.step,
		acp200.lino:tran.lino,
		acp200.ifbp:tran.ifbp,
		acp200.ccur:tran.ccur,
		acp200.amth:tran.amth,
		acp200.amnt:tran.amnt
	from	tfacp200 acp200
	where	acp200._index2 = {:tfacp200.ifbp}
	and	acp200.tdoc = :tfacp200.tdoc
	and	acp200.docn = :tfacp200.docn
	and	acp200.tpay = :tfacp200.tpay
| 	and	acp200.step = :tfacp200.step
| 	and	acp200.lino = :tfacp200.lino
	and	acp200.ccur = :tfacp200.ccur
	and	acp200._compnr = :tcemm170.comp
	selectdo
		on case tran.step
		case tfcmg.step.doc.acc.by.cust:	|Step 6	
		case tfcmg.step.doc.acc.sent:		|Step 7
			if tran.amth(1) < 0 and tran.lino < 9999 then
				debit.amount = debit.amount + abs(tran.amth(1))
				record.found = tcyesno.yes
			endif	
			break
		case tfcmg.step.doc.rejected:		|Step 17
			record.found = tcyesno.yes
			if domestic.supp = tcyesno.yes then
				if tran.amth(1) < 0 then
					debit.amount = debit.amount + abs(tran.amth(1))
				else
					credit.amount = credit.amount + abs(tran.amth(1))
				endif
			else
				if tran.ccur = "INR" then
					if tran.amth(1) < 0 then
						debit.amount.fc = 0
						debit.amount.hc = debit.amount.hc + abs(tran.amth(1))
					else
						credit.amount.fc = 0
						credit.amount.hc = credit.amount.hc + abs(tran.amth(1))
					endif
				else	
					if tran.amth(1) < 0 then
						debit.amount.fc = debit.amount.fc + abs(tran.amnt)
						debit.amount.hc = debit.amount.hc + abs(tran.amth(1))
					else
						credit.amount.fc = credit.amount.fc + abs(tran.amnt)
						credit.amount.hc = credit.amount.hc + abs(tran.amth(1))
					endif
				endif	
			endif
			break
		endcase
	selecteos
		if record.found = tcyesno.yes then
		get.cheque.no()
		send.report.for.printing()
		endif
	endselect

}

function assignment()			|#ISGEC017015.sn
{
	domain	tfacp.tpay	get.tpay
	
	select	tfacp200.tpay:get.tpay
	from	tfacp200
	where	tfacp200._index1 = {:tfacp200.ttyp, :tfacp200.ninv}
	and	tfacp200.ifbp = :tfacp200.ifbp		|ISGEC0010210.n
	and	tfacp200.docn = 0
	selectdo
	endselect
	if get.tpay = tfacp.tpay.advance then
| 		select	tfgld106.amth
| 		from	tfgld106
| 		where	tfgld106._index1 = {:tfacp200.tdoc, :tfacp200.docn}
| 		and	tfgld106.ctyp = 
| 		and	tfgld106.cdoc = 
| 		selectdo
| 		endselect
| 		
		
		
		if tfacp200.wtph(1) < 0 then
			debit.amount = tfacp200.wtph(1)
			credit.amount = 0
		else
			credit.amount = tfacp200.wtph(1)	
			debit.amount = 0
		endif
		
		if tfacp200.wtph(1) = 0 then
			select	tfgld107.vamh
			from	tfgld107
			where	tfgld107._index1 = {:tfacp200.pcom, :tfacp200.payt,:tfacp200.payd}
			and	tfgld107.ktax = tcktax.income.tax
			selectdo
				if tfgld107.vamh(1) < 0 then
					debit.amount = debit.amount + tfgld107.vamh(1)
					credit.amount = 0
				else
					credit.amount = credit.amount + tfgld107.vamh(1)	
					debit.amount = 0
				endif
			selectempty
				select	tfgld110.vamh
				from	tfgld110
				where	tfgld110._index1 = {:tfacp200.pcom, :tfacp200.payt,:tfacp200.payd}
				and	tfgld110.ktax = tcktax.income.tax
				selectdo
					if tfgld110.vamh(1) < 0 then
						debit.amount = debit.amount + tfgld110.vamh(1)
						credit.amount = 0
					else
						credit.amount = credit.amount + tfgld110.vamh(1)	
						debit.amount = 0
					endif
				endselect	
			endselect
			
		endif
		
		document.no = tfacp200.ttyp & " " & str$(tfacp200.ninv)
		document.type = "Tax on Adv. Adj."
		send.report.for.printing()
	endif
	
}					|#ISGEC017015.en
