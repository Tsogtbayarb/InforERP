|******************************************************************************
|* tfisg102  0  VRC B61U a7 live
|* DAL2 for tfisg102
|* baan
|* 14-09-11 [12:20]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
                                                                                
#include <bic_dal2>

	table	ttfgld008
	table	ttfisg102
	
	
#include "itfmsldll0032"	
	
function extern long before.open.object.set()
{
	return(0)
}

function extern long before.save.object(long type)
{
	return(0)
}


|** [tfisg102.leac] Ledger Account

function extern boolean tfisg102.leac.is.valid(long type)
{
	if check.ledger.account(tfisg102.leac) then
		return(DALHOOKERROR)
	endif
	return(true)
}

function extern boolean tfisg102.leac.is.mandatory(long type)
{
	if isspace(tfisg102.leac) then
		dal.set.error.message("@ Enter Ledger Account")
		return(true)
	endif
	
	return(false)
}


|*** Dimension 1 [tfisg102.dim1}
function extern boolean tfisg102.dim1.is.derived()
{
	LEDGER_DIMENSION(tfisg102.leac,1)
	if itfmsldll0032.check_dimension_is_applicable(result.dopt) then
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg102.dim1.is.mandatory()
{
	LEDGER_DIMENSION(tfisg102.leac,1)
	if itfmsldll0032.check_dimension_is_mandatory(result.dopt) and isspace(tfisg102.dim1) then
		return(true)
	endif
	
	return(false)
}

function extern boolean tfisg102.dim1.is.valid()
{
	if not tfmsldll0031.check_dimension_is_valid(1,tfisg102.dim1) then
		dal.set.error.message("@ Enter Valid Dimension 1")
		return(DALHOOKERROR)
	endif
	return(true)
}


|*** Dimension 2 [tfisg102.dim2]
function extern boolean tfisg102.dim2.is.derived()
{
	LEDGER_DIMENSION(tfisg102.leac,2)
	if itfmsldll0032.check_dimension_is_applicable(result.dopt) then
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg102.dim2.is.mandatory()
{
	LEDGER_DIMENSION(tfisg102.leac,2)
	if itfmsldll0032.check_dimension_is_mandatory(result.dopt) and isspace(tfisg102.dim2) then
		return(true)
	endif
	
	return(false)
}

function extern boolean tfisg102.dim2.is.valid()
{
	if not tfmsldll0031.check_dimension_is_valid(2,tfisg102.dim2) then
		dal.set.error.message("@ Enter Valid Dimension 2")
		return(DALHOOKERROR)
	endif
	return(true)
}


|*** Dimension 3 [tfisg102.dim3]
function extern boolean tfisg102.dim3.is.derived()
{
	LEDGER_DIMENSION(tfisg102.leac,3)
	if itfmsldll0032.check_dimension_is_applicable(result.dopt) then
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg102.dim3.is.mandatory()
{
	LEDGER_DIMENSION(tfisg102.leac,3)
	if itfmsldll0032.check_dimension_is_mandatory(result.dopt) and isspace(tfisg102.dim3) then
		return(true)
	endif
	
	return(false)
}

function extern boolean tfisg102.dim3.is.valid()
{
	if not tfmsldll0031.check_dimension_is_valid(3,tfisg102.dim3) then
		dal.set.error.message("@ Enter Valid Dimension 3")
		return(DALHOOKERROR)
	endif
	return(true)
}


|*** Dimension 4 [tfisg102.dim4]
function extern boolean tfisg102.dim4.is.derived()
{
	LEDGER_DIMENSION(tfisg102.leac,4)
	if itfmsldll0032.check_dimension_is_applicable(result.dopt) then
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg102.dim4.is.mandatory()
{
	LEDGER_DIMENSION(tfisg102.leac,4)
	if itfmsldll0032.check_dimension_is_mandatory(result.dopt) and isspace(tfisg102.dim4) then
		return(true)
	endif
	
	return(false)
}

function extern boolean tfisg102.dim4.is.valid()
{
	if not tfmsldll0031.check_dimension_is_valid(4,tfisg102.dim4) then
		dal.set.error.message("@ Enter Valid Dimension 4")
		return(DALHOOKERROR)
	endif
	return(true)
}

|*** Dimension 5 [tfisg102.dim5]
function extern boolean tfisg102.dim5.is.derived()
{
	LEDGER_DIMENSION(tfisg102.leac,5)
	if itfmsldll0032.check_dimension_is_applicable(result.dopt) then
		return(false)
	endif
	
	return(true)
}

function extern boolean tfisg102.dim5.is.mandatory()
{
	LEDGER_DIMENSION(tfisg102.leac,5)
	if itfmsldll0032.check_dimension_is_mandatory(result.dopt) and isspace(tfisg102.dim5) then
		return(true)
	endif
	
	return(false)
}

function extern boolean tfisg102.dim5.is.valid()
{
	if not tfmsldll0031.check_dimension_is_valid(5,tfisg102.dim5) then
		dal.set.error.message("@ Enter Valid Dimension 5")
		return(DALHOOKERROR)
	endif
	return(true)
}



|** [tfisg102.bpid] Business Partner

function extern boolean tfisg102.bpid.is.mandatory(long type)
{
	select	tfgld008.blbp
	from	tfgld008
	where	tfgld008._index1 = {:tfisg102.leac}
	and	tfgld008.subl = 0
	and	tfgld008.blbp = tcyesno.yes
	as set with 1 rows
	selectdo
		if isspace(tfisg102.bpid) then
			dal.set.error.message("@ Business Partner is mandatory")
			return(true)
		endif
	endselect

	return(false)
}

|** [tfisg102.emno] Employee Code
| function extern boolean tfisg102.emno.is.valid(long type)
| {
| 	select 	tccom001.emno
| 	from	tccom001
| 	where	tccom001._index1 = {:tfisg102.emno}
| 	as set with 1 rows
| 	selectdo
| 	selectempty
| 		dal.set.error.message("@ Enter Valid Employee Code")
| 		return(DALHOOKERROR)
| 	endselect
| 	
| 	return(true)
| }

|** [tfgld011.ttyp] Transaction Type
function extern boolean tfisg102.ttyp.is.mandatory(long type)
{
	if tfisg102.type = tfisg.sal.perk then
		if isspace(tfisg102.ttyp) then
			dal.set.error.message("@ Enter Valid Transaction Type")
			return(true)
		endif
	endif
	
	return(false)
}

function extern boolean tfisg102.ttyp.is.valid(long type)
{
	if tfisg102.type = tfisg.sal.perk then
		select 	tfgld011.ttyp
		from	tfgld011
		where	tfgld011._index1 = {:tfisg102.ttyp}
		and	(tfgld011.ses1 = "tfgld1115m000" or tfgld011.ses1 = "tfcmg2100s000")
		as set with 1 rows
		selectdo
		selectempty
			dal.set.error.message("@ Enter Valid Transaction Type")
			return(DALHOOKERROR)
		endselect
	endif
	
	return(true)
}

function extern boolean tfisg102.seri.is.valid()
{
	if tfisg102.type = tfisg.sal.perk then
		select 	tfgld017.ttyp
		from	tfgld017
		where	tfgld017._index1 = {:tfisg102.ttyp,:tfisg102.seri}
		and	tfgld017.dele = tcyesno.no
		as set with 1 rows
		selectdo
		selectempty
			dal.set.error.message("@ Series is not Valid")
			return(DALHOOKERROR)
		endselect
	endif
	
	return(true)
}
|************ USER DEFINED FUNCTION *****************

function long check.ledger.account
			(
				domain	tfgld.leac	i.leac		|Ledger Account
			)
{
	select	tfgld008.leac,
		tfgld008.inta,
		tfgld008.blbp,
		tfgld008.iprj,
		tfgld008.ifas,
		tfgld008.bloc 				
	from	tfgld008
	where	tfgld008._index1 = {:i.leac}
	and	tfgld008.subl = 0
	selectdo
		if tfgld008.inta = tcyesno.yes then			
			select tfgld048.jouv
			from	tfgld048
			where	tfgld048._index1 = {:tfgld008.leac}
			and	tfgld048.jouv = tcyesno.yes
			selectdo
			selectempty
				dal.set.error.message("Integration account is blocked for manual posting")
				return(DALHOOKERROR)
			endselect
		endif

		if tfgld008.ifas <> tfgld.ifas.not.applicable then
			dal.set.error.message("Fixed Asset should not ne applicable for the Ledger Account")
			return(DALHOOKERROR)
		endif
		
		if tfgld008.iprj <> tfgld.intr.not.applicable then
			dal.set.error.message("Operation Management Integration should not be applicable for the Ledger Account")
			return(DALHOOKERROR)
		endif
		
		if tfgld008.bloc <> tfgld.bloc.free then
			dal.set.error.message("Ledger should be free")
			return(DALHOOKERROR)
		endif
		
	selectempty
		dal.set.error.message("Ledger Account Not Found or Not Of Sub Level Zero")
		return(DALHOOKERROR)
	endselect
	
	return(0)
}
