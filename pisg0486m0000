|******************************************************************************
|* tdisg0486m000  0  VRC B61U a7 live
|* PO Approval Details
|* Installation user             
|* 2014-12-11
|******************************************************************************
|* Main table tdisg086 Purchase Order Approval History, Form Type 4
|******************************************************************************
|* IDENT ISGEC01060, Mani sharma ,Dt. 25-06-2015 , VRC B61U a7 isgkh
|* Calculate PO Value revision wise
|****************************** declaration section ***************************
declaration:

	table	ttdisg086 | Purchase Order Approval History
	table	ttdisg087
	table	ttdisg085
	table   ttdpur400
	table   ttdpur401
	table   ttcmcs052
	|*************** Form Variables ******************
	extern	domain	tccprj		cprj.f
	extern	domain	tccprj		cprj.t
	extern	domain	tcorno		orno.f    fixed
	extern	domain	tcorno		orno.t    fixed
	extern	domain	tcdate		date.f
	extern	domain	tcdate		date.t
	extern	domain	tclogn		user.f
	extern	domain	tclogn		user.t
	
	|*************** File Handling Variables *******************
	string		str(300), err.file(100), file.name(100), line3(3000), line4(3000)
	long		ret2, stat.fp
	
	|******************* Script Variables ***************
	extern	domain	tcdate		v.date.f
	extern	domain	tcdate		v.date.t
	extern	domain	tcemno		scr.buyr	
	extern	domain	tcnama		scr.bynm	
	extern	domain	tcdate		scr.odat	
	extern	domain	tdpur.hdst	scr.hdst	
	extern	domain	tcdate		scr.ddta	
	extern	domain	tcamnt		scr.oexc	|Excise Value
	extern	domain	tcamnt		scr.osrv	|Service Tax
	extern	domain	tcamnt		scr.ocst	|CST/VAT
	extern	domain	tcamnt		scr.ostx	|S.Tax
	extern	domain	tcamnt		scr.olct	|LC Value
	extern	domain	tcamnt		scr.ogrs
	
	|************** File Utilization Variables ******************
	extern	domain	tcorno		rep.orno				|1
	extern	domain	tcsern		rep.revi				|2				
	extern	domain	tccom.bpid	rep.suno				|3				
	extern	domain	tcnama		rep.snnm				|4				
	extern	domain	tccprj		rep.cprj				|5				
	extern	domain	tcdsca		rep.pjdc				|6				
	extern	domain	tcamnt		rep.obsc				|7				
	extern	domain	tcnama		rep.apby				|8				
	extern	domain	tcmcs.str16	rep.apdt				|9				
	extern	string			rep.rema(2048)				|10
	extern  domain tcsern          ex.vrsn							|ISGEC01060.n
|*************** Include **************
#include<bic_desktop>
|****************************** program section ********************************


|****************************** group section **********************************
group.1:
init.group:
	get.screen.defaults()

|****************************** choice section ********************************
choice.cont.process:
on.choice:
	generate.file()

|****************************** field section *********************************
field.cprj.f:
when.field.changes:
	cprj.t = cprj.f
	
field.orno.f:
when.field.changes:
	orno.t = orno.f	
	
before.zoom:
	str = "tdpur400.orno in ("
	str = str & "select tdpur401.orno from tdpur401 where tdpur401._index5 inrange '" &cprj.f&"' and '"&cprj.t&"')"
	query.extend.where.in.zoom(str)
	
field.orno.t:
before.zoom:
	str = "tdpur400.orno in ("
	str = str & "select tdpur401.orno from tdpur401 where tdpur401._index5 inrange '" &cprj.f&"' and '"&cprj.t&"')"
	query.extend.where.in.zoom(str)

field.user.f:
when.field.changes:
	user.t = user.f

field.date.f:
when.field.changes:
	date.t = date.f


|****************************** function section ******************************

functions:

function generate.file()
{
	open.file()
	generate.header()
	read.main.table()
	close.file()
}

function read.main.table()
{
	get.date.utc(date.f, 00, 00, 00, v.date.f)
	get.date.utc(date.t, 23, 59, 59, v.date.t)
	
	select	tdpur401.orno, tdisg086.*
	from	tdpur401, tdisg086
	where	tdpur401._index5 inrange {:cprj.f}	and {:cprj.t}
	and	tdpur401._index1 inrange {:orno.f, 1}	and {:orno.t, 1}
	and	tdpur401.oltp in (tdgen.oltp.orderline, tdgen.oltp.total)
	and	tdisg086.orno = tdpur401.orno
	and	tdisg086.date inrange :v.date.f	and	:v.date.t
	and	tdisg086.user inrange :user.f	and	:user.t
	selectdo
		Initialize_Variables()
		Init_Variables_PODetails()
		rep.orno = tdisg086.orno
		rep.revi = tdisg086.revi
		rep.apdt = sprintf$("%u(%02m/%02d/%04Y) %U(%02H%x%02m%x%02s)", tdisg086.date, tdisg086.date)
		rep.apby = Get_Login_Name(tdisg086.user)
| 		tdisg.dll0002.Get_PO_Details(tdisg086.orno, tdisg086.revi,					|ISGEC01060.o
		tdisg.Get_PO_Details(tdisg086.orno, tdisg086.revi,						|ISGEC01060.n
				rep.suno,	
				rep.snnm,	
				scr.buyr,	
				scr.bynm,	
				scr.odat,	
				scr.hdst,	
				scr.ddta,	
				rep.cprj,	
				rep.pjdc,	
				rep.obsc,	|Basic Value	
				scr.oexc,	|Excise Value
				scr.osrv,	|Service Tax
				scr.ocst,	|CST/VAT
				scr.ostx,	|S.Tax
				scr.olct,	|LC Value
				scr.ogrs	|Gross Value
				)
		select	tdisg087.rema, tdisg085.desc
		from	tdisg087, tdisg085
		where	tdisg087._index1 = {:tdisg086.orno, :tdisg086.revi, :tdisg086.date}
		and	tdisg087.reas refers to tdisg085 Unref Clear
		selectdo
			if	isspace(rep.rema)	then
				if	isspace(tdisg085.desc)	then
					rep.rema = trim$(tdisg087.rema)
				else
					if	isspace(tdisg087.rema)	then
						rep.rema = trim$(tdisg085.desc)
					else	
						rep.rema = trim$(tdisg085.desc) & "," & trim$(tdisg087.rema)
					endif
				endif	
			else	
				if	isspace(tdisg085.desc)	then
					rep.rema = trim$(rep.rema) & "," & trim$(tdisg087.rema)
				else	
					if	isspace(tdisg087.rema)	then
						rep.rema = trim$(rep.rema) & "," & trim$(tdisg085.desc)
					else	
						rep.rema = trim$(rep.rema) & "," & trim$(tdisg085.desc) & "," & trim$(tdisg087.rema)
					endif
				endif	
			endif
		endselect
		print.detail()	
	endselect	
}

function domain tcnama	Get_Login_Name
				(
				domain	tclogn	i.logn
				)
{
	domain	tcnama	lg_name
	
	lg_name = ""
	select	lg_tccom001.nama:lg_name
	from	tccom001 lg_tccom001
	where	lg_tccom001._index4 = {:i.logn}
	selectdo
	endselect
	
	return(lg_name)
}

function Init_Variables_PODetails()
{
	scr.buyr = ""	
	scr.bynm = ""	
	scr.odat = 0	
	scr.hdst = empty	
	scr.ddta = 0	
	scr.oexc = 0	|Excise Value
	scr.osrv = 0	|Service Tax
	scr.ocst = 0	|CST/VAT
	scr.ostx = 0	|S.Tax
	scr.olct = 0	|LC Value
	scr.ogrs = 0
	ex.vrsn = 0
}

function	generate.header()
{
	line4 =	concat$("	",
		sprintf$("PO Number"),					|1		
		sprintf$("Revision No."),				|2		
		sprintf$("Supplier Code"),				|3		
		sprintf$("Supplier Name"),				|4		
		sprintf$("Project"),					|5		
		sprintf$("Description"),				|6		
		sprintf$("PO Basic Value"),				|7		
		sprintf$("Approved by User"),				|8		
		sprintf$("Approval Date & Time"),			|9		
		sprintf$("Remarks(text)"))				|10		
		
		
	line4 = strip$(shiftl$(line4))		
	seq.puts(line4, stat.fp)	
}

function	print.detail()
{	
	line3 =	concat$("	",
		sprintf$("%s", rep.orno),				|1
		sprintf$("%d", rep.revi),				|2				
		sprintf$("%s", rep.suno),				|3				
		sprintf$("%s", rep.snnm),				|4				
		sprintf$("%s", rep.cprj),				|5				
		sprintf$("%s", rep.pjdc),				|6				
		sprintf$("%f", rep.obsc),				|7				
		sprintf$("%s", rep.apby),				|8				
		sprintf$("%s", rep.apdt),				|9				
		sprintf$("%s", rep.rema))				|10				
	
		line3 = strip$(shiftl$(line3))
		seq.puts(line3, stat.fp)
}

function	Initialize_Variables()
{	
	rep.orno = ""				|1
	rep.revi = 0				|2				
	rep.suno = ""				|3				
	rep.snnm = ""				|4				
	rep.cprj = ""				|5				
	rep.pjdc = ""				|6				
	rep.obsc = 0				|7				
	rep.apby = ""				|8				
	rep.apdt = ""				|9				
	rep.rema = ""				|10				
	
}

function get.date.utc(
		domain	tcdate	i.date,
		long		i.hh,
		long		i.mn,
		long		i.ss,
	ref	domain	tcdate	o.date
			)
{
	long	dd, mm, yy, hh, mn, ss
	
	utc.to.date(i.date, yy , mm, dd, hh, mn, ss)
	o.date = date.to.utc(yy, mm, dd, i.hh, i.mn, i.ss)
	if	o.date < 0	then
		o.date = 0
	endif
}	

function open.file()
{
	err.file = bse.tmp.dir$() & str$(utc.num()) & ".xls"
	
	file.name = "c:\temp\" & str$(utc.num())  & ".xls"
	
	stat.fp = seq.open(err.file, "w+")
	if stat.fp >0 then
 		seq.seek(0, 0, stat.fp)
	endif
}

function close.file()
{
	seq.close(stat.fp)
	ret2 = server2client(err.file,file.name,1)
	ret2 = app_start(file.name,"c:","","","")
}


function extern tdisg.Get_PO_Details(									|ISGEC01060.sn
			domain	tcorno		in.orno,
			domain	tcsern		in.vrsn,
		ref	domain	tccom.bpid	ot.suno,	
		ref	domain	tcnama		ot.snnm,	
		ref	domain	tcemno		ot.buyr,	
		ref	domain	tcnama		ot.bynm,	
		ref	domain	tcdate		ot.odat,	
		ref	domain	tdpur.hdst	ot.hdst,	
		ref	domain	tcdate		ot.ddta,	
		ref	domain	tccprj		ot.cprj,	
		ref	domain	tcdsca		ot.pjdc,	
		ref	domain	tcamnt		ot.obsc,	|Basic Value	
		ref	domain	tcamnt		ot.oexc,	|Excise Value
		ref	domain	tcamnt		ot.osrv,	|Service Tax
		ref	domain	tcamnt		ot.ocst,	|CST/VAT
		ref	domain	tcamnt		ot.ostx,	|S.Tax
		ref	domain	tcamnt		ot.olct,	|LC Value
		ref	domain	tcamnt		ot.ogrs		|Gross Value
				)
{
	domain	tcbool	Highest_Version
	domain	tcqiv1	add.qty
	domain	tcamnt	scr.lcst
	domain	tcamnt	scr.oprc
	domain	tcamnt	scr.oexc
	domain	tcamnt	scr.osrv
	domain	tcamnt	scr.ocst
	domain	tcamnt	scr.ostx
	
	Highest_Version = false
	ex.vrsn = 0
	ex.vrsn = in.vrsn
	
	if	tdisg.dll0002.Get_Highest_Version(in.orno) = in.vrsn	then
		Highest_Version = True
	endif
	
	select	tdpur400.*
	from	tdpur400
	where	tdpur400._index1 = {:in.orno}
	selectdo
		if	not Highest_Version then
			tdisg.dll0002.select.header.from.history(in.orno, in.vrsn)
		endif
		ot.odat = tdpur400.odat
		ot.suno = tdpur400.otbp		
		ot.snnm = tdisg.dll0002.Get_BP_Name(tdpur400.otbp)		
		ot.buyr = tdpur400.ccon		
		ot.bynm = tdisg.dll0002.Get_Emp_Name(tdpur400.ccon)		
		ot.ddta = tdpur400.ddat
		ot.hdst = tdpur400.hdst
		
		
		select	tdpur401.* ,tcmcs052.dsca 
		from	tdpur401, tcmcs052
		where	tdpur401._index1 = {:in.orno}
		and	tdpur401.oltp in (tdgen.oltp.total, tdgen.oltp.orderline)
		and	tdpur401.cprj refers to tcmcs052 unref clear
		selectdo
			scr.oprc = 0
			scr.oexc = 0
			scr.osrv = 0
			scr.ocst = 0
			scr.ostx = 0
			scr.lcst = 0
			add.qty = 0.0
			
			if	not Highest_Version then
				if	not tdisg.dll0002.select.line.from.history(in.orno,
						in.vrsn, tdpur401.pono) then
					continue
				endif
			endif
			if	isspace(ot.cprj)	then
				ot.cprj = tdpur401.cprj
				ot.pjdc = tcmcs052.dsca
			endif	
			
			if	Highest_Version	then
				add.qty = tdpur401.qoor + get.additional.qty.from.401()
			else
				add.qty = tdpur401.qoor + get.additional.qty.from.501()
			endif
			
			if	tdpur401.qoor <> 0	then
				scr.oprc = (tdpur401.oamt / tdpur401.qoor)
			else
				scr.oprc = 0
			endif	
			ot.obsc = ot.obsc + (add.qty * scr.oprc)
			tdisg.dll0002.populate.tax.amounts(scr.oexc, scr.osrv, scr.ocst, scr.ostx)
			tdisg.dll0002.Get_Landed_Cost(tdpur401.orno, tdpur401.pono, scr.lcst)
			ot.oexc = ot.oexc + scr.oexc
			ot.osrv = ot.osrv + scr.osrv
			ot.ocst = ot.ocst + scr.ocst
			ot.ostx = ot.ostx + scr.ostx
			ot.olct = ot.olct + scr.lcst
		endselect
		ot.ogrs = ot.obsc + ot.oexc + ot.osrv + ot.ocst + ot.ostx + ot.olct
	endselect
}

function domain tcqsl1	get.additional.qty.from.401()
{
	domain tcqsl1 ord.qty,app.qty,diff.qty,bac.qty
	ord.qty = 0
	app.qty = 0
	bac.qty = 0
	diff.qty = 0
	select atdpur401.qoor:ord.qty,atdpur401.qiap:app.qty,
		atdpur401.qibo:bac.qty
	from tdpur401 atdpur401
	where atdpur401._index1 = {:tdpur401.orno,:tdpur401.pono}
	and atdpur401.oltp = 1
	selectdo
		diff.qty = diff.qty + bac.qty - (ord.qty - app.qty)
	endselect
	return(diff.qty)
}

function domain tcqsl1	get.additional.qty.from.501()
{
	domain tcqsl1 ord.qty,app.qty,diff.qty,bac.qty
	ord.qty = 0
	app.qty = 0
	bac.qty = 0
	diff.qty = 0
	select atdmsl501.qoor:ord.qty,atdmsl501.qiap:app.qty,
		atdmsl501.qibo:bac.qty
	from tdmsl501 atdmsl501
	where atdmsl501._index1 = {:tdpur401.orno,:ex.vrsn, :tdpur401.pono}
	and atdmsl501.oltp = 1
	selectdo
		diff.qty = diff.qty + bac.qty - (ord.qty - app.qty)
	endselect
	return(diff.qty)
}
												|ISGEC01060.en
