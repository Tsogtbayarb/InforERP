|******************************************************************************
|* tfisg155  0  VRC B61U a7 live
|* DAL2 for tfisg155
|* baan
|* 14-11-04 [11:45]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
|******************** Includes
	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

	|*************** Table declaration ******************
		table	ttfisg155

|****************************** object hooks **********************************

function extern boolean method.is.allowed(
			long		i.method)
{
	on case i.method
		case DAL_NEW:
		if not new.method.is.allowed() then
			dal.set.error.message("@Cannot insert a record.")	
			return(false)
		endif
		break
	case DAL_UPDATE:
		if not update.method.is.allowed() then
			dal.set.error.message("@Cannot modify this record.")
			return(false)
		endif
		break
	case DAL_DESTROY:
		if not destroy.method.is.allowed() then
			dal.set.error.message("@Cannot delete this record.")
			return(false)
		endif
		break
	endcase

	return(true)
}

function extern long before.open.object.set()
{
	read.parameters()
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	on case type
		case DAL_NEW :
			tfisg155.user = toupper$(logname$)
			tfisg155.rtdt = date.num()
			break
		case DAL_UPDATE:
			tfisg155.rtdt = date.num()
			break
	ENDCASE
	return(0)
}

function extern long set.object.defaults()
{
	return(0)
}

function extern long before.new.object()
{		
	return(0)
}

function extern long before.get.object()
{
	return(0)
}

function extern long after.get.object()
{
	
	return(0)
}

function long read.parameters()
{
	return(0)
}

|**** Dependencies Section ****************************************************

function void define.field.dependencies()
{
	|* Initialize field relations.
	dal.init.field.dependencies()
	
	dal.field.depends.on("tfisg155.orno", 
					HOOK_IS_DERIVED + HOOK_IS_VALID,
					"tfisg155.irno")					
	|* Add direct dependent fields.
	|* Please keep the fields in alphabetical order.

	dal.finalize.field.dependencies()
}

function boolean new.method.is.allowed()
{
	return(true)
}

function boolean update.method.is.allowed()
{
	return(true)
}
function boolean destroy.method.is.allowed()
{
			long		delete.allowed

	with.old.object.values.do(	deleting_allowed,
					delete.allowed)	|* ref
	if not delete.allowed then
		return(false)
	endif

	return(true)
}

function void deleting_allowed(
	ref		long		o.delete.allowed)
{
	o.delete.allowed = true
}

|********************* IR Number ****************
function extern boolean tfisg155.irno.is.valid(long	type)
{
	domain	tfgld.docn	t.ninv
	
	select	ir_tfacp100.ninv:t.ninv
	from	tfacp100 ir_tfacp100
	where	ir_tfacp100._index1 = {:tfisg155.irno}
	and	ir_tfacp100.stin = tfacp.stin.open
	selectdo
		return(true)
	endselect
	
	dal.set.error.message("@Select IR No. which is Received")
	return(false)
}

|********************* PO Number ****************
function extern boolean tfisg155.orno.is.derived(long	type)
{
	domain	tcorno	t.orno
	
	t.orno = ""
	select	ir_tfacp100.cdf_pono:t.orno
	from	tfacp100 ir_tfacp100
	where	ir_tfacp100._index1 = {:tfisg155.irno}
	selectdo
		tfisg155.orno = t.orno
		return(true)
	endselect
	
	return(false)
}

function extern boolean tfisg155.orno.is.valid(long	type)
{
	domain	tfgld.docn	t.ninv
	
	select	ir_tfacp100.ninv:t.ninv
	from	tfacp100 ir_tfacp100
	where	ir_tfacp100._index1 = {:tfisg155.irno}
	and	ir_tfacp100.stin = tfacp.stin.open
	and	ir_tfacp100.cdf_pono = :tfisg155.orno
	selectdo
		return(true)
	endselect
	
	dal.set.error.message("@Select PO linked with IR No.")
	return(false)
}
