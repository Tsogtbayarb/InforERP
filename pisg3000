|******************************************************************************
|* tfisg300  0  VRC B61U a7 isg 
|* DAL for BG Parameter
|* merino1
|* 26-11-15 [11:01]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
|* ID ISGEC015039 ,Ankit Sharma,25-11-2015       VRC B61U a7 isg      
|* Parameter session for BG Functionality
|******************************************************************************                                                                                
#include <bic_dal2>
	table	ttfisg300

function extern long before.open.object.set()
{
	return(0)
}


function extern long method.is.allowed(long mode)
{
	long indt
	on case mode
	case DAL_NEW:
		select tfisg300.indt:indt from  tfisg300
		as set with 1 rows
		selectdo
			return(false)
		endselect
		break
	case DAL_UPDATE:
		if tfisg300.indt <> 0 then
			return(false)
		endif
		break
	case DAL_DESTROY:
		return(false)
		break
	endcase
	return(true)
}

function extern long before.save.object(long mode)
{
	if mode = DAL_NEW then
		tfisg300.indt = 0
	endif

	if mode = DAL_UPDATE and
		tfisg300.indt <> 0 then
		|* Only datetime = 0 current records should be updated
		dal.set.error.message("Modifying historical parameter settings is not allowed.")
		|* Modifying historical parameter settings is not allowed.
		return(DALHOOKERROR)
	endif
	
	tfisg300.dsca = "Actual set defined on " & sprintf$("UTC: %u(%02d/%02m/%04Y) %U(%02h%x%02m%x%02s %a)", utc.num(), utc.num())	
	
	return(0)
}

function extern long after.save.object(long mode)
{
	domain tcdesc result
	result	=  sprintf$("UTC: %u(%02d/%02m/%04Y) %U(%02h%x%02m%x%02s %a)", utc.num(), utc.num())
	if not isspace(tfisg300.dsca) then
		tfisg300.dsca = "Actual set defined on " &  result
	endif
	tfisg300.indt = utc.num()
	db.insert(ttfisg300,db.retry)
	return(0)
}

function extern boolean tfisg300.ser1.is.valid()
{
	select tcmcs050.seri from tcmcs050
	where tcmcs050._index1 = {:tfisg300.nrgr,:tfisg300.ser1}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern boolean tfisg300.ser2.is.valid()
{
	select tcmcs050.seri from tcmcs050
	where tcmcs050._index1 = {:tfisg300.nrgr,:tfisg300.ser2}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern boolean tfisg300.ser3.is.valid()
{
	select tcmcs050.seri from tcmcs050
	where tcmcs050._index1 = {:tfisg300.nrgr,:tfisg300.ser3}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern boolean tfisg300.ser4.is.valid()
{
	select tcmcs050.seri from tcmcs050
	where tcmcs050._index1 = {:tfisg300.nrgr,:tfisg300.ser4}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern boolean tfisg300.ser5.is.valid()
{
	select tcmcs050.seri from tcmcs050
	where tcmcs050._index1 = {:tfisg300.nrgr,:tfisg300.ser5}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern boolean tfisg300.ser6.is.valid()
{
	select tcmcs050.seri from tcmcs050
	where tcmcs050._index1 = {:tfisg300.nrgr,:tfisg300.ser6}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}
