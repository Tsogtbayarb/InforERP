|******************************************************************************
|* tdpur400ue  0  VRC B61U a7 live
|* Purchase Order
|* tools1
|* 14-02-10 [07:42]
|******************************************************************************
|* Script Type: Library
|******************************************************************************
|******************************************************************************
|*
|* Script Cleaned By Sujeet Kumar 2014-06-12.
|*

|* ID #ISGECDV001038, Sujeet Kumar,		2014-09-12
|* Payment Terms Lines Population Modification
|* Functional: Mr. Nishant Verma
|*
|* IDENT ISGECDV001080, Kuldeep Sharma, 2014-10-06
|*  Block po modification for Del Terms,Pymt Terms,Buyer,Text and QAP
|*
|* ISGEC001073, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 07-10-2014
|* When status Created or Modified then changes allowed
|* ID ISGEC001082	Sujeet Kumar,		2014-10-09
|* Block Modification Header Fields are modified
|*
|* ID ISGEC001101, 	Sujeet Kumar,		2014-10-15
|* Remove PID, for PO Modification check. 
|* Functional: Mr. Nishant Verma
|*
|* ISGEC001114, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 18-10-2014
|* Skip for PID tdpur4101m700 when Header status is Modified.
|* Suggested by Mr. Nishant Verma
|*
|* ISGEC001127, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 27-10-2014
|* When PO is in modified Status and data is populated in PO Approval Table(tdmsl400)
|* then payment terms data need to be copied from previous Revision as suggested
|* by Mr. Nishant Verma
|*
|* ISGEC001134, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 29-10-2014
|* Remove some more PID, for PO Modification check as suggested by Mr. Nishant Verma  
|* 
|* ISGECDV001127,	Sujeet Kumar		2014-10-30
|* Sanction Error Report
|* Functional: Mr. Vikash Yadav
|*
|* ISGEC001145,		Sujeet Kumar,		2014-11-03
|* PO amount change in History [tdmsl501]
|* Functional: Mr. Nishant Verma
|*
|* ISGEC01025,Mani sharma , 2014-01-17,add two extra session to not allow modification
|*
|* ISGEC001143, Ankit Sharma,IT0302, 28-01-2015,B61U a7 isg 
|* Updation of Purchase order in table Buy from business partner(tccom120)
|*
|* ISGEC001149, IT0352, Abhishek Singh , 16/02/2015
|* Email Alert while PO creation if buy from BP country is other than IND
|*
|* ISGEC01064, IT0289, Shilpa Janardanan, 23/02/2015
|* Workflow getting initiated on changing LD date
|*
|* ID PATCH001031,	Sujeet Kumar, 	2015-03-17
|* If Buy-from BP Type is One Type BP Then Only One Order Can be Placed 
|* by that Business Partner.
|* Comment the Customization Part: ISGEC001143.
|*
|* PATCH001047, Dharmendra, 25-03-2015

|* ISEC015001, Shilpa Janardanan, 20/04/2015
|* Updating amount in Sanction Control lines(tpisg017)

|* ISEC015005, Shilpa Janardanan, 14/05/2015
|* Modification not allowed in BP if revision is greater than 0
|*
|* ISGEC01104, Ritu Shrivastava, 11/06/2015
|* Modification to create new version when modify purchase order
|*
|* ID ISGEC015084, Manish Manchanda, 2016-02-05
|* check of QAP Applicability
|*
|* ID: ISGEC017006, IT0386, Saurabh Dubey, 02 May 2017, VRC B61U a7 isg 
|* Isgec Onsite Deployment
|*
|* ID: ISGEC0166,IT0479,Anadi Shankar,21-06-2018, VRC B61U a7 isg 
|* Insertion Of Data On Table "tpisg229" and "tpisg230".
|*
|* ID: ISGEC01187, Bharti Garg, 23-04-2019
|* added a logic 
|*
|* ID: ISGEC01197, Gokul Chaurasia, 13-08-2019, VRC B61U a7 isg
|* Update Tax details from Receipt Lines(T-66697)
|******************************************************************************
	table	ttdmsl400
	table	ttpisg012
	table	ttcisg001 | Maintain Terms of Payment by Purchase Order
	table	ttdpur400 | Purchase Orders
	table 	ttcisg002 | Extension to Payment terms
	table 	ttcmcs014 | Payment Schedule
	table 	ttpisg006 | Payment Term Components 
	table 	ttdpur401 | PO Lines
	table	ttcmcs221
	table	ttcmcs013
	table	ttdpur414
	table	ttpptc101
	table	ttpmsl000
	table	ttccom120							|#ISGEC001143.n
	table	ttdmsl501		|ISGEC01064.n
	table	ttdmsl503
	table	ttccom100					|# PATCH001047.n	
	table	ttctax400
	table	ttpisg229
	table	ttpisg235
	table	ttpisg230
	table	ttcibd001
	table	ttpisg230
	table	ttpisg235
	table	ttdisg002
	table	ttfacp203
	table	tdmisg140
	table	tdmisg002
	table	ttpisg220
	table	ttdmsl500
	table	ttpisg239
	table	ttdpur402
	table	ttdpur201
	table	ttdisg461
	table	ttcmcs008
	table	ttcemm170
		
		extern	domain tdpur.hdst	hold.hdst
		extern	domain	tccpay		hold.cpay
							|#ISGECDV001080.sn
		extern	domain	tccdec		hold.cdec
		extern	domain	tctxtn		hold.txta
		extern	domain	tctxtn		hold.txtb
		extern	domain	tcemno		hold.ccon
		string	hold.qap(30),cdf.qap(30)
		extern	domain	tcdate		hold.qdat,cdf.qdat
							|#ISGECDV001080.sn
							
							|#ISGEC001082.sn
		extern	domain	tcdate	hold.ddat
		extern	domain	tcdate	hold.ddtc
		extern	domain	tcamnt	hold.onlr
		extern	domain	tcrefc	hold.sorn
							|#ISGEC001082.en	

					|#ISGEC001149.sn
		
                #include               <bic_cmf>
                #pragma used dll ottdllbw 
		#include <bic_text>
		table	ttccom001
		table	tbpmdm001
		table	ttccom100
		table	ttccom130
					|#ISGEC001149.en

		string calling.prog(13), result(80)
		domain tcdate	i.cdf_ldat			|ISGEC01064.n
		domain tcpono		record_change,max_version1	|ISGEC01064.n
		domain	tcmcs.str100	approver.remarks(1)		|# PATCH001047.n
		domain	dmdoc.revv	var.revi
		domain	tccom.bpid	hold.otbp		|#ISEC015005.n
		domain	tccuni		iref.cuni
		 	boolean		EXTENSION.MAINTAINED.IN.ALL.LINES	|#ISGEC017006.n
		 	boolean		DISCREPANCY.EXISTS.IN.PO.LINE.EXTENSION	|#ISGEC017006.n
		domain	tcdate		var.trdt			|#Anadi.sn 31-05-2018 
		domain	tcmcs.str50	var.bohd, var.iref
		domain	tcmcs.s200u	iref.230
		domain	tcmcs.str100	var.indv			|#Anadi.en 31-05-2018 
		domain	tcqsl1		var.qnty, sum.qnty
		domain	tcqiv1		v.wght
		domain	tcmcs.long	v.count,v.dsno, var.sern, pos1, pos2
		long			srno, flag, var.pono
		domain	tcemno		user
		domain tcorno		orno	|#Anadi.n 31-07-2018
		string str.vrsn(10),check.var.pono(10)
		domain	tcamnt		var.perc, v.count1, var.perc1, tot.wght
		string	error.msg(512)		|CR-485
#include <bic_dal>
#include "itdisgdll0003"

function extern long ue.before.before.save.object(long mode)
{

	domain	tdpur.hdst		o.hdst
	domain tcpono 		max_version
	domain	tdmsl.work	work_flow_status
	long ret
	
	
	

	on case mode
	case DAL_NEW:
								|# PATCH001047.sn
		select	tccom100.txta
		from	tccom100
		where	tccom100._index1 = {:tdpur400.otbp}
		selectdo
		endselect
		
		if tccom100.txta > 0 then
			ret = text.to.buf("tccom100.txta", language$, 1, approver.remarks)			
			dal.set.error.message("tdisg1111.001", approver.remarks)
			show.dal.messages()
		endif	
								|# PATCH001047.en
						|#ISGEC017006.sn				
		if not tax.classification.maintained() and GST.IMPLEMENTED() then
			dal.set.error.message("@Please Maintain Supplier GSTIN Category and Corresponding GSTIN Registration No.")
		endif
						|#ISGEC017006.en
		break
	case DAL_UPDATE:
		tdisgdll0400.Purchase_Order_ION_Tracking(tdpur400.orno,max_version,work_flow_status)
		max_version1= max_version		|temp1
		if work_flow_status = tdmsl.work.yes then				
			|* Work Flow Initiated,Modification not Allowed
			dal.set.error.message("tdmsl4000001")
			return(DALHOOKERROR)
		endif
		with.old.object.values.do(get.old.status)
		if these.field.changed() then
			dal.set.error.message("@modification not allowed")
			return(DALHOOKERROR)
		endif
		if hold.cpay <> tdpur400.cpay then
			select max(tdmsl400.vrsn):max_version
			from tdmsl400
			where tdmsl400._index1 = {:tdpur400.orno}
			selectdo
			endselect
			select tcisg001.*
			from	tcisg001 for update
			where	tcisg001._index1 = {:tdpur400.orno,:max_version}
			selectdo
				db.delete(ttcisg001,db.retry,e)
			endselect

			if	tdisgdll0400.insert_tcisg001(max_version) then
				return(DALHOOKERROR)
			endif
		endif
						|#ISGEC017006.sn				
		if not tax.classification.maintained() and GST.IMPLEMENTED() then
			dal.set.error.message("@Please Maintain Supplier GSTIN Category and Corresponding GSTIN Registration No.")
		endif
						|#ISGEC017006.en
									
| 		with.old.object.values.do(tdisgdll0400.order_status,tdpur400.orno,o.hdst)
| 		
| 		if o.hdst <> tdpur400.hdst then
| 			tdisgdll0400.get.lines.project.element(tdpur400.orno)
| 		endif	

										|#Adarsh.09.10.2019.sn
		if hold.hdst = tdpur.hdst.created or hold.hdst = tdpur.hdst.modified then				|
			if tdpur400.hdst = tdpur.hdst.approved then	
| 				select	tcibd001.kitm
| 				from	tcibd001
| 				where	tcibd001._index1 = {:tdpur401.item}
| 				and	tcibd001.kitm = 1
| 				selectdo
| 					select	tdpur402.rqno
| 					from	tdpur402
| 					where	tdpur402._index1 = {:tdpur401.orno,:tdpur401.pono}
| 					and	tdpur402.rqno = ""
| 					and	tdpur402.rqpo = 0
| 					selectdo
| 						select	tdisg002.slct
| 						from	tdisg002
| 						where	tdisg002._index1 = {:tdpur401.orno,:tdpur401.pono}
| 						and	tdisg002.slct = 1
| 						and	tdisg002.stat = 1
| 						as set with 1 rows
| 						selectdo
| 						selectempty
| 							dal.set.error.message("@Child Item linking is mandatory in %s/%d",tdpur401.orno,tdpur401.pono)
| 							return(DALHOOKERROR)
| 						endselect
| 					selectempty
| 					endselect
| 				selectempty
| 				endselect

				select	tdisg002.slct
				from	tdisg002
				where	tdisg002._index1 = {:tdpur401.orno,:tdpur401.pono}
				and	(tdisg002.slct = 2 or tdisg002.stat = 2)
				selectdo
					dal.set.error.message("@Still unselected/unfreezed Child Items exist in %s/%d",tdpur401.orno,tdpur401.pono)
					return(DALHOOKERROR)
				selectempty
				endselect
			endif
		endif
											|#Adarsh.09.10.2019.en
		if hold.hdst = tdpur.hdst.created then				|#sanjeev 26092019#S CR-485
		if tdpur400.hdst = tdpur.hdst.approved then			
			select	tdpur401.*
			from	tdpur401
			where	tdpur401._index1 = {:tdpur400.orno}
			selectdo
				select	tdpur402.*
				from	tdpur402
				where	tdpur402._index1 = {:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb}
				selectdo
					select	tdpur201.oamt
					from	tdpur201
					where	tdpur201._index1 = {:tdpur402.rqno,:tdpur402.rqpo}
					selectdo
					selectempty
						tdpur201.oamt = 0
					endselect
					get.exchage.rate()
					if (tdpur201.oamt+get_amnt()) < (tdpur401.oamt*(tcmcs008.rate/tcmcs008.ratf)) then
						srno = srno + 1
						if isspace(error.msg) then
						error.msg = str$(srno) &". "&tdpur401.orno&"/" & str$(tdpur401.pono)&" has amount " &str$(tdpur401.oamt*(tcmcs008.rate/tcmcs008.ratf)) &" more than linked Indent" & tdpur402.rqno&"/" & str$(tdpur402.rqpo)& " Amount " & str$(tdpur201.oamt+get_amnt())& " cannot initiate workflow. "
						else
						error.msg = error.msg & str$(srno) &". "& tdpur401.orno&"/" & str$(tdpur401.pono)&" has amount " &str$(tdpur401.oamt*(tcmcs008.rate/tcmcs008.ratf)) &" more than linked Indent" & tdpur402.rqno&"/" & str$(tdpur402.rqpo)& " Amount " & str$(tdpur201.oamt+get_amnt())& " cannot initiate workflow. "
						endif
					endif
				selectempty
				endselect
			endselect
			
			if not isspace(error.msg) then
				dal.set.error.message("@%s",error.msg)
				return(DALHOOKERROR)
			endif
		endif
		endif								|#sanjeev 26092019#E - CR-485
	break							
		
	endcase
	return(0)
}

function extern long ue.after.before.save.object(long mode)
{
	domain tcpono 		max_version
	domain	tdmsl.work	work_flow_status
	domain	tdpur.hdst	current.status
	domain 	tcmcs.str8	i.cosn
	domain	tcmcs.str30	o.tccom120.cdf_rtyp			|#PATCH001031.n
	domain	tcmcs.str30	i.reqt					|#PATCH001031.n
	domain	tcamnt			o.amnt									
	domain	tdpur.hdst		o.hdst
	on case mode
	case DAL_NEW:
									|#PATCH001031.sn
		i.reqt = tdisg.dll0400.buy.from.bp.request.type(tdpur400.otbp)							
		
		if strip$(i.reqt) = strip$(enum.descr$("tcreqt",tcreqt.otbp)) then
			if not tdisg.dll0400.one.time.buy.from.bp(tdpur400.otbp,tdpur400.orno) then
				dal.set.error.message("@ One Time Business Partner ")
				return(DALHOOKERROR)
			endif
			
		endif
		
									|#PATCH001031.en
		initialize.qapa()					|#ISGEC015084.n
		break
	case DAL_UPDATE:
		tdisgdll0400.Purchase_Order_ION_Tracking(tdpur400.orno,max_version,work_flow_status)
		with.old.object.values.do(tdisgdll0400.order_status,tdpur400.orno,o.hdst)
		on case tdpur400.hdst
			
		case 	tdpur.hdst.approved:
			|* If Purchase Order Header Status get Approved
			|* Work Flow is initiated i.e., work flow status 
			|* Becomes Yes.
											|#Kuldeep.20140829.sn
				get.var(pid,"prog.name$",calling.prog)
| 				if strip$(calling.prog) =  "tdpur4101m700"  or strip$(calling.prog) =  "tdpur4122m000"  then	|#ISGEC001101.o
												|#ISGEC001101.sn
				if 	strip$(calling.prog) =  "tdpur4101m700"  or 
					strip$(calling.prog) =  "tdpur4122m000"  or
					strip$(calling.prog) =  "whinh3512m000"  or
					strip$(calling.prog) =  "whinh3112s000"  or
					strip$(calling.prog) =  "tdpur4106m000"  or
					strip$(calling.prog) =  "tfacp1110s000"  or
					strip$(calling.prog) =  "tfacp2151s000"  or
					strip$(calling.prog) =  "tfacp2544m000"  or
					strip$(calling.prog) =  "tdpur4101m700"  or
					strip$(calling.prog) =  "whinh3512m100"  or		|#ISGEC001134.n
					strip$(calling.prog) =  "whinh3530m000"  or		|#ISGEC001134.n
					strip$(calling.prog) =  "whinh3122m000"  or 
					strip$(calling.prog) =  "tdpur4106s100"  or             |ISGEC01025.sn
					strip$(calling.prog) =  "whinh3121s000" then		|ISGEC01025.en
												|#ISGEC001101.en
					
					|# Bypass ION status change when coming form back order confirm
					|# Bypass when coming from change prices and discount
				else
					|********** temp.sn *******
| 					get_old_lddate()
| 					if record_change = 0 then
| 									|#Kuldeep.20140829.en
					
| 						if tdisgdll0400.Change_Purchase_Order_ION_Tracking_Status(tdpur400.orno,	|#ISGEC01104.so		|#ISGEC010
| 							max_version,tdmsl.work.yes) then
| 							return(DALHOOKERROR)
| 						endif	
																|#ISGEC01104.eo	
					on case work_flow_status									|#ISGEC01104.sn
						case	tdmsl.work.no:
							if tdisgdll0400.Change_Purchase_Order_ION_Tracking_Status(tdpur400.orno,		|#ISGEC010
								max_version,tdmsl.work.yes) then
								return(DALHOOKERROR)
							endif	
							break
																	
						case	tdmsl.work.completed:																			
							if tdisgdll0400.Create_Purchase_Order_ION_Tracking(tdpur400.orno,		
									(max_version + 1),tdmsl.work.no,tcyesno.no) then
									return(DALHOOKERROR)
								endif
							
							break
					endcase
																|#ISGEC01104.en	
| 					endif	
				endif							|#Kuldeep.20140829.n
				
							|#ISGEC017006.sn
				if GST.IMPLEMENTED() then
					check.extension.in.all.lines()
					
					if not EXTENSION.MAINTAINED.IN.ALL.LINES then 
						dal.set.error.message("@PO Line Extension Has Not Been Maintained For All Lines....")
						show.dal.messages(MSG.ALL)
						return(DALHOOKERROR)
					endif
					
					DISCREPANCY.EXISTS.IN.PO.LINE.EXTENSION = check.discrepancy.in.all.lines()
					
					if DISCREPANCY.EXISTS.IN.PO.LINE.EXTENSION then
						return(DALHOOKERROR)
					endif
					
					if bp.regn.no.not.valid() then
						return(DALHOOKERROR)
					endif
				endif	
							|#ISGEC017006.en
				break
		case 	tdpur.hdst.modified:
			|* 
			on case work_flow_status
			case	tdmsl.work.completed:
											|#ISGEC001114.sn
					get.var(pid,"prog.name$",calling.prog)		
					on case trim$(calling.prog)
						case "tdpur4101m700":
						case	"whinh3512m000":
						case	"whinh3112s000":
						case	"tdpur4106m000":
						case	"tdpur4122m000":
						case	"tfacp1110s000":
						case	"tfacp2151s000":
						case	"tfacp2544m000":
						case	"whinh3122m000":
							break
						default:
											|#ISGEC001114.en
							if tdisgdll0400.Create_Purchase_Order_ION_Tracking(tdpur400.orno,
								(max_version + 1),tdmsl.work.no,tcyesno.no) then
								return(DALHOOKERROR)
| 							endif				|#ISGECDV001038.o
							else				|#ISGECDV001038.n
| 						default:				|#ISGECDV001038.o
								i.cosn = ""
								i.cosn = str$(max_version + 1)
								tdisgdll0400.CreateChangeOrderSequence(tdpur400.orno,i.cosn)
								tdpur400.cosn = i.cosn
															|#ISGEC001127.so
| 								if tdisgdll0400.insert_tcisg001(max_version + 1) then
| 									return(DALHOOKERROR)
| 								endif
| 								get_old_lddate()		|ISGEC01064.sn
| 								if record_change = 0 then								|#ISGEC001127.eo
| 															|#ISGEC001127.sn
								if	tdisgdll0400.Insert_tcisg001_Prv_Vrsn(max_version + 1) then
									return(DALHOOKERROR)
								endif
| 								endif							|#ISGEC001127.en
							endif				|#ISGECDV001038.n
					ENDCASE				|#ISGEC001114.n
				break	
			endcase
			with.old.object.values.do(get.old.status)
			if etol(hold.hdst) <> 35 and etol(tdpur400.hdst) = 35 then
											|#Kuldeep.20140829.sn
				get.var(pid,"prog.name$",calling.prog)
				
									|#ISGEC001101.sn
				on case	 strip$(calling.prog)
					case	"whinh3512m000":
					case	"whinh3112s000":
					case	"tdpur4106m000":
					case	"tdpur4122m000":
					case	"tfacp1110s000":
					case	"tfacp2151s000":
					case	"tfacp2544m000":
					case	"whinh3122m000":
					case	"tdpur4101m700":
					case	"whinh3512m100":			|#ISGEC001134.n
					case	"whinh3530m000":			|#ISGEC001134.n	
					case	"whinh3121s000":			|#ISGEC001134.n	
						break
					default:
						if strip$(calling.prog) <> "tdisg4200m000" then
							dal.set.error.message("@ PO Modification not allowed")
							return(DALHOOKERROR)
						endif
					
				endcase
									|#ISGEC001101.en
									|#ISGEC001101.so
				
| 				if strip$(calling.prog) =  "whinh3512m000" or strip$(calling.prog) =  "tdpur4106m000" 
| 					or strip$(calling.prog) =  "tdpur4122m000"  then
| 					|*** By pass modified if coming from receipt whinh3512m000/tdpur4106m000
| 					|# By pass when coming from change prices and discount
| 				else
| 											|#Kuldeep.20140829.en
| 					get.var(pid,"calling.prog",calling.prog)
| 					if strip$(calling.prog) <> "tdisg4200m000" then
| 						dal.set.error.message("@modification not allowed")
| 						return(DALHOOKERROR)
| 					endif
| 				endif							|#Kuldeep.20140829.n
				
									|#ISGEC001101.eo
			endif
			
			break	
		case	tdpur.hdst.cancelled:
			cancel.all.po.line(tdpur400.orno)
			break
		endcase
		

		on case o.hdst
			case	tdpur.hdst.modified:
				on case tdpur400.hdst
					case 	tdpur.hdst.sent:
					case	tdpur.hdst.in.process:		|#ISGEC001101.n
											|#ISGEC001114.sn
					get.var(pid,"prog.name$",calling.prog)		
					on case trim$(calling.prog)
						case "tdpur4101m700":
						case	"whinh3512m000":
						case	"whinh3112s000":
						case	"tdpur4106m000":
						case	"tdpur4122m000":
						case	"tfacp1110s000":
						case	"tfacp2151s000":
						case	"tfacp2544m000":
						case	"whinh3122m000":
						case	"whisg3110m000":			|#ISGEC01197.n
							break
						default:
											|#ISGEC001114.en
| 							if tdisgdll0400.Change_Purchase_Order_ION_Tracking_Status(tdpur400.orno,	|#ISGEC01104.so
| 									max_version,tdmsl.work.yes) then
| 								return(DALHOOKERROR)
| 							endif										|#ISGEC01104.eo
							
							on case work_flow_status									|#ISGEC01104.sn
							case	tdmsl.work.no:
								if tdisgdll0400.Change_Purchase_Order_ION_Tracking_Status(tdpur400.orno,		|#ISGEC010
									max_version,tdmsl.work.yes) then
									return(DALHOOKERROR)
								endif
								break
																		
							case	tdmsl.work.completed:																			
								if tdisgdll0400.Create_Purchase_Order_ION_Tracking(tdpur400.orno,		
										(max_version + 1),tdmsl.work.no,tcyesno.no) then
										return(DALHOOKERROR)
									endif
								
								break
							endcase									|#ISGEC01104.en
					
					ENDCASE			|#ISGEC001114.n		
					break
									|#ISGEC001145.sn
					case	tdpur.hdst.approved:
						if tdmsl.dll0500.insert.history.0(tdpur400.orno,max_version) <> 0 then
							return(DALHOOKERROR)
						endif
					break
									|#ISGEC001145.en
				endcase
				
			break
			case	tdpur.hdst.created:
				on case tdpur400.hdst
					case	tdpur.hdst.approved:
						if check.bill.of.manterial(tdpur400.orno) then
							dal.set.error.message("@ Kindly Maintain Bill of Material Lines")
							return(DALHOOKERROR)
						endif
					
						if tdmsl.dll0500.insert.history.0(tdpur400.orno,0) <> 0 then
							return(DALHOOKERROR)
						endif
					break	
				endcase
			break
				
		endcase
								|#ISGEC015084.sn
		get.var(pid,"prog.name$",calling.prog)						
		if 	strip$(calling.prog)	<>  "tdpur2201m000"	then						
			if	not	check.qap.applicability()	then						
				dal.set.error.message("@QAP Data not maintained.")
				return(1)	
			endif
			if	check.qap.data()	then
				dal.set.error.message("@Please delete the QAP data.")
				return(1)
			endif
		endif
								|#ISGEC015084.en

	endcase
	
	
	return(0)
}

function extern long ue.before.after.save.object(long mode)
{
	domain tcpono 		max_version
	domain	tdmsl.work	work_flow_status
	domain	tdpur.hdst		o.hdst
	on case mode
	case DAL_NEW:
		if tdisgdll0400.Create_Purchase_Order_ION_Tracking(tdpur400.orno,0,
					tdmsl.work.no,tcyesno.no) then
			return(DALHOOKERROR)
		else
			|* Insert Payment Terms Records
			if  tdisgdll0400.insert_tcisg001((0)) then					
				return(DALHOOKERROR)
			endif
		endif
	break										
endcase


	return(0)
}

function extern long ue.after.after.save.object(long mode)
{
	domain	tfgld.sess		i.sess					|#Atul.23.11.2018.n
	
	domain	tdmsl.work		work_flow_status
	domain	tcpono			max_version
	
	domain	tdpur.hdst		o.hdst
	domain	tcorno	o.vers	|ISEC015001.n
	on case mode
	case DAL_NEW:
| 										|#PATCH001031.so
| 		select	tccom120.cdf_cprj						|#ISGEC001143.sn
| 		from	tccom120 for update
| 		where	tccom120._index1 = {:tdpur400.otbp}
| 		selectdo
| 			put.var(pid,"tccom120.cdf_cprj",tdpur400.orno)
| 			db.update(ttccom120,db.retry)	
| 		endselect								|#ISGEC001143.en	
										|#ISGEC001031.eo
		
		| if buy_from_bp_country() then						|* ISGEC001149.sn
			| if send.email.alert() <> 0 then
				| return(DALHOOKERROR)
			| endif
		| endif									|* ISGEC001149.en
		
	
		break
	case DAL_UPDATE:
		
		on case tdpur400.hdst
			case 	tdpur.hdst.created:
			case	tdpur.hdst.modified:
				select max(tdmsl400.vrsn):max_version
				from tdmsl400
				where tdmsl400._index1 = {:tdpur400.orno}
				selectdo
				endselect
				
| 				select	max(tcisg001.vrsn):max_version
| 				from 	tcisg001
| 				where	tcisg001._index1 = {:tdpur400.orno}
| 				selectdo
| 				endselect
				
| 				select tcisg001.*
| 				from	tcisg001 for update
| 				where	tcisg001._index1 = {:tdpur400.orno}
| 				and	tcisg001.vrsn = :max_version
| 				selectdo
| 					db.delete(ttcisg001,db.retry,e)
| 				endselect
				
				if	tdisgdll0400.insert_tcisg001(max_version) then
					return(DALHOOKERROR)
				endif
			break		
		endcase
		
		break
	endcase
	
	if	tdpur400.hdst = tdpur.hdst.approved	then
		tdisgdll0400.sanction.error.report(tdpur400.orno)		|#ISGECDV001127.n
		| 		if not isspace(tdpur401.cprj) and not isspace(tdpur401.cspa) then			|#ISEC015001.sn
			|Get Project Version
			if not tpisgdll0012.check_sanction_status(tdpur401.cprj,o.vers) then
				|Update Sanction Amount
				tpisgdll0012.SanctionControlLine(tdpur401.cprj,o.vers,tdpur401.cspa)
				tpisgdll0011.insert.sanction.order.relation(
							tdpur401.cprj,
							o.vers,
							tdpur401.cspa,
							tdisg.item.order,
							tdpur401.orno,
							tdpur401.pono,
							tdpur401.oamt)
			endif
| 		endif	
	endif	
	
	tcmcs.dll0095.read.parm("tpmsl000")
	if tpmsl000.orno = tcyesno.yes then
		if tdpur400.hdst = tdpur.hdst.approved then
			if tdisgdll0400.get.lines.project.element(tdpur400.orno,false) then
				return(DALHOOKERROR)
			endif
		endif
	endif
	
	if tdisgdll0400.get.lines.project.element(tdpur400.orno,true) then
		return(DALHOOKERROR)
	endif
	
	
	i.sess = ""								
	get.var(pid,"prog.name$",i.sess)				
	if i.sess = "tdpur4100m900" then				|#Atul.23.11.2018.en
		if	tdpur400.hdst = tdpur.hdst.approved	then
			update.progress.update.transaction()		|#Anadi
			update_pmdl()
			|update_strt_date_in_proj_act_mastr()		|commented by Veena on 01-04-2019
		endif
		
		if	tdpur400.hdst = tdpur.hdst.cancelled	then			|#ISGEC01100.sn
			DeleteDatesFromPMDL()
		endif
											|#ISGEC01100.en
	endif								|#Atul.23.11.2018.n		

	
	return(0)
}

function extern long ue.before.before.destroy.object()
{
	
	tdisgdll0400.get.lines.project.element(tdpur400.orno,true)
	return(0)
}

function extern long ue.after.before.destroy.object()
{
	return(0)
}

function extern long ue.before.after.destroy.object()
{
	return(0)
}

function extern long ue.after.after.destroy.object()
{
	return(0)
}


function get.old.status()
{
					
	hold.hdst = tdpur400.hdst
	hold.cpay = tdpur400.cpay
					|#ISGECDV001080.sn
	hold.cdec = tdpur400.cdec
	hold.txta = tdpur400.txta
	hold.txtb = tdpur400.txtb
	hold.ccon = tdpur400.ccon
	hold.otbp = tdpur400.otbp	|#ISGEC015005.n
	
	get.var(pid, "tdpur400.cdf_qap", hold.qap)
	get.var(pid, "tdpur400.cdf_qdat", hold.qdat)
					|#ISGECDV001080.en
					
					|#ISGEC001082.sn
	hold.ddat = tdpur400.ddat
	hold.ddtc = tdpur400.ddtc
  	get.var(pid,"tdpur400.cdf_onlr",hold.onlr)
	hold.sorn = tdpur400.sorn
	
					|#ISGEC001082.en
}

function cancel.all.po.line(domain	tcorno	i.orno)
{
	domain	tcpono		i.pono
	domain	tcitem		i.item
	domain	tccprj		i.cprj
	domain	tppdm.cspa	i.cspa
	
	select	a_tdpur401.pono:i.pono,
		a_tdpur401.item:i.item,
		a_tdpur401.cprj:i.cprj,
		a_tdpur401.cspa:i.cspa
	from	tdpur401 a_tdpur401
	where	a_tdpur401._index1 = {:i.orno}
	and	a_tdpur401.oltp in (tdgen.oltp.total, tdgen.oltp.orderline)
	selectdo
| 		tcisgdll0003.cancel.po.child.item(i.orno, i.pono, i.item,
| 						i.cprj, i.cspa)
	endselect					
}


function long check.bill.of.manterial
			(
				domain	tcorno		i.orno
			)
{
	select 	tdisg002.orno
	from	tdisg002
	where	tdisg002._index1 = {:i.orno}
	and	tdisg002.stat = tcyesno.yes
	as set with 1 rows
	selectdo
	selectempty
		if tdisgdll0001.bill_of_material() then
			return(DALHOOKERROR)
		endif
	endselect
	
	return(0)
}
						|#ISGECDV001080.sn
function boolean these.field.changed()
{
	domain	tcamnt		cdf.onlr				|#ISGEC001082.n
	select	tdmsl400.vrsn			|#ISGEC015005.sn
	from	tdmsl400
	where	tdmsl400._index1 = {:tdpur400.orno}
	and	tdmsl400.vrsn > 0 
	selectdo
		if tdpur400.otbp <> hold.otbp then
			dal.set.error.message("@Change in BP code is not allowed after the Revision 0 is Completed")
			return(DALHOOKERROR)
		endif
	endselect				|#ISGEC015005.en
	
| 	if tdpur400.hdst <> tdpur.hdst.created and tdpur400.hdst = tdpur.hdst.modified then	|#ISGEC001073.o
	if tdpur400.hdst = tdpur.hdst.created or tdpur400.hdst = tdpur.hdst.modified then	|#ISGEC001073.n
		return(false)
	endif
	get.var(pid, "tdpur400.cdf_qap", cdf.qap)
	get.var(pid, "tdpur400.cdf_qdat", cdf.qdat)
	
	get.var(pid,"tdpur400.cdf_onlr",cdf.onlr)
	if tdpur400.cpay = hold.cpay
		and tdpur400.cdec = hold.cdec
		and tdpur400.ccon = hold.ccon
		and tdpur400.txta = hold.txta
		and tdpur400.txtb = hold.txtb 
		and cdf.qap       = hold.qap 
| 		and cdf.qdat      = hold.qdat	then
		and cdf.qdat      = hold.qdat
									|#ISGEC001082.sn
		and tdpur400.ddat = hold.ddat
		and tdpur400.ddtc = hold.ddtc
		and tdpur400.sorn = hold.sorn
		and cdf.onlr	  = hold.onlr then			|#ISGEC001082.en
		
		return(false)
	endif
	
	
	return(true)
}
						|#ISGECDV001080.en

									| * ISGEC001149.sn
| function boolean buy_from_bp_country()
| {
	| select	tdpur400.otad
	| from	tdpur400
	| where	tdpur400._index1 = {:tdpur400.orno}
	| selectdo
		| select	tccom130.ccty
		| from	tccom130
		| where	tccom130._index1 = {:tdpur400.otad}
		| and	tccom130.ccty <> ""
		| selectdo
			| if strip$(shiftl$(tccom130.ccty)) = "IN" then
				| return(false)
			| else
				| return(true)
			| endif
		| endselect
	| endselect
	| return(false)
| }

| function long send.email.alert()
| {
	| string tmp.file(200),line(500)
	| long fp
	| domain tcemno	emno.code
	| domain	tfgld.user	user.code
	
	| long    message.ID
        | long    to.ID
        | long    attachment.ID
        | long    ret

        | domain ttcmf.prov service       
                        | Infor ERP Enterprise eMessage Connector service for 
                        | transporting messages
        | long stat       |Variable to hold return values
        | long mid        |CMF message id
	
	| tmp.file = creat.tmp.file$(bse.tmp.dir$())
	| fp = seq.open(tmp.file,"w+")
	| if fp <=0 then
		| dal.set.error.message("@ Temp file can not be created")
		| return(1)
	| endif

	| select	tdpur400.otbp,tdpur400.ccon
	| from	tdpur400
	| where	tdpur400._index1 = {:tdpur400.orno}
	| selectdo
	| endselect
	
	| select	tccom100.nama
	| from	tccom100
	| where	tccom100._index1 = {:tdpur400.otbp}
	| selectdo
	| endselect
	
	| select	tccom001.nama
	| from	tccom001
	| where	tccom001._index1 = {:tdpur400.ccon}
	| selectdo
	| endselect
	
	| line = ""
	| line = strip$(line) & " Please obtain the Foreign Exchange cover against Purchase Order No. " & tdpur400.orno & "placed on M/s " & tccom100.nama & chr$(13)&chr$(10)
	| seq.write(line,len(line),fp)
	
	| line = "by Buyer " & tccom001.nama & " .Request for Foreign Exchange Cover is being sent by buyer" & chr$(13)&chr$(10)
	| seq.write(line,len(line),fp)
	
	| ret = seq.close(fp)
	
	| user.code = logname$
	| select 	bpmdm001.mail,tccom001.nama 
	| from 	tccom001,bpmdm001
	| where 	tccom001._index4 = {:user.code}
	| and	tccom001.emno refers to bpmdm001
	| as set with 1 rows
	| selectdo
	| selectempty
		| bpmdm001.mail = ""
		
	| endselect
	| if isspace(bpmdm001.mail) then
		| dal.set.error.message("@ Email ID for user " & user.code & " Not maintained")
		| return(1)
	| endif		
	| ******* Email Header
        | message.ID = cmf.create()
	| line = "ALERT : PO CREATION " & tdpur400.orno 
        | ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        | ret = cmf.setSubject(message.ID,line)
	
	| ******** from ID
	| to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	| ret = cmf.setRecipientName(to.ID,tccom001.nama)
        | ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	| ret = cmf.setRecipientType(to.ID, "SMTP")
 
	| ******** to ID
	| select 	bpmdm001.mail,tccom001.nama 
	| from 	tccom001,bpmdm001
	| where 	bpmdm001._index1 = {:tdpur400.ccon}
	| and	tccom001.emno refers to bpmdm001
	| and	bpmdm001.mail <> ""
	| selectdo
		| to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
		| ret = cmf.setRecipientName(to.ID,tccom001.nama)
		| ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
		| ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
		| ret = cmf.setRecipientType(to.ID, "SMTP")
	| selectempty
		| dal.set.error.message("@ Email ID for lead buyer not maintained" )
		| return(1)
	| endselect
	
	| ********* Mail Body
	| attachment.ID = cmf.createAttachment(message.ID)
	| ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	| ret = cmf.setAttachmentMIME(attachment.ID,"text/plain")                       
	| ret = cmf.setAttachmentFileName(attachment.ID,tmp.file,"abc.txt")


	| *********  Send mail
        | if message.ID <>0 then
                | stat = cmf.startService("SMTP",2)
                | if stat<>0 then
                        | dal.set.error.message("@ Message could not be sent "&
                                | "(Infor ERP Enterprise eMessage Connector"&
                                | " service did not start)")
                        | return(1)
                | endif
                | stat = cmf.send(message.ID,"SMTP")
                | if stat<>0 then
                        | dal.set.error.message("@ Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&
                                | "service refused message)")
                        | cmf.stopService("SMTP",2)
                        | return(1)
                | endif
                | stat = cmf.stopService("SMTP",2)
        | endif
	| return(0)
| }
									| * ISGEC001149.en

| function get_old_lddate()			|ISGEC01064.sn
| {
| 	domain tcorno 		o.orno
| 	domain	tcpono		o.pono
| 	domain	tcpono		o.sqnb
| 	domain	tcsern		o.vrsn
| 	
| 	
| 	record_change = 0	
| 	select	b_tdpur401.cdf_ldat:i.cdf_ldat, b_tdpur401.orno:o.orno , b_tdpur401.pono:o.pono, 
| 		b_tdpur401.sqnb:o.sqnb
| 	from	tdpur401 b_tdpur401
| 	where	b_tdpur401._index1 = {:tdpur400.orno}
| 	selectdo
| 		select	tdmsl501.ldat.c
| 		from	tdmsl501
| 		where	tdmsl501._index1 = {:o.orno,:max_version1,:o.pono,:o.sqnb}
| 		selectdo
| 			if i.cdf_ldat <> tdmsl501.ldat.c then
| 				record_change = 1
| 			endif
| 		endselect
| 	endselect
| }	

									|#ISGEC015084.sn
function	domain	tcbool	check.qap.applicability()
{
	domain	tcyesno	v.qapa
	
	get.var(pid,"tdpur400.cdf_qapa", v.qapa)
	if	v.qapa	=	tcyesno.yes	then
		select	tdisg874.orno
		from	tdisg874
		where	tdisg874._index1	=	{:tdpur400.orno}
		selectdo
		selectempty
			return(false)
		endselect
	endif
	return(true)
}

function	domain	tcbool	check.qap.data()
{
	domain	tcyesno	v.qapa
	
	get.var(pid,"tdpur400.cdf_qapa", v.qapa)
	if	v.qapa	=	tcyesno.no	then
		select	tdisg874.orno
		from	tdisg874
		where	tdisg874._index1	=	{:tdpur400.orno}
		selectdo
			return(true)
		endselect
	endif
	return(false)
}

function	initialize.qapa()
{
	on	case	tdpur400.hdst
	case	tdpur.hdst.created:
		put.var(pid,"tdpur400.cdf_qapa",tcyesno.yes)
		break
	endcase
}
									|#ISGEC015084.en
				|#ISGEC017006.sn
function long tax.classification.maintained()
{
	select	tctax400.seqn.l
	from	tctax400
	where	tctax400._index1 = {:tdpur400.otbp}
	and	tctax400.catg.l = tctax.catg.l.gst
	selectdo
	selectempty
		return(0)
	endselect
	
	return(1)
}

function check.extension.in.all.lines()
{
	domain	tcpono	o.temp.pono
	
	EXTENSION.MAINTAINED.IN.ALL.LINES = true
	
	select	tdpur401.pono:o.temp.pono
	from	tdpur401
	where	tdpur401._index1 = {:tdpur400.orno}
	and	tdpur401.gsta.l = tcyesno.yes
	group by tdpur401.pono
	selectdo		
		select	tdmsl503.*
		from	tdmsl503
		where	tdmsl503._index1 = {:tdpur400.orno, :o.temp.pono}
		selectdo
		selectempty
			EXTENSION.MAINTAINED.IN.ALL.LINES = false
		endselect
	endselect
}

function boolean check.discrepancy.in.all.lines()
{
	domain	tcpono		o.temp.pono
	domain	tccvat		line.cvat, ext.cvat
	domain	tctax.seqn	line.gstn.c, ext.gstn.c
	domain	tcpono		line_seqn		|ISGEC01187.n

	
	
	select	tdpur401.pono:o.temp.pono
		,tdpur401.sqnb:line_seqn		|#ISGEC01187.n
	from	tdpur401
	where	tdpur401._index1 = {:tdpur400.orno}
	and	tdpur401.gsta.l = tcyesno.yes
	order by tdpur401.sqnb desc			|#ISGEC01187.n
	as set with 1 rows				|#ISGEC01187.n
| 	group by tdpur401.pono				|#ISGEC01187.o
	selectdo
		select	tdpur401.cvat:line.cvat,
			tdpur401.rnso.l:line.gstn.c
		from	tdpur401
| 		where	tdpur401._index1 = {:tdpur400.orno, :o.temp.pono}			|#ISGEC01187.o
		where	tdpur401._index1 = {:tdpur400.orno, :o.temp.pono,:line_seqn}		|#ISGEC01187.n
	
		as set with 1 rows
		selectdo
		selectempty
			line.cvat = ""
		endselect
		
		select	tdmsl503.cvat:ext.cvat,
			tdmsl503.gstn.c:ext.gstn.c
		from	tdmsl503
		where	tdmsl503._index1 = {:tdpur400.orno, :o.temp.pono}
		selectdo			
			if line.cvat <> ext.cvat then
| 				dal.set.error.message("@Tax Code in PO Line Extension and PO Line has to be Same in Line %d", o.temp.pono)	
														|#ISGEC01187.o
				dal.set.error.message("@Tax Code in PO Line Extension and PO Line has to be Same in Line %d & sequence %d", o.temp.pono,line_seqn)
														|#ISGEC01187.n
				return(true)
			endif	
			
			if line.gstn.c <> ext.gstn.c then
| 				dal.set.error.message("@Own GSTIN in PO Line Extension and PO Line has to be Same in Line %d", o.temp.pono)
																|#ISGEC01187.o
				dal.set.error.message("@Own GSTIN in PO Line Extension and PO Line has to be Same in Line %d & sequence %d", o.temp.pono,line_seqn)
																|#ISGEC01187.n
				return(true)
			endif	
		endselect
	endselect
	
	return(false)
}

function long bp.regn.no.not.valid()
{
	domain	tctax.seqn.l	o.rnsb.l
	domain	tcpono		o.temp.pono
	
	select	tdpur401.rnsb.l:o.rnsb.l,
		tdpur401.pono:o.temp.pono
	from	tdpur401
	where	tdpur401._index1 = {:tdpur400.orno}
	and	tdpur401.gsta.l = tcyesno.yes
	group by tdpur401.pono, tdpur401.rnsb.l
	selectdo
		select	tctax400.cadr.l
		from	tctax400
		where	tctax400._index3 = {:o.rnsb.l}
		selectdo
		selectempty
			tctax400.cadr.l = ""
		endselect
		
		if tdpur400.otad <> tctax400.cadr.l then
			dal.set.error.message("@Supplier GSTIN Not Matching With Buy From Address..Please Correct GSTIN or Buy From Address... Line %d", o.temp.pono)
			return(1)
		endif
	endselect
	
	return(0)
}
				|#ISGEC017006.en

function update.progress.update.transaction()									|#ISGEC0166.sn
{
	long srno
	
	
| 	if tdpur400.hdst = tdpur.hdst.approved then
	if 	orno = tdpur400.orno then
	else
		select	tdpur401.pono,tdpur401.item
		from	tdpur401
		where	tdpur401._index1 = {:tdpur400.orno}
		group by tdpur401.pono,tdpur401.item  |arun.t  20-07-2019
		selectdo
			select	tcibd001.kitm
			from	tcibd001
			where	tcibd001._index1 = {:tdpur401.item}
			selectdo
			endselect
			
			if tcibd001.kitm = tckitm.purchase then
				get.revision.num()
| 				check.vrsn()
| 				check.pono()
				
				if tdpur401.pono < 10 then
					check.var.pono = string.set$("0",1) & str$(tdpur401.pono)
				else
					check.var.pono = str$(tdpur401.pono)
				endif
				
				if tdmsl400.vrsn < 10 then
					str.vrsn = string.set$("0",1) & str$(tdmsl400.vrsn)
				else
					str.vrsn = str$(tdmsl400.vrsn)
				endif
				
				var.trdt = utc.num()
				var.bohd = "CT_POSENTFORAPPROVAL"
				var.indv = tdpur400.orno &"_"& check.var.pono &"_"& str.vrsn
				srno = 1
				
				get.project.element()
				
				user = logname$
				if user(1;1) = "0" then
					user = str$(lval(user))
				endif
				
				select tpisg229.*
				from	tpisg229
				where	tpisg229._index1 = {:var.trdt,:var.bohd,:var.indv,:srno}
				selectdo
				selectempty
					tpisg229.trdt = var.trdt
					tpisg229.bohd = var.bohd
					tpisg229.indv = var.indv
					tpisg229.proj = tdpur401.cprj
					tpisg229.elem = tdpur401.cspa
					tpisg229.user = toupper$(user)
					tpisg229.srno = 1
| 					tpisg229.stat = "Sent For Approval"
					db.insert(ttpisg229,db.skip.dupl,e)
					
				endselect
				
				select	count(tdisg002.docn):v.count, sum(tdisg002.wght):v.wght,
					sum(tdisg002.qnty):sum.qnty, tdisg002.docn, tdisg002.quom
				from	tdisg002 
				where	tdisg002._index1 = {:tdpur400.orno,:tdpur401.pono}
				group by tdisg002.docn, tdisg002.quom
				selectdo
|  				endselect
					select	a_dmisg140.iref:iref.230
					from	dmisg140 a_dmisg140  
					where	a_dmisg140.docn = :tdisg002.docn
					selectdo						
					endselect									
					
					select	a_tpisg232.cuni:iref.cuni
					from	tpisg232 a_tpisg232
					where	a_tpisg232.iref =:iref.230
					selectdo
					endselect
					
					
					select tpisg230.*
					from	tpisg230 
					where	tpisg230._index1 = {:var.trdt,:var.bohd,:var.indv,:srno}
					selectdo
					selectempty
						tpisg230.trdt = var.trdt
						tpisg230.bohd = var.bohd
						tpisg230.indv = var.indv
						tpisg230.srno = srno
						
						tpisg230.dsno = get.last.serial.num()
						tpisg230.proj = tdpur401.cprj
						tpisg230.elem = tdpur401.cspa
| 						tpisg230.dwno = get.docn()
						tpisg230.dwno = tdisg002.docn
						tpisg230.wght = v.wght
						tpisg230.pitc = v.count
						tpisg230.quan = sum.qnty
						tpisg230.cuni = tdisg002.quom
						tpisg230.iref = iref.230
						tpisg230.iuom = iref.cuni
						
						db.insert(ttpisg230,db.skip.dupl,e)
						srno = srno + 1
					endselect
				endselect
				
				select	tdisg002.quom,
					sum(tdisg002.qnty):var.qnty
				from	tdisg002 
				where	tdisg002._index1 = {:tdpur400.orno,:tdpur401.pono}
				group by tdisg002.quom
				selectdo
					select	tpisg235.*
					from	tpisg235
					where	tpisg235._index1 = {:var.trdt,:var.bohd,:var.indv,:srno}
					selectdo
					selectempty
						tpisg235.trdt = var.trdt
						tpisg235.bohd = var.bohd
						tpisg235.indv = var.indv
						tpisg235.srno = srno
						tpisg235.sern = get.last.unit.serial.number()
						tpisg235.cuni = tdisg002.quom
						tpisg235.qnty = var.qnty
						
						db.insert(ttpisg235,db.skip.dupl,e)
					endselect
					
				endselect
			endif
		endselect
		orno = tdpur400.orno
	endif
	
	
	
}

function get.project.element()
{

	select	tdpur401.cprj,
		tdpur401.cspa
	from	tdpur401
	where	tdpur401._index1 = {:tdpur400.orno,:tdpur401.pono}
	selectdo
	selectempty
		tdpur401.cprj = ""
		tdpur401.cspa = ""
	endselect
}


function get.revision.num()
{
	select tdmsl400.vrsn
	from	tdmsl400
	where	tdmsl400._index1 = {:tdpur400.orno}
	selectdo
	selectempty
		tdmsl400.vrsn = 0
	endselect

}

function domain tcmcs.long get.last.serial.num()
{
	select	tpisg230.dsno:v.dsno
	from	tpisg230
	order by tpisg230.dsno desc
	as set with 1 rows
	selectdo
		v.dsno = v.dsno + 1
	selectempty
		v.dsno = 1
	endselect
	
	return(v.dsno)

}

function domain tcmcs.long get.last.unit.serial.number()
{

	select	tpisg235.sern
	from	tpisg235
	order by tpisg235.sern desc
	as set with 1 rows
	selectdo
		var.sern = tpisg235.sern + 1
	selectempty
		var.sern = 0
	endselect
	
	return(var.sern)
}


function domain dmdoc.docid get.docn()
{
	select	tdisg002.docn
	from	tdisg002 
	where	tdisg002._index1 = {:tdpur400.orno,:tdpur401.pono}
	selectdo
	endselect
	
	return(tdisg002.docn)
}														|#ISGEC0166.en

function update_pmdl()											|#ISGEC01100.sn
{
	select	tdisg002.docn 
	from	tdisg002
	where	tdisg002._index1 = {:tdpur400.orno}|, :tdpur401.pono}
	group by tdisg002.docn
	selectdo
		select	dmisg140.*
		from	dmisg140 for update
		where	dmisg140.docn =:tdisg002.docn
		and	dmisg140.docn <> ""
		selectdo
			flag = 0
			dmisg140.pcdt = get.least.date()
			
			select	tpisg230.*
			from	tpisg230
			where	tpisg230.dwno = :dmisg140.docn
			and	tpisg230.bohd = "CT_POSENTFORAPPROVAL"
			order by tpisg230.trdt asc
			selectdo
				flag = 1

				v.count = 0
				v.wght = 0.00
				
				get.po.index()
				get.item.count.weight()

			endselect
			
			if flag = 1 then
				dmisg140.upct = tcyesno.yes
				
				select	tcisg001.catg
				from	tcisg001
				where	tcisg001._index1 = {:tdpur400.orno}
				and	tcisg001.catg = 1
				as set with 1 rows
				selectdo
					dmisg140.pbga = tcyesno.yes
				selectempty
					dmisg140.pbga = tcyesno.no
				endselect
				
				db.update(tdmisg140,db.retry,e)
						
				if e = 0 then
					commit.transaction()
				else
					abort.transaction()
				endif
			endif
			
			
		endselect
	endselect

}

function update_strt_date_in_proj_act_mastr()
{
	select	tdisg002.docn 
	from	tdisg002
	where	tdisg002._index1 = {:tdpur400.orno}|, :tdpur401.pono}
	group by tdisg002.docn
	selectdo
		select	tdisg002.revi 
		from	tdisg002
		where	tdisg002._index1 = {:tdpur400.orno}|, :tdpur401.pono}
		selectdo
		endselect
		
		select	dmisg140.iref,
			dmisg140.cprj
		from	dmisg140
		where 	dmisg140.docn =:tdisg002.docn
		and	dmisg140.iref <> ""
		selectdo
	
			var.iref = toupper$(dmisg140.iref)
			
			select	tpisg220.*
			from	tpisg220 for update
			where	(tpisg220.sub1 = :dmisg140.iref or tpisg220.sub1 = :var.iref)
			and	tpisg220.cprj = :dmisg140.cprj
			and	tpisg220.bohd <> ""
			and	tpisg220.bohd = "CT_POSENTFORAPPROVAL"	
			selectdo
				tpisg220.acsd = posentapproval.least.date()
				calculate.perc(tpisg220.sub1)
				
| 				If count%<100 and weight% < 100
| 				Then update the higher %
| 				Else count%
| 				Endif
| 				If %update > 100 then 100% endif
				
				if (var.perc1 > var.perc) and (var.perc1 < 100) then
					tpisg220.cpgv = var.perc1
				else
					if (var.perc >= 100) then
						tpisg220.cpgv = 100
| 						tpisg220.acfn = date.num()
					else
						tpisg220.cpgv = var.perc
					endif
				endif
				
				db.update(ttpisg220,db.retry,e)
			selectempty
				var.iref = trim$(toupper$(dmisg140.iref))
				select	tpisg220.*
				from	tpisg220 for update
				where	tpisg220.cact = :var.iref
				and	tpisg220.cprj = :dmisg140.cprj
				and	tpisg220.bohd <> ""
				and	tpisg220.bohd = "CT_POSENTFORAPPROVAL"
				selectdo
					tpisg220.acsd = posentapproval.least.date()
					calculate.perc(tpisg220.cact)
					if (var.perc1 > var.perc) and (var.perc1 < 100) then
						tpisg220.cpgv = var.perc1
					else
						if (var.perc >= 100) then
							tpisg220.cpgv = 100
| 							tpisg220.acfn = date.num()
						else
							tpisg220.cpgv = var.perc
						endif
					endif
					db.update(ttpisg220,db.retry,e)
				endselect
			endselect
			
			if e = 0 then
				commit.transaction()
			else
				abort.transaction()
			endif
		endselect
	endselect
}


function get.item.count.weight()
{
	select	count(tdisg002.docn):v.count,
		sum(tdisg002.wght):v.wght
	from	tdisg002 
	where	tdisg002._index1 = {:var.indv}
	and	tdisg002.docn =:dmisg140.docn
	selectdo
		dmisg140.pspt = v.count
		dmisg140.posw = v.wght
	endselect
}

function get.po.index()
{
	pos1 = pos(tpisg230.indv,"_")
	pos2 = len(tpisg230.indv)
	
	pos2 = pos2 -pos1
	
	var.indv = tpisg230.indv(1;pos1-1)
	var.revi = tpisg230.indv(pos1+1;pos2)
	var.revi = trim$(var.revi)
	var.pono = lval(tpisg230.indv(pos1+1;pos2))
}


function domain tcdate get.least.date()
{
	select	tpisg230.trdt
	from	tpisg230, dmisg140
	where	tpisg230.proj =:dmisg140.cprj
	and	tpisg230.dwno = dmisg140.docn
	and	tpisg230.bohd = "CT_POSENTFORAPPROVAL"
	and 	dmisg140.iref = :dmisg140.iref
	order by tpisg230.trdt asc
	as set with 1 rows
	selectdo
	selectempty
		tpisg230.trdt = 0
	endselect
	result = sprintf$("%u002 %001",tpisg230.trdt) 
	return(tpisg230.trdt)
}


function domain tcdate posentapproval.least.date()
{	
	domain	tcdate	ret.date
	
	select	dmisg140.*
	from	dmisg140  
	where	dmisg140.iref = :tpisg220.sub1
	and	dmisg140.cprj = :tpisg220.cprj
	and 	dmisg140.pcdt <> 0
	order by dmisg140.pcdt asc
	as set with 1 rows
	selectdo
	endselect
	
	if dmisg140.pcdt <> 0 then
		change.date.to.utc(dmisg140.pcdt,ret.date)
	else
		ret.date = 0
	endif
	
	return(ret.date)
	
}

function calculate.perc(domain tcmcs.st150m	i.item)
{
	long			count.adct
	domain	tcwght		sum.wght
	double			count.rec
	
	
	var.perc = 0
	var.perc1 = 0
	count.rec = 0
	tot.wght = 0
	sum.wght = 0
	i.item = trim$(i.item)
	
	|***************** First way ************
	select	count(dmisg140.iref):v.count1
	from	dmisg140
	where	dmisg140.iref =:i.item
	and	dmisg140.cprj =:tpisg220.cprj
	and	dmisg140.orgn ="ISG"
	selectdo
	endselect
	
	select	admisg140.pcdt:count.adct,
		admisg140.posw:sum.wght
	from	dmisg140 admisg140
	where	admisg140.iref =:i.item
	and	admisg140.cprj =:tpisg220.cprj
	and	admisg140.orgn ="ISG"
	selectdo
		if not check.date(count.adct) then
			count.rec = count.rec + 1
			tot.wght = tot.wght + sum.wght
		endif
	endselect
	
	if (count.rec <> 0) and (v.count1 <> 0)  then
		var.perc = (count.rec*100)/v.count1
	endif
	
	|***************** Second way ************
	select	tpisg239.pwgt,tpisg239.icls
	from	tpisg239
	where	tpisg239.cprj =:dmisg140.cprj
	and	tpisg239.iref =:i.item
	selectdo
	endselect
	
	if (tot.wght <> 0) and (tpisg239.pwgt <> 0)  then
		var.perc1 = (tot.wght*100)/tpisg239.pwgt
	endif

	if tpisg239.icls <> tpitem.class.self.engg then
		var.perc1 = 0
	endif

}

function change.date.to.utc(
			domain	tcdate	var.date,
		ref	domain	tfgld.date	ret.date)
{
	long utc  
	long yearno  
	long monthno  
	long month_dayno  
	long hours  
	long minutes  
	long seconds  
	string result(80)



	utc.to.date  (var.date, yearno,monthno,month_dayno,hours,minutes,seconds)
	ret.date = date.to.num(yearno,monthno,month_dayno)
	result = sprintf$("%D(Date: %02d/%02m/%04Y)",ret.date) 

}

function long check.date(domain tcdate	i.date)
{
	long yy,mm,dd, hrs, mins, secs, chk.dte
	
	chk.dte = 0
	
	utc.to.date(i.date,yy,mm,dd, hrs, mins, secs)
	if yy < 2000 then
		chk.dte = 1
	else
		chk.dte = 0
	endif
	
	return(chk.dte)
}

function DeleteDatesFromPMDL()											
{
	select	tdisg002.docn 
	from	tdisg002
	where	tdisg002._index1 = {:tdpur400.orno}
	group by tdisg002.docn
	selectdo
		select	dmisg140.pcdt, dmisg140.padt
		from	dmisg140	for update
		where	dmisg140.docn =:tdisg002.docn
		selectdo
			dmisg140.pcdt = 0
			dmisg140.padt = 0
			
			db.update(tdmisg140,db.retry,e)
			commit.transaction()
		endselect
	endselect

}
function domain	tcamnt get_amnt()		|#CR-485-S
{
	domain	tcamnt	amti.var
	amti.var = 0
	select	tdisg461.amti,tdisg461.reqn
	from	tdisg461,tdisg460
	where	tdisg461._index3 = {:tdpur402.rqno,:tdpur402.rqpo}
	and	tdisg460.stat = 2
	and	tdisg461.reqn refers to tdisg460
	selectdo
		amti.var = amti.var + tdisg461.amti
	endselect
	return(amti.var)
}							|#CR-485- E

function get.exchage.rate()			|CR-485-S
{
	domain tcncmp	curr.comp
	domain tcdate	curr.date
	curr.comp = get.compnr()
	curr.date = utc.num()
	
	select	tcemm170.fcua,tcemm170.expu
	from	tcemm170
	where	tcemm170._index1 = {:curr.comp}
	as set with 1 rows
	selectdo
	selectempty
		tcemm170.fcua = ""
		tcemm170.expu = ""
	endselect
	select	tcmcs008.rate,tcmcs008.ratf,tcmcs008.stdt
	from	tcmcs008
	where	tcmcs008._index1 = {:tcemm170.fcua,:tdpur400.ccur,:tdpur400.ratt}
	and	tcmcs008.stdt <= :curr.date
	and	tcmcs008.rapr = 1
	order by tcmcs008.stdt desc
	as set with 1 rows
	selectdo
	selectempty
		tcmcs008.rate = 1
		tcmcs008.ratf = 1
	endselect
	
	
}						|CR-485-E
