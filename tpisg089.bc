|******************************************************************************
|* tpisg089  0  VRC B61U a7 isg 
|* tpisg089-DAL 2
|* merino1
|* 19-03-18 [12:54]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
|* ISGEC01171, Prasanna Bhuyan, 25/3/2019, VRC B61U a7 isg
|* New Development 
|*
|* #GH121, Adarsh Pal, 27-08-2019, VRC B61u a7 isg
|* Additional logic for Outlook Amount Fields

|* RAvi Kumar, All New developed.
|* GH218CR524
|******************************************************************************
#include <bic_dal2>

	table	ttpisg089			|Contractwise Cash Flow 
	table	ttpisg189
	table	ttfisg014
	table	ttpisg088
	
function extern long before.open.object.set()
{
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	return(0)
}

function define.field.dependencies()
{
	dal.field.depends.on("tpisg089.amti", HOOK_IS_READONLY, "tpisg089.ccod", "tpisg089.rvsn")
	dal.field.depends.on("tpisg089.amto", HOOK_IS_READONLY, "tpisg089.ccod", "tpisg089.rvsn")
	dal.field.depends.on("tpisg089.oami", HOOK_IS_READONLY + HOOK_UPDATE, "tpisg089.ccod", "tpisg089.rvsn", "tpisg089.amti")
	dal.field.depends.on("tpisg089.oamo", HOOK_IS_READONLY + HOOK_UPDATE, "tpisg089.ccod", "tpisg089.rvsn", "tpisg089.amto")
	dal.field.depends.on("tpisg089.cmti", HOOK_IS_READONLY, "tpisg089.ccod", "tpisg089.rvsn",
						HOOK_UPDATE, "tpisg089.year", "tpisg089.mnth", "tpisg089.ccod")
	dal.field.depends.on("tpisg089.cmto", HOOK_IS_READONLY, "tpisg089.ccod", "tpisg089.rvsn",
						HOOK_UPDATE, "tpisg089.year", "tpisg089.mnth", "tpisg089.ccod")
	dal.field.depends.on("tpisg089.rmks", HOOK_IS_READONLY, "tpisg089.ccod", "tpisg089.rvsn")
	dal.field.depends.on("tpisg089.namt", HOOK_UPDATE, "tpisg089.amti", "tpisg089.amto")
	dal.field.depends.on("tpisg089.cnmt", HOOK_UPDATE, "tpisg089.cmti", "tpisg089.cmto")
	dal.field.depends.on("tpisg089.oamn", HOOK_UPDATE, "tpisg089.oami", "tpisg089.oamo")							
}

function extern boolean tpisg089.amti.is.readonly()
{
	
	if readonly_budget() then
		return(true)
	else
		if check_readonly_budgeted_outlook_amount() then
			return(true)
		else
			return(false)
		endif
	endif
}

function extern boolean tpisg089.amto.is.readonly()
{
	if readonly_budget() then
		return(true)
	else
		if check_readonly_budgeted_outlook_amount() then
			return(true)
		else
			return(false)
		endif
	endif
}

function extern boolean tpisg089.oami.is.readonly()
{
	if check_readonly_budgeted_outlook_amount() then
		return(true)
	else
		return(false)
	endif
}

function extern boolean tpisg089.oamo.is.readonly()
{
	if check_readonly_budgeted_outlook_amount() then
		return(true)
	else
		return(false)
	endif
}

function extern boolean tpisg089.cmti.is.readonly()
{
	if readonly_actual() then
		return(false)
	endif
	return(true)
}

function extern void tpisg089.cmti.update()
{	
	domain	tcamnt	act.inflow
	
	act.inflow = 0
	
| 	select	tpisg088.cprj
| 	from	tpisg088
| 	where	tpisg088._index1 = {:tpisg089.ccod}
| 	selectdo
		select	sum(tfisg014.iamt):act.inflow
		from	tfisg014
		where	tfisg014._index1 = {:tpisg089.year, :tpisg089.mnth, :tpisg089.ccod}
| 		as set with 1 rows
		selectdo
| 			act.inflow = act.inflow + tfisg014.iamt
		endselect
| 	endselect
	
	tpisg089.cmti = act.inflow
}


function extern void tpisg089.cmto.update()
{	
	domain	tcamnt	act.outflow
	
	act.outflow = 0
	
| 	select	tpisg088.cprj
| 	from	tpisg088
| 	where	tpisg088._index1 = {:tpisg089.ccod}
| 	selectdo
		select	sum(tfisg014.oamt):act.outflow
		from	tfisg014
		where	tfisg014._index1 = {:tpisg089.year, :tpisg089.mnth, :tpisg089.ccod}
| 		as set with 1 rows
		selectdo
| 			act.outflow = act.outflow + tfisg014.oamt
		endselect
| 	endselect
	
	tpisg089.cmto = act.outflow
}

function extern boolean tpisg089.cmto.is.readonly()
{
	if readonly_actual() then
		return(false)
	endif
	return(true)
}

function extern boolean tpisg089.amti.is.valid()
{
	if tpisg089.amti > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tpisg089.amto.is.valid()
{
	if tpisg089.amto > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tpisg089.oami.is.valid()
{
	if tpisg089.oami > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tpisg089.oamo.is.valid()
{
	if tpisg089.oamo > 0 then
		return(true)
	else
		return(false)
	endif
	
	return(true)
}

function extern boolean tpisg089.rmks.is.readonly()
{
	select	tpisg189.stat
	from	tpisg189
	where	tpisg189._index1 = {:tpisg089.ccod, :tpisg089.rvsn}
	and	(tpisg189.stat = tpisg.rvsnstat.sendforapp or tpisg189.stat = tpisg.rvsnstat.approved or tpisg189.stat = tpisg.rvsnstat.reject)
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function extern void tpisg089.oami.update(long mode)
{
	if mode = DAL_NEW then
| 		if readonly_actual() then
| 			tpisg089.oami = tpisg089.amti
| 		endif
		tpisg089.oami = 0
	endif
}

function extern void tpisg089.oamo.update(long mode)
{
	if mode = DAL_NEW then
| 		if readonly_actual() then
| 			tpisg089.oamo = tpisg089.amto
| 		endif
		tpisg089.oamo = 0
	endif
}

function extern void tpisg089.namt.update()
{
	tpisg089.namt = tpisg089.amti - tpisg089.amto
}
									
function extern void tpisg089.oamn.update()
{
	tpisg089.oamn = tpisg089.oami - tpisg089.oamo
}
								
function extern void tpisg089.cnmt.update()
{
	tpisg089.cnmt = tpisg089.cmti - tpisg089.cmto
}
						
function boolean check_readonly_budgeted_outlook_amount()
{
	string		date.result(80)
	long		mnth.num
	domain	tfgld.year	year
	domain	tpisg.month	month
	
	date.result = sprintf$("%D(%02d/%02m/%04Y)", date.num())
	year = lval(trim$(date.result(7;4)))
	mnth.num = lval(trim$(date.result(4;2)))
	month = ltoe(mnth.num)
	
	select	tpisg189.rtyp,
		tpisg189.stat
	from	tpisg189
	where	tpisg189._index1 = {:tpisg089.ccod, :tpisg089.rvsn}
	as set with 1 rows
	selectdo
		if tpisg189.rtyp = tpisg.rvsntype.complete and (tpisg189.stat = tpisg.rvsnstat.free or tpisg189.stat = tpisg.rvsnstat.reject) then
			return(false)
		else
			if (tpisg189.rtyp = tpisg.rvsntype.partial or tpisg189.rtyp = tpisg.rvsntype.launch) and (tpisg189.stat = tpisg.rvsnstat.free or tpisg189.stat = tpisg.rvsnstat.reject) then
				if year < tpisg089.year then
					return(false)
				else
					if year = tpisg089.year then
						if mnth.num > etol(tpisg089.mnth) then
							return(true)
						else
							return(false)
						endif
					else
						return(true)
					endif
				endif
			else
				return(true)
			endif
		endif
	endselect
	return(false)
}

function boolean readonly_actual()
{
	select	tpisg189.rtyp
	from	tpisg189
	where	tpisg189._index1 = {:tpisg089.ccod, :tpisg089.rvsn}
	and	tpisg189.rtyp = tpisg.rvsntype.launch
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function boolean readonly_budget()
{
	select	tpisg189.rtyp
	from	tpisg189
	where	tpisg189._index1 = {:tpisg089.ccod, :tpisg089.rvsn}
	and	tpisg189.rtyp = tpisg.rvsntype.partial
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}
