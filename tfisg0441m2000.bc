|******************************************************************************
|* tfisg0441m200  0  VRC B61U a7 live
|* Cash Flow Reconciliation
|* Paras Kukreti             
|* 2020-01-20
|******************************************************************************
|* Main table tfgld106 Finalized Transactions, Form Type 4
|******************************************************************************
                                                                                
|****************************** declaration section ***************************
declaration:

  table   ttfgld203
  table   ttfgld201
  table   ttfisg043
  table   ttcemm170

	extern	domain  tfgld.year     	fyer
	extern	domain	tfgld.prod     	fprd
	extern	domain  tcyesno		sumr
	extern	domain  tcyesno		dtld
	extern	domain  tcncmp		ncmp.f
	extern	domain  tcncmp		ncmp.t
	
		domain	tcmcs.st33	filename
		domain	tcmcs.str215	outfile
		domain	tcdate		current.date, curr.date
	
			string 		header1(1024), header(1024)
			
			string		final.str(2048)
			long		out.fp			|Output File
			long		close.out.fp
			long		ret, i
			long		yearno1, monthno1, month_dayno1, hours1, minutes1, seconds1

#include <bic_tt>
#include <bic_dam>
#pragma used dll        ottdllbw

#define DEL	  ","
|****************************** program section ********************************
before.display.object:
	if sumr = tcyesno.yes then
		disable.fields("dtld")
	else
		enable.fields("dtld")
	endif
	
	if dtld = tcyesno.yes then
		disable.fields("sumr")
	else
		enable.fields("sumr")
	endif
	
	display("sumr")
	display("dtld")

|****************************** group section **********************************

group.1:
init.group:
   get.screen.defaults()

|****************************** choice section ********************************

| choice.cont.process:
| on.choice:
|    execute(print.data)

| choice.print.data:
| on.choice:
|        read.main.table()

|****************************** field section *********************************	
field.ncmp.f:
when.field.changes:
	ncmp.t = ncmp.f

field.sumr:
when.field.changes:
	if sumr = tcyesno.yes then
		disable.fields("dtld")
	else
		enable.fields("dtld")
	endif
	display("dtld")
	
field.dtld:
when.field.changes:
	if dtld = tcyesno.yes then
		disable.fields("sumr")
	else
		enable.fields("sumr")
	endif
	display("sumr")

|****************************** function section ******************************

functions:

function extern export.excel()
{
	current.date = utc.num()

	outfile = creat.tmp.file$(bse.tmp.dir$())
	out.fp = open.ascii.file(outfile, "w")
	
	if out.fp < 1  then
		choice.again()
	else
		create.header()
		if dtld = tcyesno.yes then
			create.detailed.header()
			export.detailed.flat.file()
		endif
		if sumr = tcyesno.yes then
			create.summarize.header()
			export.summarize.flat.file()
		endif
		close.out.fp = close.ascii.file(out.fp)
		if close.out.fp <> 0  then
			message("Error in closing Input File")
			choice.again()
		endif
	endif
	
	export.output.to.excel.file()
	ret = file.rm(outfile)	
}
	
function create.summarize.header()
{
	header1 = concat$( DEL, "Company",
				"Closing Balance")
	ret = seq.puts(header1, out.fp)
}

function create.header()
{
	curr.date = utc.num()
	utc.to.date(curr.date,yearno1, monthno1, month_dayno1, hours1, minutes1, seconds1)
	
	header = concat$( DEL, "Company:" & str$(ncmp.f) & "-" & str$(ncmp.t),
				"Year-"&str$(fyer),
				"Period-"&str$(fprd))
	ret = seq.puts(header, out.fp)
	header = concat$( DEL, "Date as on:",str$(yearno1) & chr$(45) & str$(monthno1) &
				chr$(45) & str$(month_dayno1) & chr$(32) & str$(hours1) & 
				chr$(58) & str$(minutes1) & chr$(58) & str$(seconds1))
	ret = seq.puts(header, out.fp)
	header = ""
	ret = seq.puts(header, out.fp)
}

function create.detailed.header()
{
	header1 = concat$( DEL, "Company",
				"Ledger",
				"Opening Balance",
				"Debit Amount",
				"Credit Amount",
				"Balance Amount")
	ret = seq.puts(header1, out.fp)
}

function export.summarize.flat.file()
{
	domain	tcamnt	v.fobh
	domain	tcamnt	leacdbamt
	domain	tcamnt	leaccramt
	domain	tcamnt	balance
	domain	tcamnt	total.bal
	
	long 	curr.comp
	
	curr.comp = get.compnr()
	
	total.bal = 0
	
	select	tcemm170.comp
	from	tcemm170
	where	tcemm170._index1 inrange {:ncmp.f} and {:ncmp.t}
	selectdo
		balance = 0
		select	tfisg043.leac
		from	tfisg043
		where	tfisg043._compnr = 200
		selectdo
			v.fobh = 0
			leacdbamt = 0
			leaccramt = 0
	
			select	tfgld203.fobh
			from	tfgld203
			where   tfgld203._index1 = {:tcemm170.comp, :fyer, :tfisg043.leac,
						    "INR", tfgld.duac.statutory}
			and	tfgld203._compnr = :tcemm170.comp
			selectdo
				v.fobh = tfgld203.fobh(1)
			endselect

			for i = 1 to fprd
				select	tfgld201.fdah, tfgld201.fcah
				from	tfgld201
				where	tfgld201.cono = :tcemm170.comp
				and	tfgld201.ptyp = tfgld.ptyp.financial
				and	tfgld201.year = :fyer
				and	tfgld201.prno = :i
				and	tfgld201.leac = :tfisg043.leac
				and	tfgld201._compnr = :tcemm170.comp
				selectdo
					leacdbamt = leacdbamt + tfgld201.fdah(1)
					leaccramt = leaccramt + tfgld201.fcah(1)
				endselect
			endfor
			
			balance = balance + ((v.fobh + leacdbamt) - leaccramt)
		endselect
		final.str  = concat$( DEL,	strip$(str$(tcemm170.comp)),
						strip$(str$(balance)))
		write.record.to.file()
		total.bal = total.bal + balance
	endselect
	final.str  = concat$( DEL,	strip$("Total Amount"),
					strip$(str$(total.bal)))
	write.record.to.file()
}

function export.detailed.flat.file()
{
	domain	tcamnt	v.fobh
	domain	tcamnt	leacdbamt
	domain	tcamnt	leaccramt
	domain	tcamnt	balance
	
	long 	curr.comp
	
	curr.comp = get.compnr()
	
	select	tcemm170.comp
	from	tcemm170
	where	tcemm170._index1 inrange {:ncmp.f} and {:ncmp.t}
	selectdo
		select	tfisg043.leac
		from	tfisg043
		where	tfisg043._compnr = 200
		selectdo
			v.fobh = 0
			
			select	tfgld203.fobh
			from	tfgld203
			where   tfgld203._index1 = {:tcemm170.comp, :fyer, :tfisg043.leac,
						    "INR", tfgld.duac.statutory}
			and	tfgld203._compnr = :tcemm170.comp
			selectdo
				v.fobh = tfgld203.fobh(1)
			endselect
			
			leacdbamt = 0
			leaccramt = 0
			balance = 0
			
			for i = 1 to fprd
				select	tfgld201.fdah, tfgld201.fcah
				from	tfgld201
				where	tfgld201.cono = :tcemm170.comp
				and	tfgld201.ptyp = tfgld.ptyp.financial
				and	tfgld201.year = :fyer
				and	tfgld201.prno = :i
				and	tfgld201.leac = :tfisg043.leac
				and	tfgld201._compnr = :tcemm170.comp
				selectdo
					leacdbamt = leacdbamt + tfgld201.fdah(1)
					leaccramt = leaccramt + tfgld201.fcah(1)
				endselect
			endfor
			
			balance = (v.fobh + leacdbamt) - leaccramt
			
			final.str  = concat$( DEL,	strip$(str$(tcemm170.comp)),
							strip$(str$(tfisg043.leac)),
							strip$(str$(v.fobh)),
							strip$(str$(leacdbamt)),
							strip$(str$(leaccramt)),
							strip$(str$(balance)))
			write.record.to.file()
		endselect
	endselect
}

function write.record.to.file()
{
	long ret
	
	ret = seq.puts(final.str, out.fp)
}

function extern domain tcmcs.long close.ascii.file(long file.fp)
{
	domain	tcmcs.long	close.file.fp

	close.file.fp =seq.close(file.fp)
	if close.file.fp <> 0 then
		message("Error In Closing File")
		|* Error In Closing File
		return(-1)
	endif
	return(0)
}

function export.output.to.excel.file()
{
	domain	tcmcs.str20	date.time.stamp
	long 	dummy.ret, i
	long	temp.file.size
	long	file.present
	
	string	o.file.name(100)
	
	date.time.stamp = sprintf$("%u(%04Y%02m%02d)_%U(%02h%02m%02s)", current.date , current.date)
	
	filename = "Cash Flow Reconciliation_"&strip$(date.time.stamp)
	
	o.file.name = "C:\temp\" & filename
	dummy.ret = server2client(outfile,o.file.name & ".csv",true)
						
	if dummy.ret = 0 then
| 		suspend(5000)
		file.present = seq.fstat.local(o.file.name & ".csv", temp.file.size)
		if file.present < 0 then
			for i = 1 to 10
				file.present = seq.fstat.local(o.file.name & ".csv", temp.file.size)
				if file.present >= 0 then
					break
				else
| 					suspend(5000)
				endif
			endfor
		endif
		e = app_start(o.file.name & ".csv","","","","")
	endif					
}

function domain tcmcs.long open.ascii.file(domain tcmcs.str100  file.name,
					   domain tcmcs.str1    open.mode)
{
	domain	tcmcs.long	fp

	fp = seq.open(file.name, open.mode)

	if fp < 1 then
		message("Error In Opening File")
		|* Error In Opening File
		return(-1)
	endif
	return(fp)
}
	
	
