|******************************************************************************
|* dmisg1131m100  0  VRC B61U a7 isg 
|* Transmittal Approver
|* Installation user             
|* 2015-01-29
|******************************************************************************
|* Main table dmisg131 Transmittal Creation and Submission for Approval, Form Type 1
|******************************************************************************
|* ISGEC004004, IT0047, Dharmendra, Dt. 30-01-2015, B61U a7 isg
|*
|* ISGEC004011, IT0047, Dharmendra, Dt. 19-02-2015, B61U a7 isg
|*
|* ISGEC004020, IT0047, Dharmendra, Dt. 06-10-2015, B61U a7 isg
|*
|* ISGEC016019, Manish Manchanda, 2016-11-03
|* Modifications - wrong project field used for project description
|*
|*
|* ID: ISGEC01176,Bharti Garg, 03-05-2019, B61U a7 isg
|* Added a cc field in mail.
|* 
|* GH527CR868, RAvi Kumar, 25-03-2021
|* Modification in Transmittal Creation and Approval Sessions
|****************************** declaration section ***************************
declaration:
#include               <bic_cmf>
  table   tdmisg131 | Transmittal Creation and Submission for Approval
  table		ttcmcs052
    table		ttcmcs065
      table		ttccom001
      table	tdmisg031		|#ISGEC01176.n

table		ttcemm030
table		tdmisg129
table		tbpmdm001
	table	tdmisg123			|GH527CR868.a

  string	query.string(500)
						|# ISGEC004011.sn
  extern	domain tcdsca	sending
extern	domain tcdsca	submission
extern	domain	tcdsca	sent
extern	domain 	tcpono	tran.print, serial
extern	domain	tcnama	transmittal, contact.name, created.by, issued.by, approver.by
	extern	domain	tclogn	login.user		|#ISGEC004020.sn
extern	domain tcemm.grid user.division
	extern	domain	tcpono	length			|#ISGEC004020.en
extern domain	tcmcs.str100 note.1
extern domain  tcmcs.str100 subject.1
extern domain  tcmcs.str100 subject.2
extern domain	tcnama 	contact.name
						|# ISGEC004011.en
	extern	domain	tcmcs.str50m	folder.dsca	|GH527CR868.a
	extern	domain	tcmcs.str50	issue.dsca	|GH527CR868.a
	extern	domain	tcccty		stid		|GH527CR868.a

|****************************** program section ********************************
before.program:
								|#ISGEC004020.so
| 	query.string = ""
| 	
| 	query.string = "dmisg131.dprj in (select dmisg129.cprj from dmisg129 where dmisg129._index3 = :logname$)"
| 	query.string = strip$(query.string) & " and dmisg131.type in (select dmisg129.tran from dmisg129 where dmisg129._index3 = :logname$)"
| 	query.string = strip$(query.string) & " and dmisg131.stat = dmisg.doc.rec.underapp"
| 	query.string = strip$(query.string) & " and "
| 	query.extend.where(query.string)
						|# ISGEC004011.sn
						|#ISGEC004020.eo	
choice.print.data:
on.choice:
	if rprt_open() then
		tdisgdll831rep_transmittal(dmisg131.tran)
		rprt_close()
	else
		choice.again()
	endif
						|# ISGEC004011.en
|****************************** field section **********************************
field.tcmcs052.dsca:
before.display:
	select	tcmcs052.dsca
	from	tcmcs052
| 	where	tcmcs052._index1 = {:dmisg131.cprj}				|#ISGEC016019.o
	where	tcmcs052._index1 = {:dmisg131.dprj}				|#ISGEC016019.n
	selectdo
	selectempty
		tcmcs052.dsca = ""
	endselect
	
field.folder.dsca:						|GH527CR868.a.s
before.display:
	select	dmisg015.tfld:folder.dsca
	from	dmisg015
	where	dmisg015._index1 = {:dmisg131.type, :dmisg131.dprj, :dmisg131.tfld}
	as set with 1 rows
	selectdo
	selectempty
		folder.dsca = ""
	endselect			

field.issue.dsca:
before.display:
	select	dmisg125.dsca:issue.dsca
	from	dmisg125
	where	dmisg125._index1 = {:dmisg131.issu}
	as set with 1 rows
	selectdo
	selectempty
		issue.dsca = ""
	endselect
	
field.stid:
before.display:
	select	dmisg132.stid:stid
	from	dmisg132
	where	dmisg132._index1 = {:dmisg131.tran}
	as set with 1 rows
	selectdo
		select	dmisg123.dsca
		from	dmisg123
		where	dmisg123._index1 = {:stid}
		as set with 1 rows
		selectdo
		selectempty
			dmisg123.dsca = ""
		endselect
	selectempty
		stid = ""
		dmisg123.dsca = ""
	endselect
|GH527CR868.a.e

|****************************** function section **********************************
functions:

function extern process()
{
	select	dmisg131.*	
	from	dmisg131 for update
	where	dmisg131._index1 = {:dmisg131.tran}
	and	dmisg131.stat = dmisg.doc.rec.underapp
	and	(dmisg131.appr = tcyesno.yes or dmisg131.rejc = tcyesno.yes)
	selectdo
		if dmisg131.appr = tcyesno.yes then
			dmisg131.apdt = utc.num()
			dmisg131.apsu = logname$
			dmisg131.stat = dmisg.doc.rec.underiss
			db.update(tdmisg131, db.retry)
		else
			dmisg131.apsu = logname$
			dmisg131.stat = dmisg.doc.rec.returned
			db.update(tdmisg131, db.retry)
		endif
		commit.transaction()
		login.user = logname$
		length = len(login.user)
		login.user = strip$(login.user) & string.set$(" ", 16-length)
		
		user.division = get.user.division()
		if not isspace(user.division) then
			send.email.alert()
		endif		
		message("Processed.")
	selectempty
		message("No record selected OR Approved/Reject is not selected.")	|#ISGEC004020.n
	endselect
| 	commit.transaction()		|#ISGEC004020.so
| 	message("Processed.")
}


function domain tcemm.grid get.user.division()
{
	domain tcemm.grid division
	
	division = ""
	select	tccom001.cwoc
	from	tccom001
	where	tccom001._index4 = {:dmisg131.user}
	selectdo
		if not isspace(tccom001.cwoc) then
			select	tcmcs065.comp, tcmcs065.ccal
			from	tcmcs065
			where	tcmcs065._index1 = {:tccom001.cwoc}
			selectdo
				select	tcemm030.eunt
				from	tcemm030
				where	tcemm030.fcmp = :tcmcs065.comp
				and	tcemm030.ccal = :tcmcs065.ccal
				as set with 1 rows
				selectdo
					division = tcemm030.eunt
				selectempty
					
				endselect	
			endselect
		else
	
		endif
	endselect
	return(division)

}

function send.email.alert()
{
	string tmp.file(200),line(500)
	long fp
	
	long    message.ID
        long    to.ID
	long    cc.ID		|#ISGEC01176.n

        long    attachment.ID
        long    ret
	long stat 
	
	tmp.file = creat.tmp.file$(bse.tmp.dir$())
	fp = seq.open(tmp.file,"w+")
	if fp <=0 then
		message("Temp file can not be created")
	endif

	line = ""
	line = strip$(line) & "Transmittal No. " & dmisg131.tran & " Type " & enum.descr$("dmisg.tran.typ", dmisg131.type)|& chr$(13)&chr$(10)
	if dmisg131.appr = tcyesno.yes then
		line = strip$(line) & " has been Approved." & chr$(13)&chr$(10)
	else
		line = strip$(line) & " has been Rejected." & chr$(13)&chr$(10)
	endif
	seq.write(line,len(line),fp)
	ret = seq.close(fp)

	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:dmisg131.apsu}
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
	selectempty
		bpmdm001.mail = ""
	endselect

	if isspace(bpmdm001.mail) then
		message("Email ID for user " & dmisg131.apsu & " Not maintained")
	endif		
	
	|******* Email Header
        message.ID = cmf.create()
	if dmisg131.appr = tcyesno.yes then
		line = "Approved " & enum.descr$("dmisg.tran.typ", dmisg131.type) & "Transmittal" & dmisg131.tran & " For" & dmisg131.dprj
	endif
	if dmisg131.rejc = tcyesno.yes then
		line = "Rejected " & enum.descr$("dmisg.tran.typ", dmisg131.type) & "Transmittal" & dmisg131.tran & " For" & dmisg131.dprj
	endif
      ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        ret = cmf.setSubject(message.ID,line)
	
	|******** from ID
	to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	ret = cmf.setRecipientName(to.ID,tccom001.nama)
        ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	ret = cmf.setRecipientType(to.ID, "SMTP")
 
	|******** to ID
	select	dmisg129.*
	from	dmisg129
	where	dmisg129._index1 = {:user.division, :dmisg131.dprj, :dmisg131.type}
	selectdo
		select 	bpmdm001.mail,tccom001.nama 
		from 	tccom001,bpmdm001
		where 	tccom001._index4 = {:dmisg129.logn}
		and	tccom001.emno refers to bpmdm001
		and	bpmdm001.mail <> ""
		selectdo
			to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
			ret = cmf.setRecipientName(to.ID,tccom001.nama)
			ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
			ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
			ret = cmf.setRecipientType(to.ID, "SMTP")
		selectempty
		endselect
	endselect
	
	|******	to.cc						|ISGEC01176.sn
	select	dmisg031.emno
	from	dmisg031
	where	dmisg031._index1 = {:dmisg131.tran}
	selectdo
		select 	bpmdm001.mail,tccom001.nama 
		from 	tccom001,bpmdm001
		where 	tccom001._index1 = {:dmisg031.emno}
		and	tccom001.emno refers to bpmdm001
		and 	bpmdm001.mail <> ""
		selectdo
			cc.ID = cmf.createRecipient(message.ID, ttcmf.role.cc)  
			ret = cmf.setRecipientName(cc.ID,tccom001.nama)
			ret = cmf.setRecipientAddress(cc.ID, bpmdm001.mail)	
			ret = cmf.setRecipientResponsibility(cc.ID, "TRUE")		
			ret = cmf.setRecipientType(cc.ID, "SMTP")
		selectempty
		endselect
	selectempty
		dmisg031.emno = ""
	endselect							|ISGEC01176.en
	
	|Mail to creator also
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:dmisg131.user}
	and	tccom001.emno refers to bpmdm001
	and	bpmdm001.mail <> ""
	selectdo
		to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
		ret = cmf.setRecipientName(to.ID,tccom001.nama)
		ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
		ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
		ret = cmf.setRecipientType(to.ID, "SMTP")
	selectempty
	endselect
		
	|If Approve then mail to issuer also
	
	|********* Mail Body
	attachment.ID = cmf.createAttachment(message.ID)
	ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	ret = cmf.setAttachmentMIME(attachment.ID,"text/plain")                       
	ret = cmf.setAttachmentFileName(attachment.ID,tmp.file,"abc.txt")


	|*********  Send mail
        if message.ID <>0 then
                stat = cmf.startService("SMTP",2)
                if stat <> 0 then
                        message("Message could not be sent "&
                                "(Infor ERP Enterprise eMessage Connector"&
                                " service did not start)")
		endif
			
                stat = cmf.send(message.ID,"SMTP")
                if stat<>0 then
                        message("Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&
                                "service refused message)")
                        cmf.stopService("SMTP",2)
                endif
                stat = cmf.stopService("SMTP",2)
        endif	
}
						|#ISGEC004020.en



