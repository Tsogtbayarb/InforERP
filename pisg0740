|******************************************************************************
|* tpisg074  0  VRC B61U a7 isg 
|* DAL For SAR Infomation tpisg074
|* baan
|* 15-02-05 [13:26]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
|* ID ISGEC01047
|* Manish Kumar
|* 05-02-2015
|* DAL For SAR Information.
|*
|* ID ISGEC004009, Dharmendra, 18-02-2015
|*
|* PATCH001010, Dharmendra, 12-03-2015
|******************************************************************************

	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

	table	ttpisg074
	table	ttccom001
	long ret_val
	extern	domain	tcemno		o.emno			|# ISGEC004009.sn
	extern	domain	tfgld.user	i.user	
	extern	domain	tcemm.grid	division
								|# ISGEC004009.en
function extern long before.open.object.set()
{
	DAL.FIELD.DEPENDS.ON("tpisg074.sarn",HOOK_UPDATE,"tpisg074.cprj")
	DAL.FIELD.DEPENDS.ON("tpisg074.ddat",HOOK_UPDATE,"tpisg074.idat","tpisg074.sars")
	i.user = logname$
	select 	tccom001.emno:o.emno
	from	tccom001
	where	tccom001._index4 = {:i.user}
	as set with 1 rows
	selectdo
	selectempty
		o.emno = ""
	endselect	
| 	dmisgdll0100.approval.rule.document.master(logname$,o.emno) |# ISGEC004009.n
	return(0)
}

function extern boolean method.is.allowed(long type)
{
	on case type
	case DAL_UPDATE :
		if tpisg074.stat = tpisg.stat.approved then
			return(false)
		endif	
		break
	endcase	

	return(true)
}

function extern long before.save.object(long mode)
{
	on case mode 
		case DAL_NEW :
			tpisg074.stat = tpisg.stat.created
| 			tpisg074.sarc = empty				|# ISGEC004009.o
			tpisg074.logn = logname$			|# ISGEC004009.sn
			tpisg074.emno = o.emno
			Get_division()
			tpisg074.devi = division
									|# ISGEC004009.en
		break
	endcase
	return(0)
}

| function extern boolean after.save.object(long mode)
| {
| 	on case mode 
| 		case DAL_NEW :			
| 			if not check.field.value() then
| 				return(DALHOOKERROR)
| 			endif
| 		break
| 		case DAL_UPDATE :
| 			if not check.field.value() then
| 				return(DALHOOKERROR)
| 			endif
			
| 			if tpisg074.stat = tpisg.stat.review then
| 				if logname.matched(tpisg074.rper) then
| 					
| 					if tpisg074.caus.r = 0 then
| 						dal.set.error.message("@Root Cause Is Mandatory")
| 						return(DALHOOKERROR)
| 					endif
| 					
| 					if tpisg074.sarc = "" then
| 						dal.set.error.message("@SAR Classification is Mandatory")
| 						return(DALHOOKERROR)
| 					endif
| 					
| 					if tpisg074.corr = 0 then
| 						dal.set.error.message("@Correction Field Value is Mandatory")
| 						return(DALHOOKERROR)
| 					endif
| 					
| 					if isspace(tpisg074.cwoc) then
| 						dal.set.error.message("@Responsible Department Is Mandatory")
| 						return(DALHOOKERROR)
| 					endif
| 					
| 					if tpisg074.acti = 0 then
| 						dal.set.error.message("@Corrective Action is Mandatory")
| 						return(DALHOOKERROR)
| 					endif
| 					
| 					if isspace(tpisg074.apby) then
| 						dal.set.error.message("@Approved By Field Value is Mandatory")
| 						return(DALHOOKERROR)
| 					endif
| 				endif
| 			endif
| 			
| 			if tpisg074.stat = tpisg.stat.approval then
| 				if tpisg074.appr = 0 then
| 					dal.set.error.message("@Approver Ramarks Is Mandatory")
| 					return(DALHOOKERROR)
| 				endif
| 			endif
| 		break	
| 	endcase
| 	return(0)
| }

function extern long set.object.defaults()
{
	tpisg074.cdat = date.num()
	return(0)
}

|***************** Business Method ******************************************
function extern boolean submit.is.allowed()
{
	if tpisg074.stat = tpisg.stat.approved then
		return(false)
	endif
	
	if tpisg074.stat = tpisg.stat.review then
		if tpisg074.rper <> o.emno then
			return(false)
		endif
	endif	
	
	if tpisg074.stat = tpisg.stat.approval then
		if tpisg074.apby <> o.emno then
			return(false)
		endif
	endif	
	return(true)
}

function extern boolean reject.is.allowed()
{
	if tpisg074.stat = tpisg.stat.approved or tpisg074.stat = tpisg.stat.created then
		return(false)
	endif
	
	if tpisg074.stat = tpisg.stat.review then
		if tpisg074.rper <> o.emno then
			return(false)
		endif
	endif
	
	if tpisg074.stat = tpisg.stat.approval then
		if tpisg074.apby <> o.emno then
			return(false)
		endif
	endif	
	
	return(true)
}


function extern long submit()
{
	update.tpisg074.status()
	return(0)
}

function extern long reject()
{
	select	tpisg074.stat
	from	tpisg074 for update
	where	tpisg074._index1 = {:tpisg074.cprj,:tpisg074.sarn}
	selectdo
| 		dal.change.object("tpisg074")
		on case tpisg074.stat
			case tpisg.stat.review :
| 				dal.set.field("tpisg074.stat",tpisg.stat.created)
				tpisg074.stat = tpisg.stat.created
			break
			case tpisg.stat.approval :
| 				dal.set.field("tpisg074.stat",tpisg.stat.review)
				tpisg074.stat = tpisg.stat.review
			break
		endcase
		db.update(ttpisg074,db.retry,e)
		if not e then
			commit.transaction()
		else
			abort.transaction()
			return(DALHOOKERROR)
		endif
	endselect
	return(0)
}
|****************************** Field Hooks *******************************************

function extern void tpisg074.sarn.update(long mode)
{
	long max.id
	
	select	max(tpisg074.sarn):max.id
	from	tpisg074
	where	tpisg074._index1 = {:tpisg074.cprj}
	selectdo
		tpisg074.sarn = max.id  + 1
	selectempty
		tpisg074.sarn = 1
	endselect
}

function extern boolean tpisg074.rper.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.rper) then
					dal.set.error.message("@Representative Person Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.rper.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.natp.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.natp) then
					dal.set.error.message("@Nature Of Problem Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.natp.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.cost.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.cost) then
					dal.set.error.message("@Cost Attributed To Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.cost.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.cspa.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.cspa) then
					dal.set.error.message("@Related Element Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.cspa.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.draw.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.draw) then
					dal.set.error.message("@Related Drawing No. Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.draw.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}
								|# ISGEC004009.so
| function extern boolean tpisg074.cost.q.is.mandatory(long mode)
| {							
| 	on case mode 
| 		case DAL_NEW :
| 		case DAL_UPDATE :
| 			if tpisg074.stat = tpisg.stat.created then 
| 				if tpisg074.cost.q = 0 then
| 					dal.set.error.message("@Cost Of Poor Quality Is Mandatory")
| 					return(DALHOOKERROR)
| 				endif
| 			endif
| 		break
| 	endcase
| 	return(false)
| }
								|# ISGEC004009.eo
function extern boolean tpisg074.cost.q.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.bpid.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.bpid) then
					dal.set.error.message("@Vendor Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.bpid.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}
							
function extern boolean tpisg074.revi.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.revi) then
					dal.set.error.message("@Revision No. Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}


function extern boolean tpisg074.revi.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.telp.is.mandatory(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then 
				if isspace(tpisg074.telp) then
					dal.set.error.message("@Contact No. Is Mandatory")
					return(DALHOOKERROR)
				endif
			endif
		break
	endcase
	return(false)
}

function extern boolean tpisg074.telp.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.pdes.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.psol.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.sars.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern boolean tpisg074.idat.is.mandatory(long mode)
{
	on case mode 
	case DAL_NEW :
	case DAL_UPDATE :
		if tpisg074.stat = tpisg.stat.created then 
			if tpisg074.idat = 0 then
				dal.set.error.message("@Issue date Is Mandatory")
				return(DALHOOKERROR)
			endif
		endif
	break
	endcase
	return(false)
}

function extern boolean tpisg074.idat.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}

function extern tpisg074.ddat.update(long mode)
{
	on case mode
	case DAL_NEW :
	case DAL_UPDATE :
		if tpisg074.stat = tpisg.stat.created then
			on case tpisg074.sars
			case tpsarc.workstopped :
				tpisg074.ddat = tpisg074.idat + 2
			break
			case tpsarc.workcanproce :
				tpisg074.ddat = tpisg074.idat + 7
			break
			endcase
		endif
	endcase
}

|******* Resolution Details Fields **********************************
function extern boolean tpisg074.caus.r.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}

function extern boolean tpisg074.sarc.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}


function extern boolean tpisg074.corr.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}

function extern boolean tpisg074.acti.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}

function extern boolean tpisg074.cwoc.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}

function extern boolean tpisg074.reas.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}


function extern boolean tpisg074.apby.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.review then
		if logname.matched(tpisg074.rper) then
			return(false)
		endif
	endif
	return(true)
}

function extern boolean tpisg074.appr.is.derived(long mode)
{
	if tpisg074.stat = tpisg.stat.approval then
		if logname.matched(tpisg074.apby) then
			return(false)
		endif
	endif
	return(true)
}

function extern boolean tpisg074.apby.is.valid(long mode)			|#ISGEC004013.sn
{
	select tpisg073.*
	from    tpisg073
	where  tpisg073.emno = {:tpisg074.apby}
	selectdo
	selectempty
		dal.set.error.message("@Please enter valid approver")
		return(DALHOOKERROR)
	endselect
	
	return(true)
}										|#ISGEC004013.en
									|# PATCH001010.sn
function extern boolean tpisg074.prep.is.derived(long mode)
{
	on case mode 
		case DAL_NEW :
		case DAL_UPDATE :
			if tpisg074.stat = tpisg.stat.created then
				return(false)
			endif
		break
	endcase
	return(true)
}
									|# PATCH001010.en
|******************* Functions ********************************
function extern boolean logname.matched
	(
		domain	tcemno	i.emno
	)
{
	domain	tclogn	logname
	
	logname = logname$
	
	select	tccom001.loco
	from	tccom001
	where	tccom001._index1 = {:i.emno}
	selectdo
		if strip$(tccom001.loco) = strip$(logname) then
			return(true)
		endif
	endselect
	return(false)
}

								|# ISGEC004009.sn
function Get_division()
{
	division = ""
	
	select	tppdm600.cdf_divs:division
	from	tppdm600
	where	tppdm600._index1 = {:tpisg074.cprj}
	selectdo
	endselect

}

function update.tpisg074.status()
{
	select	tpisg074.stat, tpisg074.modi
	from	tpisg074 for update
	where	tpisg074._index1 = {:tpisg074.cprj,:tpisg074.sarn}
	selectdo
		on case tpisg074.stat
			case tpisg.stat.created :
				tpisg074.stat = tpisg.stat.review
				break
			case tpisg.stat.review :
				tpisg074.stat = tpisg.stat.approval
				break
			case tpisg.stat.approval :
				tpisg074.stat  = tpisg.stat.approved
				tpisg074.modi = date.num()		|# PATCH001010.n
			break
		endcase
		db.update(ttpisg074,db.retry,e)
		if not e then
			commit.transaction()
		else
			abort.transaction()
		endif
	endselect

}


								|# ISGEC004009.en
	
