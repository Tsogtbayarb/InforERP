|*******************************************************************************
|* ppdm7840	: Copy Projects
|* Author	: Sreekant
|* Co-Author	: Johnson
|* 28-01-92 [09:00]
|*******************************************************************************
|* Main table  none   , Form Type 4
|*****************************************************************************
|***************************** declaration section *****************************
|******************************************************************************
|*	Rev.No. 2  tpB60asy23  09 Jul 04 skota
|* Script cleaned by: duutl1200m000 user: skota
|*	Rev.No. 3  tpB60asy23  22 Jul 04 gvasavi
|* onhold date  set to 0 when copying.
|* BRQ000575, Valvekar Nilesh, 2004-10-4
|* Templates and Copy Projects functionality merged. Changes are done
|* in this session to accomdate 'Templates' functionality.
|*	Rev.No. 4  tpB60asy23  29 Nov 04 vnilesh
|* Changes made according to BRQ000575.
|* 200-102276 , Valvekar Nilesh, 2004-11-29
|* 'Invoiced Amount' should not be copied from source project as
|* 'Approved for Invoicing' is still 'No'.
|*	Rev.No. 5  tpB60asy23  29 Nov 04 vnilesh
|* TCS remark 200-102276 solved.
|*
|* 200-102278, Valvekar Nilesh, 2004-11-30
|* Installment were not getting linked to Advance in target even when it is
|* linked in source. Now, installments will be linked to advance if the link
|* exists, but, the condition is that, both installments and advances
|* should be copied simultaneously to avoid refrence issues.
|*	Rev.No. 7  tpB60asy23  06 Jan 05 vnilesh
|* TCS remark 200-102278 solved.
|*
|* |* 200-102301, Valvekar Nilesh, 2005-01-07
|* If start or end date on the form is given blank filling only time
|* field, the date is taken as 01-01-1970. If dates are calculated
|* based on this and if a date come which is below this, then the
|* date will not be compatible with UTC format and a fatal error
|* comes up. The changes are made in code to take care of this.
|*	Rev.No. 8  tpB60asy23  07 Jan 05 vnilesh
|* TCS remark 200-102301 solved.
|* 200-102289, Valvekar Nilesh, 2005-01-07
|* If we are creating a project from a template, then the source
|* project will zoom to 'Template' only.
|*	Rev.No. 9  tpB60asy23  07 Jan 05 vnilesh
|* TCS remark 200-102289 ported
|* 200-102275, Valvekar Nilesh, 2005-01-10
|* If an Cost Plus project has an installment schema, then that alone
|* should be skipped and the rest of the project should be copied.
|* 200-102291, Valvekar Nilesh, 2005-01-10
|* The Project created from template details will be filled in.
|* 200-102298, Valvekar Nilesh, 2005-01-10
|* Activity budget will not be copied for an Element - Acivity
|* Project.
|*	Rev.No. 10  tpB60asy23  11 Jan 05 vnilesh
|* Various TCS remarks solved
|* 200-102432 and 200-102287, Valvekar Nilesh, 2005-01-12
|* Extension and Activity dates will follow the same logic as
|* Activities for dates.
|*
|* 200-102618,Valvekar Nilesh, 2005-01-12
|* If we are copying a project from template, the source should be template.
|*
|* |* 200-102625,Valvekar Nilesh, 2005-01-12
|* If we are copying a project from template, the Project created from template
|* details will be filled in even if we are using 'Copy Projects'
|* session directly.
|*	Rev.No. 2  tpB60asy24  12 Jan 05 vnilesh
|* Various TCS remarks solved
|* 200-102613, Valvekar Nilesh, 2005-01-13
|* If the dates are not in UTC format, they cause fatal error.
|* TCS remark 200-102301 is further improved.
|*
|*  200-102632, Valvekar Nilesh, 2005-01-13
|* The 'Top' element and extension linked to it were not getting
|* proper dates. This is corrected.
|*	Rev.No. 3  tpB60asy24  18 Jan 05 vnilesh
|* Various TCS remarks solved
|*	Rev.No. 4  tpB60asy24  18 Jan 05 vnilesh
|* tppin012 table introduced for copying
|* 200-102687, Default activity should be copied.
|*	Rev.No. 5  tpB60asy24  24 Jan 05 vnilesh
|* TCS remark 200-102687 solved
|* 200-102746,  Valvekar Nilesh, 2005-01- 27
|* Planned Invoice date of Installment will also follow the date
|* shift logic.
|*	Rev.No. 6  tpB60asy24  27 Jan 05 vnilesh
|* TCS remark 200-102746 solved.
|* 200-102821, Valvekar Nilesh, 2005-02-09
|* Error specific remark will appear in the report instead of a
|* general remark.
|*	Rev.No. 7  tpB60asy24  09 Feb 05 vnilesh
|* TCS remark 200-102821 solved.
|* 200-103006, Valvekar Nilesh, 2005-02-14
|* Project description is assined a value before relevant checks and
|* this results in a wrong description even if the project is not
|* relevant. This is corrected.
|*	Rev.No. 8  tpB60asy24  14 Feb 05 vnilesh
|* TCS renark 200-103006 solved.
|* 200-103004, Valvekar Nilesh, 2005-02-15
|* New functionality fo Project Address, Ship from Address and
|* Priority Warehouse added to make it consistent with session
|* 'create project from template'.
|*	Rev.No. 9  tpB60asy24  15 Feb 05 vnilesh
|* TCS remark 200-103004 solved.
|*	Rev.No. 2  tpB60asy25  01 Mar 05 vnilesh
|* Extension data is copied by default when the scope is copied.
|*	Rev.No. 2  tpB60asy26  02 Mar 05 vnilesh
|* Dependencies have been adjusted. TCS remarks 200-103016 and 200-103530 are
|* solved. Without scope cannnot copy Installment, Adv, topdown,bottom up,cost
|* surcharges, rev surcharges, budget surcharges, estimate data and base line
|* data.
|* 200-103731,	Rev.No. 3  tpB60asy26  04 Mar 05 vnilesh
|* Advances are copied independent of installments.Now its possible to copy only
|* Advances without installments
|*	Rev.No. 4  tpB60asy26  10 Mar 05 vnilesh
|* While copying the projects, with the ship from address in the source
|* project,and while copying, the ship from adddress value is deleted, eventhen
|* it was getting copied in target project. Required changes have been made and
|* now its not getting copied.
|*	Rev.No. 5  tpB60asy26  21 Mar 05 vnilesh
|* 200-103713 , Mohan Kalagadda, 21-03-2005.
|* Remark id is added to Rev.No. 3  tpB60asy26.
|*	Rev.No. 6  tpB60asy26  23 Mar 05 vnilesh
|* Renmark 200-104459 improved.
|*	Rev.No. 7  tpB60asy26  05 May 05 gmaddi
|* Remark: 200-104714
|* Using the menu option "Create Project from Template" in tppdm0800m000,session
|* tppdm6200m000 is opened instead of tppdm7840m000.Now tppdm7840m000 is opened
|* after corrections.
|*	Rev.No. 8  tpB60asy26  11 May 05 vnilesh
|* TCS remark 104557 solved
|*	Rev.No. 9  tpB60asy26  13 May 05 vnilesh
|* TCS remark 200-104563 solved. Copy Estimate to Project field will be enabled
|* when using "Copy Projects"
|*	Rev.No. 10  tpB60asy26  13 May 05 vnilesh
|* Remark 104557 improved.
|*	Rev.No. 11  tpB60asy26  06 Jun 05 kchintal
|* Solution 201772
|* Option to copy Activity relationships is added.
|*	Rev.No. 12  tpB60asy26  09 Jun 05 kchintal
|* Remark 200-105103
|* Option 'Create Project from Template' removed from the session 'Scope
|* definition' (tppdm0800m000) .
|*	Rev.No. 13  tpB60asy26  05 Jul 05 vnilesh
|* 200-103008. If Project start and end dates are blank, Plan Start and End
|* Dates will be taken for calculating activity start and end dates.
|*	Rev.No. 14  tpB60asy26  11 Jul 05 bsp
|* Product ID object set to 10056 and Product ID source set to 7026
|*	Rev.No. 15  tpB60asy26  15 Jul 05 bsp
|* Product ID object set to 10056 and Product ID source set to 7026
|*	Rev.No. 16  tpB60asy26  29 Jul 05 kchintal
|* Changes made for 200-106252
|* First Free Numbers for ARL repeated during "copy projects".
|*	Rev.No. 2  tpB60asy27  31 Aug 05 kchintal
|* Changes made for 200-104678
|* if the 'Scope' for the target project exists, then the possibility to copy
|* scope, installments, advances, Top down/Bottom up budget, Surcharges,
|* Estimate will not be allowed.
|*	Rev.No. 2  tpB60asy28  27 Sep 05 kchintal
|* Changes made for 203506
|* New arguments introduced in function definition.
|*	Rev.No. 2  tpB60asy30  15 Jun 06 vkartik
|* Changes made for solution 900-211698
|* Closing fiscal year and Closing fiscal period should be defaulted as 0 when a
|* new project is created by copying from a existing project.
|*	Rev.No. 2  tpB60asy32  14 Sep 06 srangula
|* forward porting of solution 213818.
|* Getting fatal error while copying a project because of db.set.to.default()
|* command and that command lines are being commented with this solution. VSC
|* warnings with 0 priority have been handled.
|*	Rev.No. 3  tpB60asy32  07 Nov 06 rbuurman
|* Robert Haitsma,
|* tccom998 (Tax Provider Parameters) is moved to tctax600	(Tax Provider
|* Parameters).
|*	Rev.No. 2  tpB60asy36  17 Apr 07 mtunugun
|* Forward porting of the SOL 217835, Request: ERP-00000-15249
|* The check should be on the logistic company being same for both the
|* project and project warehouse and not the enterprise unit.
|*	Rev.No. 2  tpB60asy37  17 May 07 mkannegu
|* SOL 215034-FP4, Mahesh Kannegunda,
|* Extended SL 215034/215066 according to changes described in
|* FD #45704 (Conversion Factors).
|* Shortly: an Approved flag is added. Modifications are allowed till the
|* conversion factor is approved. The conversion factor can only be used as soon
|* as it is approved.
|*	Rev.No. 2  tpB60asy38  26 Jun 07 mkannegu
|* change of domain from tcyesno to tcynna.
|*	Rev.No. 2  tpB60asy40  06 Nov 07 rsharma
|* Made Changes for VSC warning.
|* DAL tcmcs003 Linked to program scripts
|*	Rev.No. 2  tpB60asy41  31 Dec 07 rsharma
|* Porting of solution 225708.
|* SOL 225708, Radhika Sharma, 2007-11-23
|* ERP-00000-28990:
|* Fatal error is coming while changing Start Date and End Date in session
|* tppss2100s000.
|*	Rev.No. 3  tpB60asy41  31 Dec 07 srangula
|* Foward Porting of SOLUTION 226122, Santosh Rangula
|* Copying a project leaving start date open and entering only finish date
|* resulting in wrong dates for target project
|* activities(1970).(ERP-00000-29518)
|*	Rev.No. 2  tpB60ast2  30 May 08 rsharma
|* Remark No:- 200-162732
|* If we copy a project for which user is different from current user then it
|* was not updating user field with current user.
|*	Rev.No. 2  tpB60asy45  02 Jun 08 bsp
|*	Rev.No. 2  tpB60ast5  08 Oct 08 rvdlinde
|* SOL 233072,
|* after zooming in the targetproject field sometimes the sytem pops up with
|* the  wrong numbergroup/serie.
|*	Rev.No. 2  tpB60asy48  12 Nov 08 rvdlinde
|* .
|*	Rev.No. 3  tpB60asy48  13 Nov 08 wgerrit
|* TCS800-167298 DAL2 usage implemented
|*	Rev.No. 4  tpB60asy48  21 Nov 08 rvdlinde
|* SM-00000-04857. new fields tppdm600.pror (Project Origin) and tppdm600.ofpr
|* (Originated from project) are filled.
|*	Rev.No. 5  tpB60asy48  01 Dec 08 rvdlinde
|* SOL 233994, Rene van de Linden, 2008-11-17
|* Default budget analysis code not copied.
|*
|* SOL 235454, Wim Gerritsen, 2009-01-16
|* When a project is copied tppdm600 is not locked when updating the user.
|*
|* SOL 237297, Wim Gerritsen, 2009-04-01
|* ERP-00000-57146
|* The default project warehouse is not copied.
|*
|* SOL 239087, Rene van de Linden, 2009-06-23
|* ERP-00000-62343.
|* Copy.est.to.proj can be ticked (via screen defaults) if a template is to be
|* copied. This is not always wanted.
|*
|* SOL 241402, Rene van de Linden, 2009-12-09
|* A new financial flow is added to post Project related Advances from CMG and
|* Project Revenues / Advance Installment Paid instead of reversing the project
|* Revenues / Advance Installment posting.
|*
|* SOL 244562, Wim Gerritsen, 2010-01-20
|* Infor365 DF213978 Invoice on Extension not cleared when copying Project.
|*	Rev.No. 4  tpB60asy54  21 Jun 10 mekhardt
|* added software to copy table tppdm670
|*
|* SOL 246976, Martin Heijkamp, 2010-06-24
|* Infor Express.
|* Improvements in the project/people integration:
|* - If a new project is added, the user who created this project should get
|* automatically approval authorization for this project within People;
|* - Within the print/process sessions in People, the Trade Group should become
|* available as a selection criteria.
|*	Rev.No. 6  tpB60asy54  25 Jun 10 wgerrits
|* Project templates from the tppdm500 series expired.
|* Fields tppdm600.dpcd, tppdm600.decd, tppdm600.dacd set to obsolete
|*	Rev.No. 7  tpB60asy54  29 Jun 10 rvdlinde
|* tp/ts
|*	Rev.No. 8  tpB60asy54  29 Jun 10 rvdlinde
|* .
|*
|* SOL 246924, Martin Ekhardt, 2010-07-09
|* Infor365: 218006
|* In session tppdm7840m000, Copy Projects, if the source activity being copied
|* is On Hold, the newly created activity is set up with a status of Free on
|* the new project but with On Hold Date set, the reason code is blank
|* Infor 365: 218119
|* The budget cost analysis description shows ****** at form project/budget if
|* the project is copied with budget cost analysis code unchecked at form copy
|* projects/options.
|*	Rev.No. 2  tpB60asy55  09 Jul 10 mekhardt
|* .
|*	Rev.No. 2  tpB60asy58  24 Sep 10 rvdlinde
|* 800-174540 EV method was changed unexpectedly and causes errors
|*	Rev.No. 3  tpB60asy58  27 Sep 10 mekhardt
|* SOL 250262, Martin Ekhardt, 2010-09-27
|* |* Default " Subproject" not correct.
|*	Rev.No. 4  tpB60asy58  29 Sep 10 wvdmolen
|* Solved vsc-warning before codefreeze.
|*	Rev.No. 2  tpB60ast7  12 Oct 10 mekhardt
|* tcibd.dll0010.segment.size has return type g.dummy.size
|*	Rev.No. 2  tpB60asy59  09 Dec 10 rvdlinde
|* 800-175298. ptcx30.orno and ptcx30.acln are not used anymore.
|*	Rev.No. 3  tpB60asy59  01 Feb 11 mtunugun
|* Project Deliverables should be copied while doing copy projects.
|*	Rev.No. 4  tpB60asy59  02 Feb 11 mtunugun
|* While copying deliverables Shipped quantity should be 0.
|*	Rev.No. 5  tpB60asy59  18 Feb 11 mtunugun
|* Solved the remark 800-176856.
|*	Rev.No. 6  tpB60asy59  08 Mar 11 wgerrits
|* UI Improvements:
|* Some options present for the project session but lacking for the dashboard
|* need to be added.
|* Identified are:
|* - Cost Control Levels,
|* - Update Project Status
|* - Create Project from Template
|* - tpppc4411m000 (in addition to existing print options)
|*
|* SOL 1022819, Wim Gerritsen, 2011-06-30
|* Infor365 DF315769
|* Currency and amounts not correctly displayed in sub contract amounts.
|* SOL 246976, Martin Heijkamp, 2010-05-21
|* Infor Express.
|* Improvements in the project/people integration:
|* - If a new project is added, the user who created this project should get
|* automatically approval authorization for this project within People;
|* - Within the print/process sessions in People, the Trade Group should become
|* available as a selection criteria.
|*
|* SOL 1058454, Richard Buitenhuis, 2011-10-03
|* When an inctive Business Partner is present it is not possible to generate
|* the porject structure. (Infor365 - DF 327933)
|*
|* SOL 1152679, Wim Gerritsen, 2012-05-24
|* InforExtreme	DF 355609  KB 1152679
|* Error 205 can occur in a multibyte environment in tppdm7840
|*
|* SOL 1357826, Pankaj Dilip Thakare, 2013-01-25
|* The marked template project (from Project Dashboard) should be selected as a
|* source project.
|******************************************************************************
|* IDENT ISG001007 , Manish Kumar, IT0303 , 25-02-2014 , VRC B61U a7 live
|* New Session Copied from Standard and Script Taken From CDM
|* Required Modifications done for Elements handling
|******************************************************************************

declaration:
#ident "@(#)tppdm7840  tpB61Ma7  nlbaumn6  Rev.No. 5  25 Jan 13  pthakare"
#ident "@(#)tppdm7840  tpB61Ma7  nlbaumn5  Rev.No. 3  03 Oct 11  rbuitenh"
#ident "@(#)tppdm7840  tpB60asy59  nlbaudv1  Rev.No. 6  07 Mar 11  wgerrits"
#ident "@(#)tppdm7840  tpB60ast7  nlbaudv1  Rev.No. 2  12 Oct 10  mekhardt"
#ident "@(#)tppdm7840  tpB60asy58  nlbaudv1  Rev.No. 4  29 Sep 10  wvdmolen"
#ident "@(#)tppdm7840  tpB60asy55  nlbaudv1  Rev.No. 2  09 Jul 10  mekhardt"
#ident "@(#)tppdm7840  tpB60asy54  nlbaudv1  Rev.No. 8  29 Jun 10  rvdlinde"
#ident "@(#)tppdm7840  tpB60asy48  nlbaudv1  Rev.No. 7  01 Apr 09  wgerrit"
#ident "@(#)tppdm7840  tpB60ast5  nlbaudv1  Rev.No. 2  08 Oct 08  rvdlinde"
#ident "@(#)tppdm7840  tpB60ast2  inhyudev1  Rev.No. 2  30 May 08  rsharma"
#ident "@(#)tppdm7840  tpB60asy41  inhyudev1  Rev.No. 3  31 Dec 07  srangula"
#ident "@(#)tppdm7840  tpB60asy40  inhyudev1  Rev.No. 2  30 Oct 07  rsharma"
#ident "@(#)tppdm7840  tpB60asy38  inhyudev1  Rev.No. 2  26 Jun 07  mkannegu"
#ident "@(#)tppdm7840  tpB60asy37  inhyudev1  Rev.No. 2  16 May 07  mkannegu"
#ident "@(#)tppdm7840  tpB60asy36  inhyudev1  Rev.No. 2  17 Apr 07  mtunugun"
#ident "@(#)tppdm7840  tpB60asy32  inhyudev1  Rev.No. 3  07 Nov 06  rbuurman"
#ident "@(#)tppdm7840  tpB60asy30  inhyudev1  Rev.No. 2  15 Jun 06  vkartik"
#ident "@(#)tppdm7840  tpB60asy28  inhyuerp1  Rev.No. 2  27 Sep 05  kchintal"
#ident "@(#)tppdm7840  tpB60asy27  inhyuerp1  Rev.No. 2  31 Aug 05  kchintal"
#ident "@(#)tppdm7840  tpB60asy26  inhyuerp1  Rev.No. 16  29 Jul 05  kchintal"
#ident "@(#)tppdm7840  tpB60asy25  inhyuerp1  Rev.No. 2  25 Feb 05  vnilesh"
#ident "@(#)tppdm7840  tpB60asy24  -a  Rev.No. 8  14 Feb 05  vnilesh"
#ident "@(#)tppdm7840  tpB60asy24  inhyuerp1  Rev.No. 9  14 Feb 05  vnilesh"
#ident "@(#)tppdm7840  tpB60asy24  nawaab  Rev.No. 6  25 Jan 05  vnilesh"
#ident "@(#) SOL 235454, 2009-01-16, B60_a_sy48"
#ident "@(#) SOL 237297, 2009-04-01, B60_a_sy48"
#ident "@(#) SOL 233994, 2008-12-01, B61M_a5"
#ident "@(#) SOL 235454, 2009-01-16, B61M_a5"
#ident "@(#) SOL 239087, 2009-06-23, B61M_a3"
#ident "@(#) SOL 241402, 2009-12-10, B60_a_sy54"
#ident "@(#) SOL 244562, 2010-01-20, B61M_a3"
#ident "@(#) SOL 246976, 2010-06-24, B60_a_sy54"
#ident "@(#) SOL 1022819, 2011-06-30, B61M_a7"
#ident "@(#) SOL 1058454, 2011-10-03, B61M_a6"
#ident "@(#) SOL 1152679, 2012-05-24, B61M_a6"
#ident "@(#) SOL 1357826, 2013-01-25, B61M_a7"

	table	ttcemm110	|* Key Entities
	table	ttcemm112	|* Warehouses
	table	ttcemm113	|* Projects
|	table	ttccom998	|* Tax Provider Parameters	|#Tax-prov.o
	table	ttctax600	|* Tax Provider Parameters
	table	ttcmcs003	|* Warehouses
	table	ttcmcs050	|* First Free Numbers
	table	ttcmcs052	|* Projects
	table	ttcibd001	|* Items - General
	table	ttcppl092	|* Labor Rates by Business Partner and Project
	table	ttpest087	|* User Defined Statuses by Estimate Version
	table	ttpest100	|* Estimate Versions
	table	ttpest110	|* Estimate Structures
	table	ttpest120	|* Structural Elements
	table	ttpest200	|* Estimate Lines
	table	ttpest210	|* Totals by Primary Structure
	table	ttpest300	|* Bid Header
	table	ttpest310	|* Bid Lines
	table	ttppdm005	|* Item Project Data
	table	ttppdm095	|* User Defined Structures
	table	ttppdm142	|* Revenue Codes of Progress Invoicing Elements
	table	ttppdm600	|* Project
	table	ttppdm601	|* Cost Control Levels by Project
	table	ttppdm606	|* Contracts by Project Item
	table	ttppdm607	|* Contracts by Project Price Group
	table	ttppdm615	|* Project Labor
	table	ttppdm625	|* Project Equipment
	table	ttppdm635	|* Project Subcontracting
	table	ttppdm640	|* Project Sundry Cost Codes
	table	ttppdm643	|* Project Revenues
	table	ttppdm646	|* Third Parties by Project
	table	ttppdm649	|* Employees Responsible by Project
	table	ttppdm653	|* Appointments by Project
	table	ttppdm669	|* Project Documents
	table	ttppdm740	|* Project Business Partners
	table	ttppdm741	|* Contract Amounts by Business Partner
	table	ttppdm742	|* Locations by Project
	table	ttppss010	|* Project Plans
	table	ttppss200	|* Activities
	table	ttppss020	|* Baseline
	table	ttppss220	|* Activity Baseline
	table	ttpptc030	|* Cost Surcharges by Project
	table	ttpptc031	|* Cost Surcharges by Cost Type
	table	ttpptc032	|* Cost Surcharges by Cost Component
	table	ttpptc040	|* Cost Surcharges by Item
	table	ttpptc041	|* Cost Surcharges by Labor
	table	ttpptc042	|* Cost Surcharges by Equipment
	table	ttpptc043	|* Cost Surcharges by Subcontracting
	table	ttpptc044	|* Cost Surcharges by Sundry Cost Code
	table	ttpptc050	|* Extensions
	table	ttpptc100	|* Elements
	table	ttpptc101	|* Element Relations
	table	ttpptc120	|* Material Budget Lines
	table	ttpptc500	|* Budget Version
	table	ttpptc130	|* Labor Budget Lines
	table	ttpptc510	|* Budget Amounts of Activities by Version
								|#BRQ000575.sn
	table	ttpptc520	|* TP Budget Analysis Codes By Project.
								|#BRQ000575.sn
	table	ttpptc140	|* Equipment Budget Lines
	table	ttpptc515	|* EV Method Related Data
	table	ttpptc150	|* Subcontracting Budget Lines
	table	ttpptc160	|* Sundry Costs Budget Lines
	table	ttpptc220	|* Material Budget Lines by Activity
	table	ttpptc230	|* Labor Budget Lines by Activity
	table	ttpptc240	|* Equipment Budget Lines by Activity
	table	ttpptc250	|* Subcontracting Budget Lines by Activity
	table	ttpptc260	|* Sundry Costs Budget Lines by Activity
	table	ttpptc300	|* Budget Cost Analysis Codes by Project
	table	ttpppc000	|* Parameters Project Production Control (PPC)
	table	ttpppc260	|* Cost Surcharges by Material
	table	ttpppc261	|* Cost Surcharges Labor
	table	ttpppc262	|* Cost Surcharges by Equipment
	table	ttpppc263	|* Cost Surcharges by Subcontracting
	table	ttpppc264	|* Cost Surcharges by Sundry Cost
	table	ttpppc265	|* Revenue Surcharges by Revenue Code
	table	ttpppc280	|* Cost Surcharges by Project
	table	ttpppc281	|* Cost Surcharges by Cost Type
	table	ttpppc282	|* Cost Surcharges by Cost Component
	table	ttpppc285	|* Revenue Surcharges by Project
	table	ttpppc286	|* Revenue Surcharges by Cost Component
	table	ttpppc320	|* Price-Fluctuation Settlements by Project
	table	ttppin010	|* Advance Payment Requests
	table	ttppin012	|* Advance - Installment Mapping
	table	ttppin020	|* Installments
	table	ttppss210	|* Activity Relationships
	table	ttppdm670	|* Cost Object Mapping  with Service.
	table	ttppdm700	|* Planned Project Deliverables
	
	table	ttpmsl001		| Parameters Master Customized

|**************************** variables ****************************************

	extern  domain  tccprj      	zoom.cprj
	extern  domain  tccprj      	cprj		fixed
	extern  domain  tccprj      	cprj.copy	fixed
	extern  domain  tpptc.cstl      cstl.copy	fixed
	extern  domain  tccom.bpid	ofbp.copy	fixed
	extern  domain  tppdm.cloc	cloc.copy	fixed
	extern	domain	tcemm.grid	source.eu	fixed
	extern	domain	tcemm.grid	target.eu	fixed
	extern	domain	tccom.cadr	padr			|#200-103004.sn
	extern	domain	tccom.cadr	sadr
	extern	domain	tccwar		frm.pwar
	extern	domain	tcdsca		pwar.dsca
	extern	domain	tcdesc		add.nama.1
	extern	domain	tcdesc		add.nama.2		|#200-103004.en
	extern	domain	tcdsca		source.eu.desc
	extern	domain	tcdsca		target.eu.desc
	extern	domain	tppdm.date	new.stdt		|#BRQ000575.sn
	extern	domain	tppdm.desc	cprj.m.desc
	extern	domain	tccprj		main.proj
	extern	domain	tppdm.date	new.fidt
	extern	domain	tppdm.yeno	sub.proj
	extern	domain	tppdm.yeno	scope.def.yeno
	extern	domain	tppdm.yeno	extension.yeno
	extern	domain	tppdm.yeno	baseline.yeno
	extern	domain	tppdm.yeno	bottom.up.yeno
	extern	domain	tppdm.yeno	top.down.yeno
	extern	domain	tppdm.yeno	bca.code.yeno
	extern	domain	tppdm.yeno 	tpb.code.yeno
	extern	domain	tppdm.yeno	advance.yeno
	extern	domain	tppdm.yeno	installment.yeno
	extern	domain	tppdm.yeno	cost.surch.yeno
	extern	domain	tppdm.yeno	rev.surch.yeno
	extern	domain	tppdm.yeno	budget.surch.yeno
	extern	domain	tppdm.yeno	copy.project
	extern	domain	tppdm.yeno	copy.template
|	extern	domain	tcyesno		appr.yeno		|#215034.FP4.sn
	extern	domain	tcynna		appr.yeno	|#215034.FP4.new.sn

	extern	domain 	tcmcs.s132m 	erms			|#900-217835.n
		domain	tccom.cadr	source.padr		|#200-103004.sn
		domain	tccom.cadr	source.sadr
		domain	tccwar		source.pwar
		domain	tcdsca		source.pwar.dsca
		domain	tcdesc		source.add.nama.1
		domain	tcdesc		source.add.nama.2	|#200-103004.en
|		boolean		leaf.ce
|		domain	tppdm.cact	top.cact
		domain	tppdm.date	prj.stdt
		domain	tppdm.date	prj.dldt		|#BRQ000575.en
		domain	tccom.bpid	dummy.bpid
		domain	tcncmp		dummy.loco
		domain	tcncmp		loco
		domain	tcncmp		o.fico
		domain	tctimz		dummy.timz
		domain	tcmess		error.mess.code
	extern	boolean		zoom.standard
	extern  domain  tppdm.desc      cprj.desc
	extern  domain  tppdm.desc      cprj.c.desc
	extern  domain  tppdm.desc      default.cprj.c.desc
	extern  domain  tppdm.psts      psts
	extern  domain  tppdm.yeno      gen.data.yeno
	extern  domain  tppdm.yeno      cost.unit.yeno
	extern  domain  tppdm.yeno      plan.yeno
	extern  domain  tppdm.yeno      calc.yeno
	extern  domain  tppdm.yeno      charges.yeno
	extern  domain  tppdm.yeno      copy.est.to.prj
	extern  domain  tppdm.yeno      estimate.yeno
	extern	domain	tppdm.s080m	print.mess
	extern	domain	tppdm.s080m	print.mess1
|		boolean		disable.estimate.yeno
		boolean		valid.source
		boolean	 	estimates.exist
		domain  tppdm.yeno      gen.data.exist
		domain  tppdm.yeno      cost.unit.exist
|		domain  tppdm.yeno      plan.exist		|#BRQ000575.so
|		domain  tppdm.yeno      calc.exist
|		domain  tppdm.yeno      charges.exist		|#BRQ000575.eo
		domain	tppdm.yeno	scope.exist		|#BRQ000575.sn
|		domain	tppdm.yeno	extension.exist		|#200-103018.o
		domain	tppdm.yeno	baseline.exist
		domain	tppdm.yeno	bottom.up.exist
		domain	tppdm.yeno	top.down.exist
		domain	tppdm.yeno	bca.code.exist
		domain	tppdm.yeno	tpb.code.exist
		domain	tppdm.yeno	advance.exist
		domain	tppdm.yeno	installment.exist
		domain	tppdm.yeno	budget.surcharges.exist
		domain	tppdm.yeno	cost.surcharges.exist
		domain	tppdm.yeno	revenue.surcharges.exist
		domain	tcsess		calling.program		|#BRQ000575.en
		domain  tppdm.cspa      top.cspa	fixed
		domain  tppss.cpla      prj.cpla	fixed
		domain  tppdm.cact      prj.rsac	fixed
		domain	tpptc.ccal	prj.ccal
		domain	tppdm.cact	pss.pact
		domain	tppdm.cact	pss.lact
		domain	tppdm.s017	text.keyw1     	| text key word 2
		domain	tppdm.s017	text.keyw2     	| text key word 2
		domain	tppdm.s017	text.keyw3     	| text key word 3
		domain	tppdm.s017	text.keyw4     	| text key word 4
		boolean		table.copied
		boolean		cprj.copy.in052
|		boolean		proj.obs.used
		boolean		act.ele.stru.used
		boolean		valid.target.project
			long    	text.lines	| text lines
			long		project.present
			long		project.error		|#200-103006.n
	extern	domain	tcyesno		copy.text
		domain	tcmcs.long6	start.position
		domain	tcmcs.long6	end.position
		domain	tccprj		project	|project segment
		boolean		key.entity.exist
	extern	domain	tccprj		zoom.project
		domain 	tcmcs.str132m 	error.mess
		domain 	tccprj 		hold.cprj
		boolean 		number.generated    |number generated
|		boolean 		reset.number	  	|reset number
		boolean 		serie.valid	  	|serie valid
		boolean 		serie.checked	  	|serie checked
		domain 	tcnrgr 		number.group fixed
		domain 	tcseri 		cprj.serie   fixed
		domain	tcseri		est.serie    fixed
								|#BRQ000575.sn
		domain	tcseri		tmpl.serie   fixed  | Template series
								|#BRQ000575.en
		domain	tppdm.abfc	sales.pris
		|* sales rate in REF_HOME_CCUR
		domain	tctxtn		cprj.txta.orig
		domain	tcdate	   	tmp.ref.date
|		domain	tcitem	   	tmp.generic.item
		domain	tcitem	   	tmp.ref.generic.item
		domain	tcreft	   	tmp.reference.type
		domain	tcorno	   	tmp.ref.order
		domain	tcpono	   	tmp.ref.pono
		domain	tcpono	   	tmp.ref.seqn
		domain	tcrefa	   	tmp.ref.desc
		domain	tccom.bpid 	tmp.ref.business.partner
		boolean		copy.cprj.used
		boolean		find.date.from.plan
		boolean		ret			|#200-106252.sn
		domain	tppss.cpla	copy.cpla
		domain	tppdm.cact	copy.pact
		domain	tppdm.cote	copy.pcot
		domain	tppdm.serd	copy.psen
		domain	tppdm.cact	copy.sact
		domain	tppdm.cote	copy.scot
		domain	tppdm.serd	copy.ssen
		domain	tppss.rsty	copy.rltp
		domain	tppdm.perm	copy.lead
		domain	tccuni		copy.cuni		|#200-106252.sn
	extern domain tppdm.desc	user.desc	|#200-162732.n
|	#define	unref.sign	string.set$(get.resource$("noref_ch"),60)
			long		g.long
			long		g.dummy.long
			boolean		g.dummy.bool
		domain	tcmcs.long6	g.dummy.size
		domain	tppdm.yeno	i.estimate		|#ISG001007.n

	#include "itcmcs2000"	|* DAL(-GUI) Support Defines
	#include "itcmcs2001"	|* GUI Support Defines
	#include "itppdm0001"	|* Multi Currency Functionality
	#include "itppdm0003"	|* Read default project code
	#include "itppdm0125"	|* read record macro
	#include "itppdm0130"	|* Update project in project archive
	#include <bic_dam>
	#include <bic_text>

								|#200-102298.sn
	#define STRUCTURE.BUDGET  (tppdm600.btpr = tppdm.bdtp.struct.budget)
	#define ACTIVITY.BUDGET   (tppdm600.btpr = tppdm.bdtp.activity.budget)
	#define STRUCTURE.CONTROL (tppdm600.btco = tppdm.bdtp.struct.budget)
	#define ACTIVITY.CONTROL   (tppdm600.btco = tppdm.bdtp.activity.budget)

								|#200-102298.en

|**************************** program sections *********************************

before.program:
	tppdm.dll0000.read.parameters()
								|#Tax-prov.so
|	g.dummy.long = tcmcs.dll0095.read.parm("tccom998")	|#200-103004.n
								|#Tax-prov.eo
	g.dummy.long = tcmcs.dll0095.read.parm("tctax600")	|#Tax-prov.n
	get.number.group.and.default.series()
	copy.template = tppdm.yeno.no				|#BRQ000575.sn
	import("prog.name$", calling.program)
| 	import("copy.project", copy.project)			|ISG001007.old
| 	import("copy.template", copy.template)			|ISG001007.old
	copy.project = tppdm.yeno.yes				|ISG001007.new
| 	copy.template = tppdm.yeno.yes				|ISG001007.new
	if calling.program(1;9) = "tppdm6500" and
	    (copy.project = tppdm.yeno.no and
	       copy.template = tppdm.yeno.no) then
		sattr.descr$ = form.text$("tppdms0211")
		|* Create Project from Template
	endif
								|#200-105103.so
|								|#200-104714.sn
|	if calling.program(1;9) = "tppdm0800" then
|		sattr.descr$ = form.text$("tppdms0211")
|		|* Create Project from Template
|	endif
|								|#200-104714.en
								|#200-105103.eo
	if copy.template = tppdm.yeno.yes then
		sattr.descr$ = form.text$("tppdms0212")
		|* Save as Template
	endif							|#BRQ000575.en
	
	

|before.display.object:						|#200-102304.o
								|#200-102304.sn
|****************************form sections ***********************************

|group.1:							|#1357826.so
|init.group:					|#200-102304.en	|#1357826.eo
zoom.from.all:							|#1357826.sn	
on.entry:							|#1357826.en
	if not isspace(cprj) then
		|* Get EU / EU description from source project
		g.dummy.bool = tpint.dlltcemm.what.enterprise.unit.is.entity.of(
				loco,
				tcemm.enty.project,cprj,source.eu)
		g.dummy.bool = tpint.dlltcemm.get.enterprise.unit.details(
				source.eu,
				source.eu.desc,	dummy.loco,
				dummy.loco,dummy.bpid,dummy.timz)
		if target.project.exists() then
			|* Set Target EU to EU of existing target project
			|* Changing EU is not allowed
			set.default.target.eu()
			disable.fields("target.eu")
		else
			|* Set Target EU to EU of source project
			|* Changing EU is allowed
			target.eu = source.eu
			target.eu.desc = source.eu.desc
			enable.fields("target.eu")
		endif
	endif

	cprj.copy.in052 = false
	serie.checked = false
	serie.valid = false
	copy.cprj.used = false

|								|#200-102304.so
||****************************form sections ***********************************
|group.1:
|init.group:							|#200-102304.eo
	loco = get.compnr()
	get.screen.defaults()
								|#UI-improve.sn
	itcmcs2001.determine.fields.for.import()
	g.dummy.bool = itcmcs2001.search.and.import.from.and.to.field(
				"cprj", cprj)
	if isspace(cprj) then
								|#UI-improve.en
|	if not defaults.saved() then				|#UI-improve.o
		cprj = read.default.project.code()
	endif
	if background then
		import("tppdm600.cprj",cprj)
|		import("tppdm600.psts",psts)			|#UI-improve.o
		display("cprj")
		display("psts")
		select	tcmcs052.dsca:cprj.desc,
			tcmcs052.txta:cprj.txta.orig
		from	tcmcs052
		where	tcmcs052._index1 = {:cprj}
		as set with 1 rows
		selectdo
			display("cprj.desc")
		endselect
	endif
	disable.commands(cont.process)
	if source.project.valid() then
		copy.est.to.prj = tppdm.yeno.no			|#239087.n
		disable.fields("copy.est.to.prj")
	else
		if tppdm600.tmpl = tppdm.yeno.yes then		|#239087.sn
			copy.est.to.prj = tppdm.yeno.no
		endif						|#239087.en
		enable.fields("copy.est.to.prj")
	endif
	if calling.program(1;9) = "tppdm6500" and		|#BRQ000575.sn
	    copy.project = tppdm.yeno.no then
		copy.est.to.prj = tppdm.yeno.no			|#239087.n
		disable.fields("copy.est.to.prj")
	endif
								|#200-105103.so
|								|#200-104714.sn
|	if calling.program(1;9) = "tppdm0800" then
|		disable.fields("copy.est.to.prj")
|	endif
|								|#200-104714.en
								|#200-105103.eo
|	disable.fields("main.proj")				|#BRQ000575.en
	if sub.proj = tppdm.yeno.no then			|#250262.sn
		disable.fields("main.proj")
		main.proj = ""
		cprj.m.desc = ""
	else
		enable.fields("main.proj")
	endif							|#250262.en
	handle.enable.disable.fields()				|#BRQ000575.n
	if not isspace(cprj) then
		|* Get EU / EU description from source project
		g.dummy.bool = tpint.dlltcemm.what.enterprise.unit.is.entity.of(
				loco,
				tcemm.enty.project,cprj,source.eu)
		g.dummy.bool = tpint.dlltcemm.get.enterprise.unit.details(
				source.eu,
				source.eu.desc,	dummy.loco,
				dummy.loco,dummy.bpid,dummy.timz)
		get.source.project.related.data()		|#200-103004.n
		if target.project.exists() then
			|* Set Target EU to EU of existing target project
			|* Changing EU is not allowed
			set.default.target.eu()
			disable.fields("target.eu")
		else
			target.eu = source.eu
			target.eu.desc = source.eu.desc
			enable.fields("target.eu")
		endif
	endif

	cprj.copy.in052 = false
	serie.checked = false
	serie.valid = false
	copy.cprj.used = false

|	if gen.data.exist = tppdm.yeno.yes then			|#BRQ000575.so
|		disable.fields("gen.data.yeno")
|	else
|		enable.fields("gen.data.yeno")
|	endif
|
|	if cost.unit.exist = tppdm.yeno.yes then
|		disable.fields("cost.unit.yeno")
|	else
|		enable.fields("cost.unit.yeno")
|	endif

|	if plan.exist = tppdm.yeno.yes then
|		plan.yeno = tppdm.yeno.no
|		disable.fields("plan.yeno")
|	else
|		enable.fields("plan.yeno")
|	endif

|	if calc.exist = tppdm.yeno.yes or
|	   cost.unit.yeno = tppdm.yeno.no then
|		calc.yeno = tppdm.yeno.no
|		disable.fields("calc.yeno")
|	else
|		enable.fields("calc.yeno")
|	endif

|	if charges.exist = tppdm.yeno.yes then
|		disable.fields("charges.yeno")
|	else
|		enable.fields("charges.yeno")
|	endif							|#BRQ000575.eo

|**************************** choice sections **********************************

choice.cont.process:
before.choice:
	check.all.input()
on.choice:
	if estimate.yeno = tppdm.yeno.yes then			|#ISG001007.sn
		i.estimate = tppdm.yeno.yes
	else
		i.estimate = tppdm.yeno.no
	endif							|#ISG001007.en
	prj.rsac = ""
	if (gen.data.yeno  = tppdm.yeno.no and
	   cost.unit.yeno = tppdm.yeno.no and
|	   plan.yeno      = tppdm.yeno.no and			|#BRQ000575.so
|	   calc.yeno      = tppdm.yeno.no and
|	   charges.yeno   = tppdm.yeno.no and			|#BRQ000575.eo
	   scope.def.yeno = tppdm.yeno.no and		        |#BRQ000575.sn
|	   extension.yeno = tppdm.yeno.no and			|#200-103018.o
	   baseline.yeno = tppdm.yeno.no  and
	   bottom.up.yeno = tppdm.yeno.no and
	   top.down.yeno = tppdm.yeno.no and
	   bca.code.yeno = tppdm.yeno.no and
	   tpb.code.yeno = tppdm.yeno.no and
	   advance.yeno = tppdm.yeno.no   and
	   installment.yeno = tppdm.yeno.no and
	   budget.surch.yeno = tppdm.yeno.no and
	   cost.surch.yeno = tppdm.yeno.no and
	   rev.surch.yeno = tppdm.yeno.no and		        |#BRQ000575.en
	  (copy.est.to.prj= tppdm.yeno.no or
	   estimate.yeno  = tppdm.yeno.no)) or
	   isspace(cprj.copy) or
	   valid.target.project then
		choice.again()
	endif
 |*Progress Indicator
	create.progress.indicator(form.text$("tppdm78401"),0+PROGRESS.CANCEL)
	|* Copying Projects
	spool.report = "rtppdm784001000"
	if not rprt_open() then
		destroy.progress.indicator()
		choice.again()
	endif
	if copy.the.project() = 0 then
	endif
	destroy.progress.indicator()
after.choice:
|	if calc.exist = tppdm.yeno.yes  then			|#BRQ000575.so
|		calc.yeno = tppdm.yeno.no
|		disable.fields("calc.yeno")
|		display("calc.yeno")
|	endif

|	if  plan.exist = tppdm.yeno.yes	 then
|		plan.yeno = tppdm.yeno.no
|		disable.fields("plan.yeno")
|		display("plan.yeno")
|	endif

|	if charges.exist = tppdm.yeno.yes then
|		charges.yeno = tppdm.yeno.no
|		disable.fields("charges.yeno")
|		display("charges.yeno")
|	endif							|#BRQ000575.eo

	handle.enable.disable.fields()				|#BRQ000575.n

	if not estimates.exist and
	   scope.exist = tppdm.yeno.no then			|#200-104678.n
		estimate.yeno = tppdm.yeno.no
		disable.fields("estimate.yeno")
		display("estimate.yeno")
	endif
	rprt_close(1)
	if background then
		export("tppdm600.cprj",cprj.copy)
		if not RemoveInvalidElementsFrom.tpptc100()then	|#ISG001007.sn
			message("Error in Removing Invalid Elements")
		else
			RemoveElementsFrom.tpptc101()
			RemoveElementsFrom.tpest120()
		endif							
		if i.estimate = tppdm.yeno.yes then
			RemoveElementsFrom.tpest200()
		endif							|#ISG001007.en
		end()
	else
		if not RemoveInvalidElementsFrom.tpptc100()then	|#ISG001007.sn
			message("Error in Removing Invalid Elements")
		else
			RemoveElementsFrom.tpptc101()
			RemoveElementsFrom.tpest120()
		endif					
		
		if i.estimate = tppdm.yeno.yes then
			if RemoveElementsFrom.tpest200() then
				message("Error in Updating Estimation Lines")
			endif
		endif							|#ISG001007.en
		check.fields()
	endif
choice.abort.program:
before.choice:
	if number.generated and hold.cprj.not.exist() then
	   |* Reset FFN; it is not used.
	if not copy.cprj.used then
	   tppdm.dll0600.reset.first.free.number.with.commit(hold.cprj,
							     number.group)
	endif
	endif

|**************************** field sections ***********************************

field.cprj:
when.field.changes:
|	if source.project.valid() then				|#200-104563.o
	if source.project.valid() or				|#200-104563.sn
	      (calling.program(1;9) = "tppdm6500" and
		   copy.project = tppdm.yeno.no) then	   	|#200-104563.en
		copy.est.to.prj = tppdm.yeno.no 		|#239087.n
		disable.fields("copy.est.to.prj")
	else
		if tppdm600.tmpl = tppdm.yeno.yes then		|#239087.sn
			copy.est.to.prj = tppdm.yeno.no
		endif						|#239087.en
		enable.fields("copy.est.to.prj")
	endif
	display("copy.est.to.prj")				|#239087.n

	|* Get EU / EU description from source project
	g.dummy.bool = tpint.dlltcemm.what.enterprise.unit.is.entity.of(loco,
				tcemm.enty.project,cprj,source.eu)
	g.dummy.bool = tpint.dlltcemm.get.enterprise.unit.details(
			source.eu,source.eu.desc,
			dummy.loco, dummy.loco,dummy.bpid,dummy.timz)
	get.source.project.related.data()			|#200-103004.n
	if target.project.exists() then
		|* Set Target EU to EU of existing target project
		|* Changing EU is not allowed
		set.default.target.eu()
		disable.fields("target.eu")
	else
		|* Set Target EU to EU of source project
		|* Changing EU is allowed
		target.eu = source.eu
		target.eu.desc = source.eu.desc
		enable.fields("target.eu")			|#200-103004.sn
		enable.fields("padr", "sadr", "frm.pwar")
		padr = source.padr
		sadr = source.sadr
		frm.pwar = source.pwar
		add.nama.1 = source.add.nama.1
		add.nama.2 = source.add.nama.2
		pwar.dsca  = source.pwar.dsca
		display("target.eu")
		display("target.eu.desc")
		display("padr")
		display("sadr")
		display("frm.pwar")				|#200-103004.en
	endif
selection.filter:						|#200-102289.sn
	if calling.program(1;9) = "tppdm6500" and
	    (copy.project = tppdm.yeno.no and
	       copy.template = tppdm.yeno.no) then
		SET.BROWSE.FILTER.UI("tppdm600","tmpl")
 	endif							|#200-102289.en
before.zoom:
	tppdm600.cprj = cprj
check.input:
|	psts = empty						|#200-104557.so
|	cprj.desc = unref.sign					|#200-104557.eo
	project.error = false					|#200-103006.n
	select 	tppdm600.*,
		tcmcs052.dsca,
		tcmcs052.txta
	from	tppdm600,tcmcs052
	where	tppdm600._index1 = {:cprj}
	and	tppdm600.cprj refers to tcmcs052
	as set with 1 rows
	selectdo
|		psts = tppdm600.psts				|#200-104557.so
|		cprj.desc = tcmcs052.dsca			|#200-104557.eo
		cprj.txta.orig = tcmcs052.txta
		key.entity.exist = check.key.entity()
		if not key.entity.exist then
			set.input.error("tppdm7840.02")
			|* It is not allowed to copy a project that does not
			|* have a key entity in the current company.
			project.error = true			|#200-103006.n
		endif
		if calling.program(1;9) = "tppdm6500" and	|#200-102618.sn
		    (copy.project = tppdm.yeno.no and
		       copy.template = tppdm.yeno.no) then
			if tppdm600.tmpl = tppdm.yeno.no then
				set.input.error("tppdm7840.08")
				|* Project is not of type Template
				project.error = true		|#200-103006.n
			endif
	 	endif						|#200-102618.en
								|#200-105103.so
|								|#200-104714.sn
|		if calling.program(1;9) = "tppdm0800"
|		and tppdm600.tmpl = tppdm.yeno.no then
|			set.input.error("tppdm7840.08")
|				|* Project is not of type Template
|				project.error = true
|		endif
|								|#200-104714.en
								|#200-105103.eo
		if not project.error then			|#200-103066.sn
			psts = tppdm600.psts
			cprj.desc = tcmcs052.dsca
		endif						|#200-103066.en
	selectempty
		display("psts")
		display("cprj.desc")
		set.input.error("tppdmt6001")
		|* Project not present.
		project.error = true				|#200-103006.n
	endselect
	if not project.error then				|#200-103006.n
		display("psts")
		display("cprj.desc")
	endif							|#200-103006.n

field.cprj.copy:
before.zoom:

	determine.project.coding.values()			|#200-104557.n

	on case ask.enum("tppdm6100",empty)
	|* Determine the Project coding
	case tppdm.prse.proj.series:
		if isspace(cprj.serie) then
			mess("tppdm6100r",1)
			|* No Series defined in User Profile or Project
			|* Parameters
		else
			tppdm.dll0066.copy.string.with.different.domains(
					cprj.serie, cprj.copy, "tccprj")
		endif
		attr.zoomcode = 0
		break
	case tppdm.prse.est.series:
		if isspace(est.serie) then
			mess("tppdm6100r",1)
			|* No Series defined in User Profile or Project
			|* Parameters
		else
			tppdm.dll0066.copy.string.with.different.domains(
					est.serie, cprj.copy, "tccprj")
		endif
		attr.zoomcode = 0
		break
	case tppdm.prse.first.freeno:
		get.number.group.and.default.series()		|#233072.n
		tcmcs050.nrgr = number.group
		tcmcs050.seri = cprj.copy
		#pragma used session tcmcs0150m000
		|* First Free Numbers
		attr.zoomsession$ = "tcmcs0150m000"
		attr.zoomreturn$ = "tcmcs050.seri"
		zoom.standard = true
		break
	case tppdm.prse.projects:
		tppdm600.cprj = cprj.copy
		#pragma used session tppdm6500m000
		|* Projects
		attr.zoomsession$ = "tppdm6500m000"
		attr.zoomreturn$ = "tppdm600.cprj"
		zoom.standard = true
		break
	case tppdm.prse.gen.proj:
		tcmcs052.cprj = cprj.copy
		#pragma used session tcmcs0552m000
		|* General Projects
		attr.zoomsession$ = "tcmcs0552m000"
		attr.zoomreturn$ = "tcmcs052.cprj"
		zoom.standard = true
		break
	case tppdm.prse.temp.series:				|#BRQ000575.sn
		get.template.number.group.and.default.series()
		|* Fill project with default project serie.
		if isspace(tmpl.serie) then
			mess("tppdm6100r",1)
			|* No Series defined in User Profile or Project
			|* Parameters
		else
			tppdm.dll0066.copy.string.with.different.domains(
					tmpl.serie, cprj.copy, "tccprj")
		endif						|#BRQ000575.en
		attr.zoomcode = 0
		break
	case tppdm.prse.close:
	default:
		attr.zoomcode = 0
	endcase
after.zoom:
	if not isspace(zoom.project) then
		cprj.copy = zoom.project
	endif
before.checks:
	if not isspace(number.group) and not isspace(cprj.copy) then
		handle.project.numbering()
	endif
check.input:
	copy.cprj.used = false
	if cprj.copy = cprj then
		set.input.error("tppdm7840.01")
		|* 'Destination' project may not be the same as 'Source' project
	else
		select	tcmcs052.*
		from	tcmcs052
		where	tcmcs052._index1 = {:cprj.copy}
		as set with 1 rows
		selectdo
			if tcmcs052.plnk = tcmcs.plnk.ti then
				set.input.error("tppdms0102")
				|* Project already used in ERP LN Manufacturing.
			else
				if (tcmcs052.plnk = tcmcs.plnk.tp) then
					if target.project.exists() then
						cprj.copy.in052 = true
					else
						set.input.error("tppdms6100.99",
						|* Project "%1$s"  is already
						|* present in General Projects.
								 cprj.copy)
						copy.cprj.used = true
					endif
				else
					cprj.copy.in052 = true
				endif
			endif
		selectempty
			if isspace(cprj.copy) then
				set.input.error("tppdmd0002")
				|* Empty Target Project not allowed.
			endif
			cprj.copy.in052 = false
		endselect
	endif
	project.present = false
	default.cprj.c.desc = cprj.desc
	gen.data.exist = tppdm.yeno.no
	cost.unit.exist = tppdm.yeno.no
|	plan.exist = tppdm.yeno.no				|#BRQ000575.so
|	calc.exist = tppdm.yeno.no
|	charges.exist = tppdm.yeno.no				|#BRQ000575.eo
	scope.exist = tppdm.yeno.no				|#BRQ000575.sn
|	extension.exist = tppdm.yeno.no				|#200-103018.o
	baseline.exist = tppdm.yeno.no
	bottom.up.exist = tppdm.yeno.no
	top.down.exist = tppdm.yeno.no
	bca.code.exist = tppdm.yeno.no
	tpb.code.exist = tppdm.yeno.no
	advance.exist = tppdm.yeno.no
	installment.exist = tppdm.yeno.no
	budget.surcharges.exist = tppdm.yeno.no
	cost.surcharges.exist = tppdm.yeno.no
	revenue.surcharges.exist = tppdm.yeno.no		|#BRQ000575.en
	select	tppdm600.*
	from	tppdm600
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		project.present = true
		default.cprj.c.desc = ""
		cprj.c.desc = tcmcs052.dsca
		gen.data.exist = check.gen.data.exist()
		cost.unit.exist = check.cost.unit.exist()
		if cost.unit.exist = tppdm.yeno.no then
|			calc.exist = check.calc.exist()		|#BRQ000575.o
								|#BRQ000575.sn
			bottom.up.exist = check.bottom.up.exist()
			top.down.exist = check.top.down.exist()
			bca.code.exist = check.bca.code.exist()
			tpb.code.exist = check.tpb.code.exist()	|#BRQ000575.en
		else
|			calc.exist = tppdm.yeno.yes		|#BRQ000575.o
			bottom.up.exist = tppdm.yeno.yes	|#BRQ000575.n

		endif
|		plan.exist = check.plan.exist()			|#BRQ000575.so
|		charges.exist = check.charges.exist()		|#BRQ000575.eo
		scope.exist = check.scope.exist()		|#BRQ000575.sn
|		extension.exist = check.extension.exist()	|#200-103018.o
		baseline.exist = check.baseline.exist()
		advance.exist = check.advance.exist()
		installment.exist = check.installment.exist()
		budget.surcharges.exist = check.budget.surcharges.exist()
		cost.surcharges.exist = check.cost.surcharges.exist()
		revenue.surcharges.exist = check.revenue.surcharges.exist()
								|#BRQ000575.en
	endselect

	if gen.data.exist = tppdm.yeno.yes then
		gen.data.yeno = tppdm.yeno.no
	endif
	if cost.unit.exist = tppdm.yeno.yes then
		cost.unit.yeno = tppdm.yeno.no
	endif
|	if plan.exist = tppdm.yeno.yes then			|#BRQ000575.so
|		plan.yeno = tppdm.yeno.no
|	endif
|	if calc.exist = tppdm.yeno.yes then
|		calc.yeno = tppdm.yeno.no
|	endif
|	if charges.exist = tppdm.yeno.yes then
|		charges.yeno = tppdm.yeno.no
|	endif							|#BRQ000575.eo
	if scope.exist = tppdm.yeno.yes then			|#BRQ000575.sn
		scope.def.yeno = tppdm.yeno.no
	endif
|	if extension.exist = tppdm.yeno.yes then		|#200-103018.so
|		extension.yeno = tppdm.yeno.no
|	endif							|#200-103018.eo

	if baseline.exist = tppdm.yeno.yes then
		baseline.yeno = tppdm.yeno.no
	endif
	if bottom.up.exist = tppdm.yeno.yes then
		bottom.up.yeno = tppdm.yeno.no
	endif

	if top.down.exist = tppdm.yeno.yes then
		top.down.yeno = tppdm.yeno.no
	endif

	if bca.code.exist = tppdm.yeno.yes then
		bca.code.yeno = tppdm.yeno.no
	endif

	if tpb.code.exist = tppdm.yeno.yes then
		tpb.code.yeno = tppdm.yeno.no
	endif
	if advance.exist = tppdm.yeno.yes then
		advance.yeno = tppdm.yeno.no
	endif
	if installment.exist = tppdm.yeno.yes then
		installment.yeno = tppdm.yeno.no
	endif
	if budget.surcharges.exist = tppdm.yeno.yes then
		budget.surch.yeno = tppdm.yeno.no
	endif
	if cost.surcharges.exist = tppdm.yeno.yes then
		cost.surch.yeno = tppdm.yeno.no
	endif

	if revenue.surcharges.exist = tppdm.yeno.yes then
		rev.surch.yeno = tppdm.yeno.no
	endif							|#BRQ000575.en
when.field.changes:
	if project.present then
		|* Set Target EU to EU of existing target project
		|* Changing EU is not allowed
		set.default.target.eu()
		disable.fields("target.eu")
		get.target.project.related.data()		|#200-103004.n
	else
		|* Set Target EU to EU of source project
		|* Changing EU is allowed
		enable.fields("target.eu")
		enable.fields("padr", "sadr", "frm.pwar")	|#200-103004.n
		target.eu = source.eu
		target.eu.desc = source.eu.desc
		padr = source.padr				|#200-103004.sn
		sadr = source.sadr
		add.nama.1 = source.add.nama.1
		add.nama.2 = source.add.nama.2
		pwar.dsca  = source.pwar.dsca
		display("target.eu")
		display("target.eu.desc")
		display("padr")
		display("sadr")
		display("frm.pwar")
		display("add.nama.1")
		display("add.nama.2")
		display("pwar.dsca")				|#200-103004.en
	endif
	|* when using first free numbers,the when.field.changes is not triggered
	if project.present and valid.source then
		copy.est.to.prj = tppdm.yeno.no			|#239087.n
		disable.fields("copy.est.to.prj")
	else
		if tppdm600.tmpl = tppdm.yeno.yes then		|#239087.sn
			copy.est.to.prj = tppdm.yeno.no
		endif						|#239087.en
		enable.fields("copy.est.to.prj")
	endif
	display("copy.est.to.prj")				|#239087.n

	if calling.program(1;9) = "tppdm6500" and		|#200-104563.sn
	    copy.project = tppdm.yeno.no then
		disable.fields("copy.est.to.prj")
	endif							|#200-104563.en
								|#200-105103.so
|								|#200-104714.sn
|	if calling.program(1;9) = "tppdm0800" then
|		disable.fields("copy.est.to.prj")
|	endif							|#200-104714.en
								|#200-105103.eo
|	if gen.data.exist = tppdm.yeno.yes then			|#BRQ000575.so
|		disable.fields("gen.data.yeno")
|	else
|		enable.fields("gen.data.yeno")
|	endif

|	if cost.unit.exist = tppdm.yeno.yes then
|		disable.fields("cost.unit.yeno")
|	else
|		enable.fields("cost.unit.yeno")
|	endif

|	if plan.exist = tppdm.yeno.yes then
|		plan.yeno = tppdm.yeno.no
|		disable.fields("plan.yeno")
|	else
|		enable.fields("plan.yeno")
|	endif
|
|	if calc.exist = tppdm.yeno.yes or
|	   cost.unit.yeno = tppdm.yeno.no then
|		calc.yeno = tppdm.yeno.no
|		disable.fields("calc.yeno")
|	else
|		enable.fields("calc.yeno")
|	endif
|
|	if charges.exist = tppdm.yeno.yes then
|		disable.fields("charges.yeno")
|	else
|		enable.fields("charges.yeno")
|	endif							|#BRQ000575.eo

	handle.enable.disable.fields()				|#BRQ000575.n

	if estimate.data.exists() then
	    if target.project.valid() =  1 then
		disable.all.fields()
		mess("tppdms0237",1)
		|* The target has already resulted in a Project and is frozen.
		|* Hence it can not be used as Target.
		valid.target.project = true
	    else
		if target.project.valid() =  2 then
			copy.est.to.prj = tppdm.yeno.no		|#239087.n
			disable.fields("copy.est.to.prj")
			disable.fields("estimate.yeno")
		endif
	    endif
	else
		if scope.exist = tppdm.yeno.no then		|#200-104678.n
			enable.fields("estimate.yeno")
		endif						|#200-104678.n
	endif
	if cprj.copy.in052 then
		cprj.c.desc = tcmcs052.dsca
		disable.fields("cprj.c.desc")
	else
		cprj.c.desc = " "
		display("cprj.c.desc")
		enable.fields("cprj.c.desc")
	endif
	check.fields()
	display.all()

field.sub.proj:
when.field.changes:
	if sub.proj = tppdm.yeno.no then
		disable.fields("main.proj")
		main.proj = ""					|#250262.sn
		cprj.m.desc = ""
		display("main.proj")
		display("cprj.m.desc")				|#250262.sn
	else
		enable.fields("main.proj")
	endif
	display.all()

field.main.proj:
selection.filter:
	SET.BROWSE.FILTER.UI("tppdm600","mprj")
before.zoom:
	tppdm600.cprj = main.proj
when.field.changes:
	select	tcmcs052.dsca:cprj.m.desc
	from	tcmcs052
	where	tcmcs052._index1 = {:main.proj}
	as set with 1 rows
	selectdo
		display("cprj.m.desc")
	endselect
check.input:

	if sub.proj = tppdm.yeno.yes then
		select	tppdm600.kopr,tppdm600.psts,tppdm600.tmpl
		from    tppdm600
		where   tppdm600.cprj = :main.proj
		as set with 1 rows
		selectdo
			if tppdm600.kopr <> tppdm.kopr.main then
				set.input.error("tppdma0099")
				|* No main project
			endif
			if copy.template = tppdm.yeno.yes and
				tppdm600.tmpl = tppdm.yeno.no then
				set.input.error("tppdm7840.04")
				|* If Subproject is a to be of type Template,
				|* then Main project should also be a Template
			endif
			if copy.template = tppdm.yeno.no and
				tppdm600.tmpl = tppdm.yeno.yes then
				set.input.error("tppdm7840.05")
				|* If Subproject is a not of type Template, then
				|* Main project cannot be a Template
			endif
		selectempty
			set.input.error("tppdmt6003")
			|* The Main Project is not specified.
		endselect
	endif

field.padr:							|#200-103004.sn
when.field.changes:
	add.nama.1 = get.address.nama(padr)
check.input:
	if not isspace(padr) then
		select	tccom130.cadr
		from	tccom130
		where	tccom130._index1 = {:padr}
		as set with 1 rows
		selectdo
		selectempty
			set.input.error("tppdms5024")
			|* Address code not present
		endselect
	endif							|#200-103004.en

field.target.eu:
when.field.changes:
	| for getting the description of EU
	g.dummy.bool = tpint.dlltcemm.get.enterprise.unit.details(
			target.eu,target.eu.desc,
			dummy.loco,dummy.loco,dummy.bpid,dummy.timz)
check.input:
	if isspace(target.eu) then
		set.input.error("tppdms5021")
		|* Enterprise Unit  is mandatory
	else
		|* Check combination of financial and logistic companies
		if g.dummy.bool = tpint.dlltcemm.get.enterprise.unit.details(
				target.eu,
				target.eu.desc, o.fico, dummy.loco,
				dummy.bpid, dummy.timz) then
			if o.fico = 0 then
				set.input.error("tppdms6001",1)
				|* The combination of Financial and Logistic
				|* companies is not valid.
				return
			endif
		else
			set.input.error("tppdms0101")
			|* Enterprise Unit not allowed.
			return
		endif
		|* check combination of financial companies
		|* (do homecurrencies match?)
		if not tpint.dlltcemm.comb.of.financial.companies.ok(
						tppdm600.ncmp, 	|* old.ico
						o.fico,		|* new.fico
						error.mess.code) then
			set.input.error(error.mess.code)
			return
		endif
		|* Check whether EU of entity and logistic company are the same
		if not tpint.dlltcemm.check.eunit.used.in.loco(
						loco,
						target.eu,
						error.mess.code) then
			set.input.error(error.mess.code)
			return
		endif
		if not tpint.dlltfgld.period.project.equals.finance(
						o.fico,
						tpppc000.cptf,
						tpppc000.year,
						error.mess.code) then
			set.input.error("tppdms0224")
			|* Financial periods must be equal: Fiscal period in
			|* financial company and PPC financial period in actual
			|* company.
			return
		endif
	endif

field.frm.pwar:							|#200-103004.sn
selection.filter:
	SET.BROWSE.FILTER.UI("tppdm600","pwar")
when.field.changes:
	pwar.dsca = get.pwar.description(frm.pwar)
check.input:
 if not isspace(frm.pwar) then
	select	tcmcs003.cwar, tcmcs003.typw
	from	tcmcs003
	where	tcmcs003._index1 = {:frm.pwar}
	as set with 1 rows
	selectdo
		if tcmcs003.typw <> tctypw.normal then
			set.input.error("tppdms00116")
			|* Priority supply warehouse type must be 'Normal'
		endif
		if tpint.dlltcemm.is.warehouse.in.company(
						get.compnr(), frm.pwar) then
			set.input.error("tppdms600.99", get.compnr())
			|* Warehouse should belong to the logistic company %1$s
		endif
	selectempty
		set.input.error("tcmcst0031")
		|* Warehouse not found.
	endselect
 endif

field.sadr:
when.field.changes:
	if sadr <> padr then
		add.nama.2 = get.address.nama(sadr)
	else
		add.nama.2 = add.nama.1
	endif
check.input:
|	if isspace(sadr) and tccom998.txpr = tcyesno.yes	|#Tax-prov.o
	if isspace(sadr) and tctax600.txpr = tcyesno.yes	|#Tax-prov.n
	   and not project.present then
		set.input.error("tppdm6100k")
		|* Ship-from address must be filled when using tax provider
	endif
	if not isspace(sadr) then
		select	tccom130.cadr
		from	tccom130
		where	tccom130._index1 = {:sadr}
		as set with 1 rows
		selectdo
		selectempty
			set.input.error("tppdms5024")
			|* Address code not present
		endselect
	endif							|#200-103004.en

field.new.stdt:							|#BRQ000575.sn
when.field.changes:
	if new.stdt <> 0 then
		new.fidt = 0
		disable.fields("new.fidt")
	else
		enable.fields("new.fidt")
	endif

field.new.fidt:
when.field.changes:
	if new.fidt <> 0 then
		new.stdt = 0
		disable.fields("new.stdt")
	else
		enable.fields("new.stdt")
	endif							|#BRQ000575.en

field.copy.est.to.prj:
when.field.changes:
	if scope.exist = tppdm.yeno.yes then			|#200-104678.n
	if copy.est.to.prj = tppdm.yeno.yes then
		estimate.yeno = tppdm.yeno.yes
		cost.unit.yeno = tppdm.yeno.yes
								|#200-104678.so
|		scope.def.yeno = tppdm.yeno.yes			|#200-103016.n
								|#200-104678.eo
		disable.fields("estimate.yeno")
		disable.fields("cost.unit.yeno")
								|#200-104678.so
		disable.fields("scope.def.yeno")		|#200-103016.n
								|#200-104678.eo
|		enable.fields("calc.yeno")			|#BRQ000575.o
		enable.fields("bottom.up.yeno")			|#BRQ000575.sn
		enable.fields("top.down.yeno")			|#BRQ000575.en
	else
		estimate.yeno = tppdm.yeno.no
		cost.unit.yeno = tppdm.yeno.no
								|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no			|#200-103016.n
								|#200-104678.eo
|		calc.yeno = tppdm.yeno.no			|#BRQ000575.o
		bottom.up.yeno = tppdm.yeno.no			|#BRQ000575.n
		enable.fields("estimate.yeno")
		enable.fields("cost.unit.yeno")
								|#200-104678.so
|		enable.fields("scope.def.yeno")			|#200-103016.n
								|#200-104678.eo
|		disable.fields("calc.yeno")			|#BRQ000575.o
		enable.fields("bottom.up.yeno")			|#BRQ000575.sn
		enable.fields("top.down.yeno")			|#BRQ000575.en
	endif
	endif
	display("estimate.yeno")
	display("cost.unit.yeno")
								|#200-104678.so
|	display("scope.def.yeno")				|#200-103016.n
								|#200-104678.eo
|	display("calc.yeno")					|#BRQ000575.o
	display("bottom.up.yeno")				|#BRQ000575.sn
	display("top.down.yeno")				|#BRQ000575.en
	check.fields()

field.gen.data.yeno:
when.field.changes:
	check.fields()

field.cost.unit.yeno:
when.field.changes:
								|#BRQ000575.so
|       if calc.exist = tppdm.yeno.yes or cost.unit.yeno = tppdm.yeno.no then
|		calc.yeno = tppdm.yeno.no
|		display("calc.yeno")
|		disable.fields("calc.yeno")
|	else
|		enable.fields("calc.yeno")
|	endif


								|#BRQ000575.eo
								|#BRQ000575.sn
       if bottom.up.exist = tppdm.yeno.yes or
	     cost.unit.yeno = tppdm.yeno.no then
		bottom.up.yeno = tppdm.yeno.no
		display("bottom.up.yeno")
		disable.fields("bottom.up.yeno")
	else
		enable.fields("bottom.up.yeno")
	endif							|#BRQ000575.en
	check.fields()

|field.plan.yeno:						|#BRQ000575.so
|when.field.changes:
|	check.fields()
|

|field.calc.yeno:
|when.field.changes:
|	check.fields()
|

|field.charges.yeno:
|when.field.changes:
|	check.fields()						|#BRQ000575.eo

field.scope.def.yeno:						|#BRQ000575.sn
when.field.changes:
	enable.disable.relationship()				|#200-103016.n
	check.fields()
check.input:
|	if (scope.def.yeno = tppdm.yeno.yes and			|#200-103018.so
|		extension.yeno = tppdm.yeno.no) then		|#200-103018.en
	if scope.def.yeno = tppdm.yeno.yes then			|#200-103018.sn
			extension.yeno = tppdm.yeno.yes
|			enable.fields("extension.yeno")		|#200-103018.so
|			display("extension.yeno")		|#200-103018.eo
	endif
|field.extension.yeno:						|#200-103018.so
|when.field.changes:
|	check.fields()						|#200-103018.eo

field.baseline.yeno:
check.input:
	if (baseline.yeno = tppdm.yeno.yes and
		scope.def.yeno = tppdm.yeno.no) then
			scope.def.yeno = tppdm.yeno.yes
			enable.fields("scope.def.yeno")
			display("scope.def.yeno")
	endif
|	if (baseline.yeno = tppdm.yeno.yes and			|#200-103018.so
|		extension.yeno = tppdm.yeno.no) then		|#200-103018.eo
	if baseline.yeno = tppdm.yeno.yes then			|#200-103018.n
			extension.yeno = tppdm.yeno.yes
|			enable.fields("extension.yeno")		|#200-103018.so
|			display("extension.yeno")		|#200-103018.eo
	endif
when.field.changes:
								|#200-104678.so
|	if (baseline.yeno = tppdm.yeno.yes and			|#200-103016.sn
|		scope.def.yeno = tppdm.yeno.no) then
|		scope.def.yeno = tppdm.yeno.yes
|		enable.fields("scope.def.yeno")
|		display("scope.def.yeno")
|	endif							|#200-103016.en
								|#200-104678.eo
	check.fields()

field.bottom.up.yeno:
when.field.changes:
								|#200-104678.so
|	if (installment.yeno = tppdm.yeno.yes and		|#200-103016.sn
|		scope.def.yeno = tppdm.yeno.no) then
|			scope.def.yeno = tppdm.yeno.yes
|			enable.fields("scope.def.yeno")
|			display("scope.def.yeno")
|	endif							|#200-103016.en
								|#200-104678.eo

	if bottom.up.yeno = tppdm.yeno.yes then
		cost.unit.yeno = tppdm.yeno.yes
		display("cost.unit.yeno")
	endif
	check.fields()

field.top.down.yeno:
when.field.changes:
								|#200-104678.so
|	if (top.down.yeno = tppdm.yeno.yes and			|#200-103016.sn
|		scope.def.yeno = tppdm.yeno.no) then
|		scope.def.yeno = tppdm.yeno.yes
|		enable.fields("scope.def.yeno")
|		display("scope.def.yeno")
|	endif							|#200-103016.en
								|#200-104678.eo
	check.fields()
check.input:
	if (top.down.yeno = tppdm.yeno.yes and
		scope.def.yeno = tppdm.yeno.no) then
			scope.def.yeno = tppdm.yeno.yes
			enable.fields("scope.def.yeno")
			display("scope.def.yeno")
	endif

field.bca.code.yeno:
when.field.changes:
	check.fields()

field.tpb.code.yeno:
when.field.changes:
	check.fields()

field.advance.yeno:
when.field.changes:
								|#200-104678.so
|	if (advance.yeno = tppdm.yeno.yes and			|#200-103016.sn
|		scope.def.yeno = tppdm.yeno.no) then
|			scope.def.yeno = tppdm.yeno.yes
|			enable.fields("scope.def.yeno")
|			display("scope.def.yeno")
|	endif							|#200-103016.en
								|#200-104678.eo
	check.fields()

field.installment.yeno:
when.field.changes:
								|#200-104678.so
|	if (installment.yeno = tppdm.yeno.yes and		|#200-103016.sn
|		scope.def.yeno = tppdm.yeno.no) then
|			scope.def.yeno = tppdm.yeno.yes
|			enable.fields("scope.def.yeno")
|			display("scope.def.yeno")
|	endif							|#200-103016.en
								|#200-104678.eo
	check.fields()

field.budget.surch.yeno:
check.input:
	if (budget.surch.yeno = tppdm.yeno.yes and
		scope.def.yeno = tppdm.yeno.no) then
			scope.def.yeno = tppdm.yeno.yes
			enable.fields("scope.def.yeno")
			display("scope.def.yeno")
	endif
|	if (budget.surch.yeno = tppdm.yeno.yes and		|#200-103018.so
|		extension.yeno = tppdm.yeno.no) then		|#200-103018.eo
	if budget.surch.yeno = tppdm.yeno.yes then		|#200-103018.n
			extension.yeno = tppdm.yeno.yes
|			enable.fields("extension.yeno")		|#200-103018.so
|			display("extension.yeno")		|#200-103018.eo
	endif
when.field.changes:
	check.fields()

field.cost.surch.yeno:
check.input:
|	if (cost.surch.yeno = tppdm.yeno.yes and		|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no) then
|			scope.def.yeno = tppdm.yeno.yes
|			enable.fields("scope.def.yeno")
|			display("scope.def.yeno")
|	endif							|#200-104678.eo
|	if (cost.surch.yeno = tppdm.yeno.yes and		|#200-103018.so
|		extension.yeno = tppdm.yeno.no) then		|#200-103018.eo
	if cost.surch.yeno = tppdm.yeno.yes then		|#200-103018.n
			extension.yeno = tppdm.yeno.yes
|			enable.fields("extension.yeno")		|#200-103018.so
|			display("extension.yeno")		|#200-103018.eo
	endif
when.field.changes:

	check.fields()

field.rev.surch.yeno:
check.input:
|	if (rev.surch.yeno = tppdm.yeno.yes and			|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no) then
|			scope.def.yeno = tppdm.yeno.yes
|			enable.fields("scope.def.yeno")
|			display("scope.def.yeno")
|	endif							|#200-104678.eo
|	if (rev.surch.yeno = tppdm.yeno.yes and			|#200-103018.so
|		extension.yeno = tppdm.yeno.no) then		|#200-103018.eo
	if rev.surch.yeno = tppdm.yeno.yes then			|#200-103018.n
			extension.yeno = tppdm.yeno.yes
|			enable.fields("extension.yeno")		|#200-103018.so
|			display("extension.yeno")		|#200-103018.eo
	endif
when.field.changes:
	check.fields()						|#BRQ000575.en

field.estimate.yeno:
when.field.changes:
								|#200-104678.so
|	if (estimate.yeno = tppdm.yeno.yes and			|#200-103016.sn
|		scope.def.yeno = tppdm.yeno.no) then
|			scope.def.yeno = tppdm.yeno.yes
|			enable.fields("scope.def.yeno")
|			display("scope.def.yeno")
|	endif
|	if (estimate.yeno = tppdm.yeno.yes and
|		cost.unit.yeno = tppdm.yeno.no) then
|			cost.unit.yeno = tppdm.yeno.yes
|			enable.fields("cost.unit.yeno")
|			display("cost.unit.yeno")
|	endif
|								|#200-103016.en
								|#200-104678.eo
|	if estimate.yeno = tppdm.yeno.yes then			|#200-103016.so
|		if cost.unit.exist = tppdm.yeno.no then
|			cost.unit.yeno = tppdm.yeno.yes
|			disable.fields("cost.unit.yeno")
|		endif
|	else
|		if cost.unit.exist = tppdm.yeno.no then
|			enable.fields("cost.unit.yeno")
|		else
|			disable.fields("cost.unit.yeno")
|		endif
|	endif							|#200-103016.eo
|	if calc.exist = tppdm.yeno.yes or			|#BRQ000575.o
	if bottom.up.exist = tppdm.yeno.yes or			|#BRQ000575.n
	   cost.unit.yeno = tppdm.yeno.no then
|		calc.yeno = tppdm.yeno.no			|#BRQ000575.so
|		disable.fields("calc.yeno")			|#BRQ000575.eo
		bottom.up.yeno = tppdm.yeno.no			|#BRQ000575.sn
		disable.fields("bottom.up.yeno")		|#BRQ000575.en
	else
|		enable.fields("calc.yeno")			|#BRQ000575.o
		enable.fields("bottom.up.yeno")			|#BRQ000575.n

	endif
	if top.down.exist = tppdm.yeno.yes then			|#BRQ000575.sn
		top.down.yeno = tppdm.yeno.no
		disable.fields("top.down.yeno")
	else
		enable.fields("top.down.yeno")
	endif							|#BRQ000575.en
	check.fields()
	display("cost.unit.yeno")
|	display("calc.yeno")					|#BRQ000575.o
	display("bottom.up.yeno")				|#BRQ000575.sn
	display("top.down.yeno"	)				|#BRQ000575.en

|**************************** functions ****************************************

functions:

function handle.enable.disable.fields()				|#BRQ000575.sn
{
	if gen.data.exist = tppdm.yeno.yes then
		disable.fields("gen.data.yeno")
	else
		enable.fields("gen.data.yeno")
	endif

	if cost.unit.exist = tppdm.yeno.yes then
		disable.fields("cost.unit.yeno")
	else
		enable.fields("cost.unit.yeno")
	endif

	if scope.exist = tppdm.yeno.yes then
		scope.def.yeno = tppdm.yeno.no
		installment.yeno=tppdm.yeno.no			|#200-103016.sn
		estimate.yeno=tppdm.yeno.no
		baseline.yeno=tppdm.yeno.no
		advance.yeno=tppdm.yeno.no
		top.down.yeno=tppdm.yeno.no
		budget.surch.yeno=tppdm.yeno.no
		cost.surch.yeno=tppdm.yeno.no
		rev.surch.yeno=tppdm.yeno.no
		bottom.up.yeno=tppdm.yeno.no			|#200-103016.en
		disable.fields("scope.def.yeno")
		disable.fields("baseline.yeno")			|#200-103016.sn
		disable.fields("installment.yeno")
		disable.fields("advance.yeno")
		disable.fields("top.down.yeno")
		disable.fields("estimate.yeno")
		disable.fields("budget.surch.yeno")
		disable.fields("cost.surch.yeno")
		disable.fields("rev.surch.yeno")
		disable.fields("bottom.up.yeno")		|#200-103016.en

	else
		enable.fields("scope.def.yeno")
		enable.fields("baseline.yeno")			|#200-103016.sn
		enable.fields("installment.yeno")
		enable.fields("estimate.yeno")
		enable.fields("advance.yeno")
		enable.fields("top.down.yeno")
		enable.fields("budget.surch.yeno")
		enable.fields("cost.surch.yeno")
		enable.fields("rev.surch.yeno")
		enable.fields("bottom.up.yeno")			|#200-103016.en

	endif

|	if extension.exist = tppdm.yeno.yes then		|#200-103018.so
|		extension.yeno = tppdm.yeno.no
|		disable.fields("extension.yeno")
|	else
|		enable.fields("extension.yeno")
|	endif							|#200-103018.eo

	if scope.exist = tppdm.yeno.no then			|#200-104678.n
		if baseline.exist = tppdm.yeno.yes then
			baseline.yeno = tppdm.yeno.no
			disable.fields("baseline.yeno")
		else
			enable.fields("baseline.yeno")
		endif

		if bottom.up.exist = tppdm.yeno.yes then
			bottom.up.yeno = tppdm.yeno.no
			disable.fields("bottom.up.yeno")
		else
			enable.fields("bottom.up.yeno")
		endif

		if top.down.exist = tppdm.yeno.yes then
			top.down.yeno = tppdm.yeno.no
			disable.fields("top.down.yeno")
		else
			enable.fields("top.down.yeno")
		endif

		if bca.code.exist = tppdm.yeno.yes then
			bca.code.yeno = tppdm.yeno.no
			disable.fields("bca.code.yeno")
		else
			enable.fields("bca.code.yeno")
		endif

		if tpb.code.exist = tppdm.yeno.yes then
			tpb.code.yeno = tppdm.yeno.no
			disable.fields("tpb.code.yeno")
		else
			enable.fields("tpb.code.yeno")
		endif

		if advance.exist = tppdm.yeno.yes then
			advance.yeno = tppdm.yeno.no
			disable.fields("advance.yeno")
		else
			enable.fields("advance.yeno")
		endif

		if installment.exist = tppdm.yeno.yes then
			installment.yeno = tppdm.yeno.no
			disable.fields("installment.yeno")
		else
			enable.fields("installment.yeno")
		endif

		if budget.surcharges.exist = tppdm.yeno.yes then
			budget.surch.yeno = tppdm.yeno.no
			disable.fields("budget.surch.yeno")
		else
			enable.fields("budget.surch.yeno")
		endif

		if cost.surcharges.exist = tppdm.yeno.yes then
			cost.surch.yeno = tppdm.yeno.no
			disable.fields("cost.surch.yeno")
		else
			enable.fields("cost.surch.yeno")
		endif

		if revenue.surcharges.exist = tppdm.yeno.yes then
			rev.surch.yeno = tppdm.yeno.no
			disable.fields("rev.surch.yeno")
		else
			enable.fields("rev.surch.yeno")
		endif
		if estimates.exist = true then			|#200-104678.sn
			estimate.yeno = tppdm.yeno.no
			disable.fields("estimate.yeno")
		else
			enable.fields("estimate.yeno")
		endif
	endif							|#200-104678.en
}								|#BRQ000575.en

function domain tppdm.yeno check.gen.data.exist()
{
	if pdm142.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm606.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm607.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm646.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm649.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm653.check.record() then
		return(tppdm.yeno.yes)
	endif
	if tcppl092.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm669.check.record() then
		return(tppdm.yeno.yes)
	endif
	if pdm670.check.record() then				|#800-172923.sn
		return(tppdm.yeno.yes)
	endif							|#800-172923.en

	return(tppdm.yeno.no)
}

function get.target.project.related.data()			|#200-103004.sn
{
	padr = tppdm600.padr
	sadr = tppdm600.sadr
	frm.pwar = tppdm600.pwar
	disable.fields("padr", "sadr", "frm.pwar")
	add.nama.1 = get.address.nama(padr)
	if sadr <> padr then
		add.nama.2 = get.address.nama(sadr)
	else
		add.nama.2 = add.nama.1
	endif
	pwar.dsca = get.pwar.description(frm.pwar)
	display("padr")
	display("sadr")
	display("add.nama.1")
	display("add.nama.2")
	display("frm.pwar")
	display("pwar.dsca")
}								|#200-103004.en

function get.source.project.related.data()			|#200-103004.sn
{
	select	tppdm600.padr:source.padr,tppdm600.sadr:source.sadr,
		tppdm600.pwar:source.pwar
	from	tppdm600,tcmcs052
	where	tppdm600._index1 = {:cprj}
	and	tppdm600.cprj refers to tcmcs052
	as set with 1 rows
	selectdo
	endselect
	source.add.nama.1 = get.address.nama(source.padr)
	if source.sadr <> source.padr then
		source.add.nama.2 = get.address.nama(source.sadr)
	else
		source.add.nama.2 = source.add.nama.1
	endif
	source.pwar.dsca = get.pwar.description(source.pwar)
	padr = source.padr
	sadr = source.sadr
	frm.pwar = source.pwar
	add.nama.1 = source.add.nama.1
	add.nama.2 = source.add.nama.2
	pwar.dsca = source.pwar.dsca
	display("padr")
	display("sadr")
	display("add.nama.1")
	display("add.nama.2")
	display("frm.pwar")
	display("pwar.dsca")
}								|#200-103004.en

								|#200-103004.sn
function domain	tcdsca get.address.nama(domain tccom.cadr address.code)
{
	domain tcdsca nama

	nama = ""
	select	tccom130.nama:nama
	from	tccom130
	where	tccom130._index1 = {:address.code }
	as set with 1 rows
	selectdo
		return(nama)
	endselect
	return(nama)
}

function domain tcdsca get.pwar.description(domain tccwar pwar)
{
	domain tcdsca	dsca
	dsca = ""
	select	tcmcs003.dsca:dsca
	from	tcmcs003
	where	tcmcs003._index1 = {:pwar}
	as set with 1 rows
	selectdo
		return(dsca)
	endselect
	return(dsca)
}								|#200-103004.en

function long pdm142.check.record()
{
	itppdm0125.record.present(tppdm142,
				  tppdm142._index1,:cprj.copy)
}

function long pdm606.check.record()
{
	itppdm0125.record.present(tppdm606,
				  tppdm606._index1,:cprj.copy)
}

function long pdm607.check.record()
{
	itppdm0125.record.present(tppdm607,
				  tppdm607._index1,:cprj.copy)
}

function long pdm646.check.record()
{
	itppdm0125.record.present(tppdm646,
				  tppdm646._index1,:cprj.copy)
}

function long pdm649.check.record()
{
	itppdm0125.record.present(tppdm649,
				  tppdm649._index1,:cprj.copy)
}

function long pdm653.check.record()
{
	itppdm0125.record.present(tppdm653,
				  tppdm653._index1,:cprj.copy)
}

function long tcppl092.check.record()
{
	itppdm0125.record.present(tcppl092,
				  tcppl092._index1,:cprj.copy)
}

function long pdm669.check.record()
{
	itppdm0125.record.present(tppdm669,
				  tppdm669._index1,:cprj.copy)
}

function long pdm670.check.record()				|#800-172923.sn
{
	itppdm0125.record.present(tppdm670,
				  tppdm670._index1,:cprj.copy)
}								|#800-172923.en

function domain tppdm.yeno check.cost.unit.exist()
{
	if pdm615.check.record() then
		return(tppdm.yeno.yes)
	endif

	if pdm625.check.record() then
		return(tppdm.yeno.yes)
	endif

	if pdm635.check.record() then
		return(tppdm.yeno.yes)
	endif

	if pdm640.check.record() then
		return(tppdm.yeno.yes)
	endif

	if pdm643.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ibd001.check.record() then
		return(tppdm.yeno.yes)
	endif

	return(tppdm.yeno.no)
}

function long ibd001.check.record()
{
	long record.present
	domain	tcitem	min.item    fixed
	domain 	tcitem	max.item    fixed

	domain	tcmcs.long6		start.position
	domain	tcmcs.long6		end.position
	domain	tcmcs.long6		segment.size

	segment.size =
	tcibd.dll0010.segment.size(tcibd.apco.project,start.position,
							end.position)
|	min.item = string.set$(chr$(0),len(min.item))		|#1152679.o
	set.fmin(min.item, "tcitem")				|#1152679.n
	min.item(start.position ; segment.size) = cprj.copy
|	max.item = string.set$(chr$(255),len(max.item))		|#1152679.o
	set.fmax(max.item, "tcitem")				|#1152679.n
	max.item(start.position ; segment.size) = cprj.copy

	record.present = false

	select  tcibd001.cprj
	from	tcibd001
	where	tcibd001._index1 inrange {:min.item} and {:max.item}
	as set with 1 rows
	selectdo
		record.present = true
	endselect
	return(record.present)

}

function long pdm615.check.record()
{
	itppdm0125.record.present(tppdm615,
				  tppdm615._index1,:cprj.copy)
}

function long pdm625.check.record()
{
	itppdm0125.record.present(tppdm625,
				  tppdm625._index1,:cprj.copy)
}

function long pdm635.check.record()
{
	itppdm0125.record.present(tppdm635,
				  tppdm635._index1,:cprj.copy)
}

function long pdm640.check.record()
{
	itppdm0125.record.present(tppdm640,
				  tppdm640._index1,:cprj.copy)
}

function long pdm643.check.record()
{
	itppdm0125.record.present(tppdm643,
				  tppdm643._index1,:cprj.copy)
}

|function domain tppdm.yeno check.plan.exist()			|#BRQ000575.so
|{
|	if pss010.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if pss020.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|	if pss220.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|	if pss200.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|	return(tppdm.yeno.no)
|}								|#BRQ000575.so

function domain tppdm.yeno check.scope.exist()			|#BRQ000575.sn
{
	if pss010.check.record() then
		return(tppdm.yeno.yes)
	endif

	if pss200.check.record() then
		return(tppdm.yeno.yes)
	endif
	return(tppdm.yeno.no)
}

|function domain tppdm.yeno check.extension.exist()		|#200-103018.so
|{
|	if ptc050.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|	return(tppdm.yeno.no)
|}								|#200-103018.eo

function domain tppdm.yeno check.baseline.exist()
{
	if pss020.check.record() then
		return(tppdm.yeno.yes)
	endif

	if pss220.check.record() then
		return(tppdm.yeno.yes)
	endif
	return(tppdm.yeno.no)
}								|#BRQ000575.en

function long  pss010.check.record()
{
	itppdm0125.record.present(tppss010,
				  tppss010._index1,:cprj.copy)
}

function long  pss200.check.record()
{
	itppdm0125.record.present(tppss200,
				  tppss200._index1,:cprj.copy)
}

|function long  ptc050.check.record()
|{
|	itppdm0125.record.present(tpptc050,
|				  tpptc050._index1,:cprj.copy)
|}

function long  pss020.check.record()
{
	itppdm0125.record.present(tppss020,
				  tppss020._index1,:cprj.copy)
}

function long  pss220.check.record()
{
	itppdm0125.record.present(tppss220,
				  tppss220._index1,:cprj.copy)
}

|function domain tppdm.yeno check.calc.exist()			|#BRQ000575.so
|{
|	if ptc030.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc031.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc032.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc040.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc041.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc042.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc043.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc044.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc101.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc120.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc500.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc130.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc510.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc140.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc515.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc150.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc160.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc220.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc230.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc240.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc250.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ptc260.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|	return(tppdm.yeno.no)
|}								|#BRQ000575.eo

function domain tppdm.yeno check.bottom.up.exist()		|#BRQ000575.sn
{
	if ptc101.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc120.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc130.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc140.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc150.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc160.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc220.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc230.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc240.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc250.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc260.check.record() then
		return(tppdm.yeno.yes)
	endif
	return(tppdm.yeno.no)
}

function domain tppdm.yeno check.top.down.exist()
{
	if ptc500.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc510.check.record() then
		return(tppdm.yeno.yes)
	endif
	if ptc515.check.record() then
		return(tppdm.yeno.yes)
	endif
	return(tppdm.yeno.no)
}

function domain tppdm.yeno check.bca.code.exist()
{
	return(tppdm.yeno.no)
}

function domain tppdm.yeno check.tpb.code.exist()
{
	return(tppdm.yeno.no)
}								|#BRQ000575.en

function long ptc030.check.record()
{
	itppdm0125.record.present(tpptc030,
				  tpptc030._index1,:cprj.copy)
}

function long ptc031.check.record()
{
	itppdm0125.record.present(tpptc031,
				  tpptc031._index1,:cprj.copy)
}

function long ptc032.check.record()
{
	itppdm0125.record.present(tpptc032,
				  tpptc032._index1,:cprj.copy)
}

function long ptc040.check.record()
{
	itppdm0125.record.present(tpptc040,
				  tpptc040._index1,:cprj.copy)
}

function long ptc041.check.record()
{
	itppdm0125.record.present(tpptc041,
				  tpptc041._index1,:cprj.copy)
}

function long ptc042.check.record()
{
	itppdm0125.record.present(tpptc042,
				  tpptc042._index1,:cprj.copy)
}

function long ptc043.check.record()
{
	itppdm0125.record.present(tpptc043,
				  tpptc043._index1,:cprj.copy)
}

function long ptc044.check.record()
{
	itppdm0125.record.present(tpptc044,
				  tpptc044._index1,:cprj.copy)
}

function long ptc101.check.record()
{
	itppdm0125.record.present(tpptc101,
				  tpptc101._index1,:cprj.copy)
}

function long ptc120.check.record()
{
	itppdm0125.record.present(tpptc120,
				  tpptc120._index1,:cprj.copy)
}

function long ptc130.check.record()
{
	itppdm0125.record.present(tpptc130,
				  tpptc130._index1,:cprj.copy)
}

function long ptc140.check.record()
{
	itppdm0125.record.present(tpptc140,
				  tpptc140._index1,:cprj.copy)
}

function long ptc150.check.record()
{
	itppdm0125.record.present(tpptc150,
				  tpptc150._index1,:cprj.copy)
}

function long ptc160.check.record()
{
	itppdm0125.record.present(tpptc160,
				  tpptc160._index1,:cprj.copy)
}

function long ptc500.check.record()				|#BRQ000575.sn
{
	itppdm0125.record.present(tpptc500,
				  tpptc500._index1,:cprj.copy)
}

function long ptc510.check.record()
{
	itppdm0125.record.present(tpptc510,
				  tpptc510._index1,:cprj.copy)
}

function long ptc515.check.record()
{
	itppdm0125.record.present(tpptc515,
				  tpptc515._index1,:cprj.copy)
}								|#BRQ000575.en

function long ptc220.check.record()
{
	itppdm0125.record.present(tpptc220,
				  tpptc220._index1,:cprj.copy)
}

function long ptc230.check.record()
{
	itppdm0125.record.present(tpptc230,
				  tpptc230._index1,:cprj.copy)
}

function long ptc240.check.record()
{
	itppdm0125.record.present(tpptc240,
				  tpptc240._index1,:cprj.copy)
}

function long ptc250.check.record()
{
	itppdm0125.record.present(tpptc250,
				  tpptc250._index1,:cprj.copy)
}

function long ptc260.check.record()
{
	itppdm0125.record.present(tpptc260,
				  tpptc260._index1,:cprj.copy)
}

function domain tppdm.yeno check.advance.exist()		|#BRQ000575.sn
{
	if pin010.check.record() then
		return(tppdm.yeno.yes)
	endif
	return(tppdm.yeno.no)
}

function domain tppdm.yeno check.installment.exist()
{
	if pin020.check.record() then
		return(tppdm.yeno.yes)
	endif
	return(tppdm.yeno.no)
}

function long pin010.check.record()
{
	itppdm0125.record.present(tppin010,
				  tppin010._index1,:cprj.copy)
}

function long pin020.check.record()
{
	itppdm0125.record.present(tppin020,
				  tppin020._index1,:cprj.copy)
}								|#BRQ000575.en

|function domain tppdm.yeno check.charges.exist()		|#BRQ000575.so
|{
|	if ppc260.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc261.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc262.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc263.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc264.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc265.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc280.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc281.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc282.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc285.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	if ppc286.check.record() then
|		return(tppdm.yeno.yes)
|	endif
|
|	return(tppdm.yeno.no)
|}								|#BRQ000575.eo

function domain tppdm.yeno check.budget.surcharges.exist()	|#BRQ000575.sn
{
	if ptc030.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc031.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc032.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc040.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc041.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc042.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc043.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ptc044.check.record() then
		return(tppdm.yeno.yes)
	endif

	return(tppdm.yeno.no)
}

function domain tppdm.yeno check.cost.surcharges.exist()
{
	if ppc260.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc261.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc262.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc263.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc264.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc265.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc280.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc281.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc282.check.record() then
		return(tppdm.yeno.yes)
	endif

	return(tppdm.yeno.no)
}

function domain tppdm.yeno check.revenue.surcharges.exist()
{
	if ppc265.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc285.check.record() then
		return(tppdm.yeno.yes)
	endif

	if ppc286.check.record() then
		return(tppdm.yeno.yes)
	endif

	return(tppdm.yeno.no)
}								|#BRQ000575.en

function long ppc260.check.record()
{
	itppdm0125.record.present(tpppc260,
				  tpppc260._index1,:cprj.copy)
}

function long ppc261.check.record()
{
	itppdm0125.record.present(tpppc261,
				  tpppc261._index1,:cprj.copy)
}

function long ppc262.check.record()
{
	itppdm0125.record.present(tpppc262,
				  tpppc262._index1,:cprj.copy)
}

function long ppc263.check.record()
{
	itppdm0125.record.present(tpppc263,
				  tpppc263._index1,:cprj.copy)
}

function long ppc264.check.record()
{
	itppdm0125.record.present(tpppc264,
				  tpppc264._index1,:cprj.copy)
}

function long ppc265.check.record()
{
	itppdm0125.record.present(tpppc265,
				  tpppc265._index1,:cprj.copy)
}

function long ppc280.check.record()
{
	itppdm0125.record.present(tpppc280,
				  tpppc280._index1,:cprj.copy)
}

function long ppc281.check.record()
{
	itppdm0125.record.present(tpppc281,
				  tpppc281._index1,:cprj.copy)
}

function long ppc282.check.record()
{
	itppdm0125.record.present(tpppc282,
				  tpppc282._index1,:cprj.copy)
}

function long ppc285.check.record()
{
	itppdm0125.record.present(tpppc285,
				  tpppc285._index1,:cprj.copy)
}

function long ppc286.check.record()
{
	itppdm0125.record.present(tpppc286,
				  tpppc286._index1,:cprj.copy)
}

function boolean create.new.project()
{
	boolean	record.not.present			|#900-213818.n
	record.not.present = false				|#900-213818.n

	select	tcmcs052.*
	from	tcmcs052
	where	tcmcs052._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		return(true)
	selectempty
		record.not.present = true			|#900-213818.sn
	endselect
	if record.not.present then				|#900-213818.en
		record.not.present = false			|#900-213818.n
		tcmcs052.cprj = cprj.copy
		tcmcs052.dsca = cprj.c.desc
		tcmcs052.plnk = tcmcs.plnk.tp
		tcmcs052.seak = toupper$(tcmcs052.dsca)
		if cprj.txta.orig <> 0 then
			tcmcs052.txta = cprj.txta.orig
			text.keyw1 = ""
			text.keyw2 = cprj.copy
			text.keyw3 = cprj.c.desc
			text.keyw4 = tcmcs052.seak
			text.lines = TEXT.COPY("tcmcs052.txta","tcmcs052.txta",
			  text.keyw1, text.keyw2, text.keyw3, text.keyw4,"","")
		endif
		db.insert(ttcmcs052,db.retry)
	endif							|#900-213818.n
|	endselect						|#900-213818.o
	return(false)
}

|------------------------------------------------------------------------------|
|------------------------------------------------------------------------------|

function long copy.the.project()
{
	g.dummy.size = tcibd.dll0010.segment.size(tcibd.apco.project,
					start.position,end.position)

	db.retry.point()

	if not cprj.copy.in052 then
		if not create.new.project() then
			if not (db.retry.hit() > 0) then
				UPDATE.PROGRESS.MESSAGE("tppdm9011")
				|* Creating new project...
			endif
		endif
	endif

	if not target.project.exists() then
		copy.project.as.entity()
		if copy.pdm600() = false then
			abort.transaction()
			return(0)
		endif
		copy.pdm601()
		copy.pdm740()
		copy.pdm741()
|		if not itppdm0130.update.project.in.project.archive(|#1022819.o
|		   ADD,false,0) then				|#1022819.o
		if itppdm0130.update.project.in.project.archive(|#1022819.n
		   ADD,false,0) <> 0 then			|#1022819.n
			|* Project '%s' cannot be updated in project archive
			job.process.error = true
			abort.transaction()
			if not (db.retry.hit() > 0) then
				print.archive.message()
			endif
			return(0)
		endif
	else
		select	tppdm600.cspa:top.cspa, tppdm600.cpla:prj.cpla,
|								|#200-102301.so
|			tppdm600.rsac:prj.rsac, tppdm600.ccal:prj.ccal
|								|#200-102301.eo
								|#200-102301.sn
			tppdm600.rsac:prj.rsac,	tppdm600.ccal:prj.ccal,
			tppdm600.stdt:prj.stdt,	tppdm600.dldt:prj.dldt
								|#200-102301.en
		from	tppdm600
		where	tppdm600._index1 = {:cprj}
		as set with 1 rows
		selectdo
		endselect
	endif

	if gen.data.yeno = tppdm.yeno.yes then
		if copy.general.data() then
			abort.transaction()
			print.general.data.error()
			return(0)
		endif
	endif

	if cost.unit.yeno = tppdm.yeno.yes then
		if copy.cost.units() then
			abort.transaction()
			print.cost.units.data.error()
			return(0)
		endif
	endif

|	if plan.yeno = tppdm.yeno.yes then			|#BRQ000575.so
|		if copy.planning() then
|			abort.transaction()
|			print.copy.planning.error()
|			return(0)
|		endif
|	endif							|#BRQ000575.eo
								|#200-103018.so
|	if extension.yeno = tppdm.yeno.yes then			|#BRQ000575.sn
|		if copy.extension() then
|			abort.transaction()
|			print.copy.extension.error()
|			return(0)
|		endif
|	endif
								|#200-103018.eo
	if scope.def.yeno = tppdm.yeno.yes then
		if copy.scope() then
			abort.transaction()
			print.copy.scope.error()
			return(0)
		endif
	endif
	if baseline.yeno = tppdm.yeno.yes then
		if copy.baseline() then
			abort.transaction()
			print.copy.baseline.error()
			return(0)
		endif
	endif							|#BRQ000575.en
|	if calc.yeno = tppdm.yeno.yes then			|#BRQ000575.so
|		if copy.calculation() then
|			abort.transaction()
|			print.calculation.data.error()
|			return(0)
|		endif
|	endif							|#BRQ000575.eo

	if bottom.up.yeno = tppdm.yeno.yes then			|#BRQ000575.sn
		if copy.bottom.up() then
			abort.transaction()
			print.copy.bottom.up.error()
			return(0)
		endif
	endif
	if top.down.yeno = tppdm.yeno.yes then
		if copy.top.down() then
			abort.transaction()
			print.copy.top.down.error()
			return(0)
		endif
	endif
	if bca.code.yeno = tppdm.yeno.yes then
		if copy.bca.code() then
			abort.transaction()
			print.copy.bca.code.error()
			return(0)
		endif
	endif
	if not isspace(prj.ccal)				|#233994.sn
|	   and bottom.up.yeno = tppdm.yeno.yes then		|#246924.o
	   and read.ccal() then 				|#246924.n
		rewrite.tppdm600.prj.ccal()
	endif							|#233994.en
	if tpb.code.yeno = tppdm.yeno.yes then
		if copy.tpb.code() then
			abort.transaction()
			print.copy.tpb.code.error()
			return(0)
		endif
	endif
|*  Installments can be copied only for Fixed Priced project with Invoice type
|*  Installment.

	if installment.yeno = tppdm.yeno.yes then
		if tppdm600.agty <> tppdm.agty.contract or
			tppdm600.invm <> tppdm.invm.instalment then
|			abort.transaction()			|#200-102275.o
			print.mess = sprintf$(form.text$("tppdm7840.07"))
			|* Installments can be copied only for Fixed Priced
			|* project with Invoice type Installment
			print.copy.line()
|			return(0)				|#200-102275.o
		else						|#200-102275.n
			if copy.installment() then
				abort.transaction()
				print.copy.installment.error()
				return(0)
			endif
		endif
	endif							|#200-102275.n

	if advance.yeno = tppdm.yeno.yes then
		if copy.advance() then
			abort.transaction()
			print.copy.advance.error()
			return(0)
		endif
	endif							|#BRQ000575.en

|	if charges.yeno = tppdm.yeno.yes then			|#BRQ000575.so
|		if copy.charges() then
|			abort.transaction()
|			print.copy.charges.data.error()
|			return(0)
|		endif
|	endif							|#BRQ000575.eo

	if budget.surch.yeno = tppdm.yeno.yes then		|#BRQ000575.sn
		if copy.budget.surcharges() then
			abort.transaction()
			print.copy.budget.surcharges.error()
			return(0)
		endif
	endif

	if cost.surch.yeno = tppdm.yeno.yes then
		if copy.cost.surcharges() then
			abort.transaction()
			print.copy.charges.data.error()
			return(0)
		endif
	endif

	if rev.surch.yeno = tppdm.yeno.yes then
		if copy.revenue.surcharges() then
			abort.transaction()
			print.copy.revenue.surcharges.error()
			return(0)
		endif
	endif							|#BRQ000575.en
	if copy.est.to.prj = tppdm.yeno.yes then
		estimate.yeno = tppdm.yeno.yes
		disable.fields("estimate.yeno")
		display("estimate.yeno")
		estimates.exist = copy.estimate()
		if estimates.exist then
			abort.transaction()
			print.copy.estimate.data.error()
			return(0)
		else
			update.resulted.in.project()
			update.originated.from.estimate()
		endif
	else
		enable.fields("estimate.yeno")
		if estimate.yeno = tppdm.yeno.yes then
		estimates.exist = copy.estimate()
		if estimates.exist then
				abort.transaction()
				print.copy.estimate.data.error()
				return(0)
			endif
		endif
	endif
	update.user()		|#200-162732.n
	commit.transaction()
	return(1)
}

function copy.project.as.entity()
{
	domain	tcncmp	company

	company = get.compnr()
	select	tcemm110.*
	from	tcemm110
	where	tcemm110._index1 = {tcemm.enty.project,	:company,:cprj}
	as set with 1 rows
	selectdo
		tcemm110.enid = cprj.copy
		if source.eu <> target.eu and
		   not isspace(target.eu) then
			tcemm110.grid = target.eu
		endif
		db.insert(ttcemm110,db.retry,db.skip.dupl)
	endselect
	select	tcemm113.*
	from	tcemm113
	where	tcemm113._index1 = {:company,:cprj}
	as set with 1 rows
	selectdo
		tcemm113.proj = cprj.copy
		tcemm113.enid = cprj.copy
		if source.eu <> target.eu and
		   not isspace(target.eu) then
			tcemm113.grid = target.eu
		endif
		db.insert(ttcemm113,db.retry,db.skip.dupl)
	endselect
}

function long copy.general.data()
{
	table.copied = false
	copy.pdm142(table.copied)
	copy.pdm606(table.copied)
	copy.pdm607(table.copied)
	copy.pdm646(table.copied)
	copy.pdm649(table.copied)
	copy.pdm653(table.copied)
	copy.project.rates(table.copied)
	copy.pdm669(table.copied)
	copy.pdm670(table.copied)				|#800-172923.n
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9000")
			|* General Project Data copied...
			print.general.data()
			gen.data.exist = tppdm.yeno.yes
		endif
	endif

	return(0)
}

function long copy.cost.units()
{
	table.copied = false
	if copy.item.data(table.copied) then
		return(1)
	endif
	copy.pdm615(table.copied)
	copy.pdm625(table.copied)
	copy.pdm635(table.copied)
	copy.pdm640(table.copied)
	copy.pdm643(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9001")
			|* Project-Related Cost Objects copied...
			print.cost.units.data()
			cost.unit.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

|function long copy.planning()					|#BRQ000575.so
|{
|	table.copied = false
|	copy.ptc050(table.copied)
|	copy.ptc100(table.copied)
|	copy.ptc101(table.copied)
|	copy.pdm742(table.copied)
|	copy.pss010(table.copied)
|	copy.pss020(table.copied)
|	copy.pss220(table.copied)
|	copy.pss200(table.copied)
|	if not (db.retry.hit() > 0) then
|		if table.copied then
|			UPDATE.PROGRESS.MESSAGE("tppdm9002")
|			|* Planning Data copied...
|			print.copy.planning()
|			plan.exist = tppdm.yeno.yes
|		endif
|	endif
|	return(0)
|}								|#BRQ000575.eo
								|#200-103018.so

|function long copy.extension()					|#BRQ000575.sn
|{
|	table.copied = false
||	copy.ptc050(table.copied)				|#200-102287.o
|	if not copy.ptc050(table.copied) then			|#200-102287.sn
|		return(1)
|	endif							|#200-102287.en
|	if not (db.retry.hit() > 0) then
|		if table.copied then
|			UPDATE.PROGRESS.MESSAGE("tppdm9008")
|			|* Extension Data copied...
||			print.copy.extension()			|#200-103018.o
||			extension.exist = tppdm.yeno.yes	|#200-103018.o
|		endif
|	endif
|	return(0)
|}								|#200-103018.eo

function long copy.scope()
{
	table.copied = false
|	copy.ptc100(table.copied)				|#200-102432.o

	if not copy.ptc050(table.copied) then			|#200-103018.sn
		return(1)
	endif							|#200-103018.en

	if not copy.ptc100(table.copied) then			|#200-102432.sn
		return(1)
	endif							|#200-102432.en
	copy.ptc101(table.copied)
	copy.pdm742(table.copied)
|	copy.pss010(table.copied)				|#200-102301.o
	if not copy.pss010(table.copied) then			|#200-102301.sn
		return(1)
	endif							|#200-102301.en
|	copy.pss200(table.copied)				|#200-102301.o
	if not copy.pss200(table.copied) then			|#200-102301.sn
		return(1)
	endif							|#200-102301.en
	g.dummy.long = copy.pss210(table.copied)		|#201772.sn
	copy.pdm700(table.copied)				|#PRJ DELIVERABLE.n
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9007")
			|* Scope Data copied...
			print.copy.scope()
			scope.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.baseline()
{
	table.copied = false
	copy.pss020(table.copied)
	copy.pss220(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9009")
			|* Baseline Data copied...
			print.copy.baseline()
			baseline.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}								|#BRQ000575.en

|function long copy.calculation()				|#BRQ000575.so
|{
|	table.copied = false
|	copy.ptc050(table.copied)
|	copy.ptc100(table.copied)
|	copy.pss010(table.copied)
|	copy.pss200(table.copied)
|	copy.ptc101(table.copied)
|	copy.ptc030(table.copied)
|	copy.ptc031(table.copied)
|	copy.ptc032(table.copied)
|	copy.ptc040(table.copied)
|	copy.ptc041(table.copied)
|	copy.ptc042(table.copied)
|	copy.ptc043(table.copied)
|	copy.ptc044(table.copied)
|	copy.ptc220(table.copied)
|	copy.ptc250(table.copied)
|	copy.ptc230(table.copied)
|	copy.ptc240(table.copied)
|	copy.ptc260(table.copied)
|	copy.ptc300(table.copied)
|	copy.ptc120(table.copied)
|	copy.ptc500(table.copied)
|	copy.ptc510(table.copied)
|	copy.ptc515(table.copied)
|	copy.ptc140(table.copied)
|	copy.ptc150(table.copied)
|	copy.ptc130(table.copied)
|	copy.ptc160(table.copied)
|	if gen.data.yeno = tppdm.yeno.yes then
|		copy.ppc320(table.copied)
|	endif
|	if not (db.retry.hit() > 0) then
|		if table.copied then
|			UPDATE.PROGRESS.MESSAGE("tppdm9003")
|			|*  Actual Budget Data copied...
|			print.calculation.data()
|			calc.exist = tppdm.yeno.yes
|		endif
|	endif
|	return(0)
|}								|#BRQ000575.eo

function long copy.bottom.up()					|#BRQ000575.sn
{
	table.copied = false
|	copy.ptc050(table.copied)				|#200-102287.o
	if not copy.ptc050(table.copied) then			|#200-102287.sn
		return(1)
	endif							|#200-102287.en
|	copy.ptc100(table.copied)				|#200-102432.o
	if not copy.ptc100(table.copied) then			|#200-102432.sn
		return(1)
	endif							|#200-102432.en
	copy.ptc101(table.copied)
|	copy.pss010(table.copied)				|#200-102301.o
	if not copy.pss010(table.copied) then			|#200-102301.sn
		return(1)
	endif							|#200-102301.en
|	copy.pss200(table.copied)				|#200-102301.o
	if not copy.pss200(table.copied) then			|#200-102301.sn
		return(1)
	endif							|#200-102301.en
	copy.ptc030(table.copied)
	copy.ptc031(table.copied)
	copy.ptc032(table.copied)
	copy.ptc040(table.copied)
	copy.ptc041(table.copied)
	copy.ptc042(table.copied)
	copy.ptc043(table.copied)
	copy.ptc044(table.copied)
	copy.ptc120(table.copied)
	copy.ptc140(table.copied)
	copy.ptc150(table.copied)
	copy.ptc130(table.copied)
	copy.ptc160(table.copied)
|	copy.ptc220(table.copied)				|#200-102301.o
|	copy.ptc250(table.copied)
|	copy.ptc230(table.copied)
|	copy.ptc240(table.copied)
|	copy.ptc260(table.copied)
	if not (ACTIVITY.CONTROL and				|#200-102298.sn
	   STRUCTURE.BUDGET)  then
		if not copy.ptc220(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
		if not copy.ptc250(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
		if not copy.ptc230(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
		if not copy.ptc240(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
		if not copy.ptc260(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
		g.dummy.long =
		copy.pss210.calculation(table.copied)	 	|#201772.n
	endif							|#200-102298.en
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9003")
			|* Actual Budget Data copied...
			print.copy.bottom.up()
			bottom.up.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.top.down()
{
	table.copied = false
	copy.ptc500(table.copied)
	copy.ptc510(table.copied)
	copy.ptc515(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9003")
			|* Actual Budget Data copied...
			print.copy.top.down()
			top.down.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.bca.code()
{
	table.copied = false
	copy.ptc300(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9029")
			|* Budget Cost Analysis Code copied...
			print.copy.bca.code()
			bca.code.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.tpb.code()
{
	table.copied = false
	copy.ptc520(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9033")
			|* Budget Cost Analysis Code copied...
			print.copy.tpb.code()
			tpb.code.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.installment()
{
	table.copied = false
	if gen.data.yeno = tppdm.yeno.no then
		copy.pdm740()
		copy.pdm741()
	endif
	if extension.yeno = tppdm.yeno.no then
|		copy.ptc050(table.copied)			|#200-102287.o
		if not copy.ptc050(table.copied) then		|#200-102287.sn
			return(1)
		endif						|#200-102287.en
	endif
	if scope.def.yeno = tppdm.yeno.no then
|		copy.ptc100(table.copied)			|#200-102432.o
		if not copy.ptc100(table.copied) then		|#200-102432.sn
			return(1)
		endif						|#200-102432.en
		copy.ptc101(table.copied)
		copy.pdm742(table.copied)
|		copy.pss010(table.copied)			|#200-102301.o
		if not copy.pss010(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
|		copy.pss200(table.copied)			|#200-102301.o
		if not copy.pss200(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
	endif
|	copy.pin020(table.copied)				|#200-102746.o
	if not copy.pin020(table.copied) then			|#200-102746.sn
		return(1)
	endif							|#200-102746.en
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9037")
			|* Installment invoice copied...
			print.copy.installment()
			installment.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.advance()
{
	table.copied = false
	if gen.data.yeno = tppdm.yeno.no then
		copy.pdm740()
		copy.pdm741()
	endif
|	if extension.yeno = tppdm.yeno.no then			|#200-103018.o
|		copy.ptc050(table.copied)			|#200-102287.o
		if not copy.ptc050(table.copied) then		|#200-102287.sn
			return(1)
		endif						|#200-102287.en
|	endif							|#200-103018.o
	if scope.def.yeno = tppdm.yeno.no then
|		copy.ptc100(table.copied)			|#200-102432.o
		if not copy.ptc100(table.copied) then		|#200-102432.sn
			return(1)
		endif						|#200-102432.en
		copy.ptc101(table.copied)
		copy.pdm742(table.copied)
|		copy.pss010(table.copied)			|#200-102301.o
		if not copy.pss010(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
|		copy.pss200(table.copied)			|#200-102301.o
		if not copy.pss200(table.copied) then		|#200-102301.sn
			return(1)
		endif						|#200-102301.en
	endif
	copy.pin010(table.copied)
	if advance.yeno = tppdm.yeno.yes and			|#200-102821.sn
	    installment.yeno = tppdm.yeno.yes then
		copy.pin012(table.copied)			|#BRQ000575.n
	endif							|#200-102821.en
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9035")
			|* Advance Payment Request copied...
			print.copy.advance()
			advance.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}								|#BRQ000575.en

|function long copy.charges()					|#BRQ000575.so
|{
|	table.copied = false
|	copy.ppc260(table.copied)
|	copy.ppc261(table.copied)
|	copy.ppc262(table.copied)
|	copy.ppc263(table.copied)ptc
|	copy.ppc264(table.copied)
|	copy.ppc265(table.copied)
|	copy.ppc280(table.copied)
|	copy.ppc281(table.copied)
|	copy.ppc282(table.copied)
|	copy.ppc285(table.copied)
|	copy.ppc286(table.copied)
|	if not (db.retry.hit() > 0) then
|		if table.copied then
|			UPDATE.PROGRESS.MESSAGE("tppdm9004")
|			|* Cost Registration Master Data copied...
|			print.copy.charges.data()
|			charges.exist = tppdm.yeno.yes
|		endif
|	endif
|	return(0)
|}								|#BRQ000575.eo

function long copy.budget.surcharges()				|#BRQ000575.sn
{
	table.copied = false
	copy.ptc030(table.copied)
	copy.ptc031(table.copied)
	copy.ptc032(table.copied)
	copy.ptc040(table.copied)
	copy.ptc041(table.copied)
	copy.ptc042(table.copied)
	copy.ptc043(table.copied)
	copy.ptc044(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9039")
			|* Cost Registration Master Data copied...
			print.copy.budget.surcharges.data()
|			charges.exist = tppdm.yeno.yes		|#BRQ000575.o
			budget.surcharges.exist = tppdm.yeno.yes|#BRQ000575.n
		endif
	endif
	return(0)
}								|#BRQ000575.en

function long copy.cost.surcharges()				|#BRQ000575.sn
{
	table.copied = false
	copy.ppc260(table.copied)
	copy.ppc261(table.copied)
	copy.ppc262(table.copied)
	copy.ppc263(table.copied)
	copy.ppc264(table.copied)
	copy.ppc280(table.copied)
	copy.ppc281(table.copied)
	copy.ppc282(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9004")
			|* Cost Registration Master Data copied...
			print.copy.charges.data()
			cost.surcharges.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function long copy.revenue.surcharges()
{
	table.copied = false
	copy.ppc265(table.copied)
	copy.ppc285(table.copied)
	copy.ppc286(table.copied)
	if not (db.retry.hit() > 0) then
		if table.copied then
			UPDATE.PROGRESS.MESSAGE("tppdm9041")
			|* Revenue Surcharges copied...
			print.copy.revenue.surcharges.data()
			revenue.surcharges.exist = tppdm.yeno.yes
		endif
	endif
	return(0)
}

function boolean copy.pdm600()
{
	select	tppdm600.*
	from	tppdm600
	where	tppdm600._index1 = {:cprj}
	as set with 1 rows
	selectdo
	endselect

	top.cspa = tppdm600.cspa
	prj.cpla = tppdm600.cpla
	prj.rsac = tppdm600.rsac
	prj.ccal = tppdm600.ccal
	prj.stdt = tppdm600.stdt
	prj.dldt = tppdm600.dldt
	tppdm600.cprj = cprj.copy
	tppdm600.pstf = tppdm.pstf.free
	tppdm600.psts = tppdm.psts.free
	tppdm600.anbr = ""
	tppdm600.aext = ""
	tppdm600.lcdt = 0
	tppdm600.lclg = ""
	tppdm600.lpdt = 0
	tppdm600.logh = ""
	tppdm600.ccdt = 0
	tppdm600.njsp = 0
	tppdm600.logc = ""
	tppdm600.ccal = ""
	tppdm600.cspa = ""
	tppdm600.cpla = ""
	tppdm600.rsac = ""
	tppdm600.rjct = tppdm.yeno.no
	tppdm600.year = 0					|#900-211698.sn
	tppdm600.peri = 0
	tppdm600.cfpr = 0
	tppdm600.cfye = 0					|#900-211698.en
	if sub.proj = tppdm.yeno.yes then			|#BRQ000575.sn
		tppdm600.kopr = tppdm.kopr.sub
		tppdm600.mprj = main.proj
	endif							|#BRQ000575.en
	if copy.est.to.prj = tppdm.yeno.yes then
		tppdm600.ofes = cprj
	else
		tppdm600.ofes = ""
	endif
	tppdm600.ripr = ""
	tppdm600.cdis = ""
	tppdm600.lcla = ""
	tppdm600.dlau = 0
|	tppdm600.dpcd = ""					|#200-102291.o
|								|#200-102625.so
|	if calling.program(1;9) = "tppdm6500" and		|#200-102291.sn
|	    (copy.project = tppdm.yeno.no and
|	       copy.template = tppdm.yeno.no) then
|								|#200-102625.eo
								|#exp_pdm500.so
|	if copy.template = tppdm.yeno.no and			|#200-102625.sn
|		tppdm600.tmpl = tppdm.yeno.yes then
|	       tppdm600.dpcd = cprj			        |#200-102625.en
|	else
|		tppdm600.dpcd = ""
|	endif							|#200-102291.en
								|#exp_pdm500.eo
	tppdm600.dpcd = ""					|#exp_pdm500.n
	tppdm600.decd = ""
	tppdm600.dacd = ""
	tppdm600.dwar = destination.warehouse(tppdm600.dwar)
	if not assign.dates(tppdm600.stdt, tppdm600.dldt) then	|#200-102301.sn
		return(false)
	endif							|#200-102301.en
	if check.obs.link() then
		tppdm600.uobs = tppdm.yeno.no
		tppdm600.cobs = " "
	endif
	if copy.template = tppdm.yeno.yes then
		tppdm600.tmpl = tppdm.yeno.yes
	else
		tppdm600.tmpl = tppdm.yeno.no
	endif							|#BRQ000575.en
	tcmcs052.dsca = cprj.c.desc
	tppdm600.seak = toupper$(tcmcs052.dsca)
|	if not isspace(prj.ccal)				|#233994.so
|	   and calc.yeno = tppdm.yeno.yes then			|#BRQ000575.o
|	   and bottom.up.yeno = tppdm.yeno.yes then	        |#BRQ000575.n
|		rewrite.tppdm600.prj.ccal()
|	endif							|#233994.eo
	|* If the Source EU differs from the Target EU, and the financial
	|* company and/or project currency differ, then the Financial Company of
	|* the target project is set
	if source.eu <> target.eu and
	   not isspace(o.fico) and
	   tppdm600.ncmp <> o.fico then
		|* Financial Company of Target EU is taken
		tppdm600.ncmp = o.fico
	endif
	if not isspace(padr) then				|#200-103004.sn
		tppdm600.padr = padr
	endif
	if not isspace(sadr) then
		tppdm600.sadr = sadr
	else							|#200-104026.sn
		tppdm600.sadr = "   "				|#200-104026.en
	endif
	if not isspace(frm.pwar) then
		tppdm600.pwar = frm.pwar
	endif							|#200-103004.en

								|#exp_pdm500.so
|	if not isspace(tppdm600.dpcd) then		     |#SM-00000-04857.sn
|		tppdm600.pror = tppdm.pror.template
|	else
								|#exp_pdm500.eo
		if not isspace(tppdm600.ofes) then
			tppdm600.pror = tppdm.pror.estimate
		else
			tppdm600.pror = tppdm.pror.project
			tppdm600.ofpr = cprj
		endif
								|#exp_pdm500.so
|	endif						     |#SM-00000-04857.en
								|#exp_pdm500.eo

	tppdm600.pcrd	= utc.num()				|#241402.n
	db.insert(ttppdm600,db.retry,db.skip.dupl)

	|* Note that in Corelli the fields ccal, cpla, cspa, rsac are
	|* copied always copied, but in Reger this is not done. They
	|* are left empty if only general data is copied.

	if not isspace(top.cspa)
|								|#BRQ000575.so
|	   and (calc.yeno = tppdm.yeno.yes or plan.yeno = tppdm.yeno.yes) then
|								|#BRQ000575.eo
	   and (bottom.up.yeno = tppdm.yeno.yes		        |#BRQ000575.sn
	    or scope.def.yeno = tppdm.yeno.yes ) then		|#BRQ000575.en
|		write.top.cspa()				|#200-102632.o
		if not write.top.cspa() then			|#200-102632.sn
			return(false)
		endif						|#200-102632.en
	endif
	if (not isspace(prj.cpla) or not isspace(prj.rsac)) and
|	   plan.yeno = tppdm.yeno.yes then			|#BRQ000575.o
|								|#200-102340.so
|	   scope.def.yeno = tppdm.yeno.yes then			|#BRQ000575.n
|								|#200-102340.eo
	    (bottom.up.yeno = tppdm.yeno.yes		   	|#200-102340.sn
	    or scope.def.yeno = tppdm.yeno.yes ) then		|#200-102340.en
|		write.prj.cpla()				|#200-102632.so
|		write.prj.rsac()				|#200-102632.eo
		if not write.prj.cpla() then			|#200-102632.sn
			return(false)
		endif
		if not write.prj.rsac() then
			return(false)
		endif						|#200.102632.en
	else
		if (not isspace(prj.cpla) and isspace(prj.rsac)) and
|		   plan.yeno = tppdm.yeno.yes then		|#BRQ000575.o
|								|#200-102340.so
|	   	   scope.def.yeno = tppdm.yeno.yes then		|#BRQ000575.n
|								|#200-102340.eo
	           (bottom.up.yeno = tppdm.yeno.yes	   	|#200-102340.sn
	           or scope.def.yeno = tppdm.yeno.yes ) then	|#200-102340.en
|			write.prj.cpla()			|#200-102632.o
			if not write.prj.cpla() then		|#200-102632.sn
				return(false)
			endif					|#200-102632.en
		endif
	endif

	select	tcmcs052.*
	from	tcmcs052 for update
	where	tcmcs052._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		if tcmcs052.plnk = tcmcs.plnk.ti then
			abort.transaction()
			if not (db.retry.hit() > 0) then
			mess("tppdms0102",1)
			|* Project already used in ERP LN Manufacturing.
			endif
			return(false)
		else
			tcmcs052.plnk = tcmcs.plnk.tp
			db.update(ttcmcs052,db.retry)
		endif
	endselect
	return(true)
}

function boolean check.obs.link()
{
	select	tppdm095.*
	from	tppdm095
	where	tppdm095._index1 = {:tppdm600.cobs}
	as set with 1 rows
	selectdo
	endselect
		if tppdm095.obsu = tppdm.obsu.single then
			return(true)
		endif
			return(false)
}

|function write.top.cspa()					|#200-102632.o
function boolean write.top.cspa()				|#200-102632.n
{
	select	tpptc100.*
	from	tpptc100
	where   tpptc100._index1 = {:cprj,:top.cspa}
	as set with 1 rows
	selectdo
		cstl.copy = tpptc100.cstl
|		write.cstl()					|#200-102632.o
		if not write.cstl() then			|#200-102632.sn
			return(false)
		endif						|#200-102632.en
		tpptc100.cprj = cprj.copy
		tpptc100.stat = tpptc.stat.free
		tpptc100.wast = tppdm.wast.free
		tpptc100.rcod = ""
		tpptc100.ohdt = 0
		tpptc100.ltpr = utc.num()
								|#200-102632.sn
		if not assign.dates(tpptc100.stdt, tpptc100.dldt) then
			return(false)
		endif						|#200-102632.en
		tpptc100.llnr = 0
		tpptc100.qust = 0
		tpptc100.dwar = destination.warehouse(tpptc100.dwar)
		if tpptc100.txta <> 0 then
			text.keyw1    = form.text$("tpptc11009")
			|* Element
			text.keyw2    = tpptc100.cprj
			text.keyw3    = tpptc100.cspa
			text.keyw4    = tpptc100.seak
			text.lines    = TEXT.COPY(
					"tpptc100.txta", "tpptc100.txta",
					text.keyw1, text.keyw2,
					text.keyw3, text.keyw4, "", "")
		endif
		db.insert(ttpptc100,db.retry,db.skip.dupl)
	endselect
	rewrite.tppdm600.top.cspa()
	return(true)
}

|function write.cstl()						|#200-102632.o
function boolean write.cstl()				|#200-102632.n
{
	if not isspace(cstl.copy) then
		select	tpptc050.*
		from	tpptc050
		where	tpptc050._index1 = {:cprj,:cstl.copy}
		as set with 1 rows
		selectdo
			tpptc050.cprj = cprj.copy
			tpptc050.stls = tpptc.stls.free
			tpptc050.fcmp = 0			|#244562.sn
			tpptc050.ityp = ""
			tpptc050.idoc = 0
			tpptc050.ivam = 0.0
			tpptc050.csst = tppdm.yeno.no		|#244562.en
			tpptc050.njsp = 0
								|#200-102301.sn
			if not assign.dates(tpptc050.stdt, tpptc050.fidt) then
				return(false)
			endif					|#200-102301.en
			tpptc050.cpcu = tppdm600.ccur
			tpptc050.pacu = tppdm600.ccur
			ofbp.copy = tpptc050.ofbp
			write.cuno()
			if tpptc050.txta <> 0 then
				text.keyw1    = ""
				text.keyw2 = tpptc050.cprj & " " & tpptc050.cstl
				text.keyw3    = ""
				text.keyw4    = ""
				text.lines    = TEXT.COPY("tpptc050.txta",
						"tpptc050.txta",text.keyw1,
						text.keyw2, text.keyw3,
						text.keyw4,"","")
			endif
			db.insert(ttpptc050,db.retry,db.skip.dupl)
		endselect
	endif
	return(true)
}

function domain tccwar destination.warehouse(domain tccwar warehouse)
{

	domain	tcncmp	company
	domain	tppdm.long 	ret			|#900-217835.n
	company = get.compnr()

	if not isspace(warehouse) then
		select	tcmcs003.*, tcemm112.*, tcemm113.*
		from	tcmcs003, tcemm112, tcemm113
		where	tcmcs003._index1 = {:warehouse}
		and	tcmcs003.typw = tctypw.project
		and	tcmcs003.cprj = ""
		and	tcemm112._index1 = {:company, :warehouse}
		and	tcemm113._index1 = {:company, :cprj}
|		and	tcemm112.grid = tcemm113.grid	|#900-217835.o
		as set with 1 rows
		selectdo
			if tpint.dlltcemm.is.warehouse.in.company(|#237297.sn
					company,
					warehouse) <> 0 then
				warehouse = ""
			endif					|#237297.en
								|#237297.so
|			dal.start.business.method("tcmcs003",   |#900-217835.sn
|				"tcmcs003.check.warehouse.type.filter",
|						   ret,
|						   warehouse,
|						   empty,
|					       	   "",
|						   "",
|						   erms,
|						   tctypw.project)
|			if not ret then
|				warehouse = ""
|			endif					|#900-217835.en
								|#237297.eo
		selectempty
			warehouse = ""
		endselect
	endif

	return(warehouse)
}

function write.cuno()
{
	select	tppdm740.*
	from	tppdm740
	where	tppdm740._index1 = {:cprj,:ofbp.copy}
	as set with 1 rows
	selectdo
		tppdm740.cprj = cprj.copy
		tppdm740.ivam = 0.0
		db.insert(ttppdm740,db.retry,db.skip.dupl)
	endselect
}

function rewrite.tppdm600.prj.ccal()
{
	select	tppdm600.*
	from	tppdm600 for update
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		tppdm600.ccal = prj.ccal
		db.update(ttppdm600,db.retry)
	endselect
	prj.ccal = ""
}

function rewrite.tppdm600.top.cspa()
{
	select	tppdm600.*
	from	tppdm600 for update
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		tppdm600.cspa = top.cspa
		db.update(ttppdm600,db.retry)
	endselect
	top.cspa = ""

}

|function write.prj.cpla()
function boolean write.prj.cpla()
{
	select	tppss010.*
	from	tppss010
	where	tppss010._index1 = {:cprj,:prj.cpla}
	as set with 1 rows
	selectdo
		tppss010.cprj = cprj.copy
								|#200-102301.sn
		if not assign.dates(tppss010.stdt, tppss010.fidt) then
			return(false)
		endif						|#200-102301.en
		if tppss010.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    = tppss010.cprj
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppss010.txta",
						"tppss010.txta",
						text.keyw1, text.keyw2,
						text.keyw3, text.keyw4,
						"", "")
		endif
		db.insert(ttppss010,db.retry,db.skip.dupl)
	endselect
	rewrite.tppdm600.prj.cpla()
	return(true)
}

function rewrite.tppdm600.prj.cpla()
{
	select	tppdm600.*
	from	tppdm600  for update
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		tppdm600.cpla = prj.cpla
		db.update(ttppdm600,db.retry)
	endselect
}

|function write.prj.rsac()					|#200-102287.o
function boolean write.prj.rsac()				|#200-102287.n
{
	select	tppss200.*
	from	tppss200
	where	tppss200._index1 =  {:cprj,:prj.cpla,:prj.rsac}
	as set with 1 rows
	selectdo
		cloc.copy = tppss200.cloc
		write.cloc()
		tppss200.cprj = cprj.copy
		cstl.copy = tppss200.cstl
|		write.cstl()					|#200-102287.o
		if not write.cstl() then			|#200-102287.sn
			return(false)
		endif						|#200-102287.en
		tppss200.pact = " "
		tppss200.lact = " "
		tppss200.stat = tpptc.stat.free
		tppss200.wast = tppdm.wast.free
		tppss200.rcod = ""
		tppss200.ohdt = 0
								|#200-103008.sn
		find.date.from.plan = false
		if new.stdt <> 0 and tppss200.ssdt <> 0 and prj.stdt = 0 then
			find.date.from.plan = true
		else
		   if new.fidt <> 0 and tppss200.sfdt <> 0 and prj.dldt = 0 then
			find.date.from.plan = true
	 	   endif
		endif

		if not find.date.from.plan then
			if not assign.dates(tppss200.ssdt, tppss200.sfdt) then
				return(false)
			endif
		else
			if not assign.dates.activities(tppss200.ssdt,
				tppss200.sfdt, tppss200.cpla) then
				return(false)
			endif
		endif						|#200-103008.en
								|#200-103008.so
								|#200-102687.sn
|		if not assign.dates(tppss200.ssdt, tppss200.sfdt) then
|			return(false)
|		endif						|#200-102687.en
								|#200-103008.eo
		tppss200.asdt = 0
		tppss200.afdt = 0
		tppss200.sdch = tppdm.yeno.no
		tppss200.dwar = destination.warehouse(tppss200.dwar)
		if tppss200.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    =	tppss200.cprj
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppss200.txta",
						"tppss200.txta",
						text.keyw1, text.keyw2,
						text.keyw3, text.keyw4,
						"", "")
		endif
		db.insert(ttppss200,db.retry,db.skip.dupl)
	endselect
	rewrite.tppdm600.prj.rsac()
	return(true)
}

function write.cloc()
{
	select	tppdm742.*
	from	tppdm742
	where	tppdm742._index1 = {:cprj,:cloc.copy}
	as set with 1 rows
	selectdo
		tppdm742.cprj = cprj.copy
		db.insert(ttppdm742,db.retry,db.skip.dupl)
	endselect
}

function rewrite.tppdm600.prj.rsac()
{
	select	tppdm600.*
	from	tppdm600 for update
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		tppdm600.rsac = prj.rsac
		db.update(ttppdm600,db.retry)
	endselect
}

function copy.pdm142(ref boolean check)
{
	select	tppdm142.*
	from	tppdm142
	where	tppdm142._index1 = {:cprj}
	selectdo
		check = true
		tppdm142.cprj = cprj.copy
		db.insert(ttppdm142,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm601()
{
	select	tppdm601.*
	from	tppdm601
	where	tppdm601._index1 = {:cprj}
	selectdo
		tppdm601.cprj = cprj.copy
		db.insert(ttppdm601,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm606(ref boolean check)
{
	select	tppdm606.*
	from	tppdm606
	where	tppdm606._index1 = {:cprj}
	selectdo
		check = true
		tppdm606.cprj = cprj.copy
		g.dummy.long = tcibd.dll0010.determine.segment(tppdm606.item,
				tcibd.apco.project,project)
		if project = cprj then
			tppdm606.item(start.position;end.position) = cprj.copy
		endif
		db.insert(ttppdm606,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm607(ref boolean check)
{
	select	tppdm607.*
	from	tppdm607
	where	tppdm607._index1 = {:cprj}
	selectdo
		check = true
		tppdm607.cprj = cprj.copy
		db.insert(ttppdm607,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm646(ref boolean check)
{
	select	tppdm646.*
	from	tppdm646
	where	tppdm646._index1 = {:cprj}
	selectdo
		check = true
		tppdm646.cprj = cprj.copy
		db.insert(ttppdm646,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm649(ref boolean check)
{
	select	tppdm649.*
	from	tppdm649
	where	tppdm649._index1 = {:cprj}
	selectdo
		check = true
		tppdm649.cprj = cprj.copy
		if tppdm649.txta <> 0 then
			text.keyw1 = ""
			text.keyw2 = shiftl$(tppdm649.cprj)
			text.keyw3 = shiftl$(tppdm649.cres)
			text.keyw4 = ""
			text.lines = TEXT.COPY("tppdm649.txta", "tppdm649.txta",
				     text.keyw1, text.keyw2, text.keyw3,
					text.keyw4,
				     "", "")
		endif
		db.insert(ttppdm649,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm653(ref boolean check)
{
	select	tppdm653.*
	from	tppdm653
	where	tppdm653._index1 = {:cprj}
	selectdo
		check = true
		tppdm653.cprj = cprj.copy
		if tppdm653.txta <> 0 then
			text.keyw1 = ""
			text.keyw2 = tppdm653.cprj & " " & tppdm653.capp
			text.keyw3 = ""
			text.keyw4 = ""
			text.lines = TEXT.COPY("tppdm653.txta", "tppdm653.txta",
				     text.keyw1, text.keyw2, text.keyw3,
					text.keyw4,
				     "", "")
		endif
		db.insert(ttppdm653,db.retry,db.skip.dupl)
	endselect
}

function copy.project.rates(ref boolean check)
{
	select	tcppl092.*
	from	tcppl092
	where	tcppl092.cprj = :cprj
	selectdo
		check = true
		tcppl092.cprj = cprj.copy
		db.insert(ttcppl092,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm669(ref boolean check)
{
	select	tppdm669.*
	from	tppdm669
	where	tppdm669._index1 = {:cprj}
	selectdo
		check = true
		tppdm669.cprj = cprj.copy
		if tppdm669.txta <> 0 then
			text.keyw1 = ""
			text.keyw2 = shiftl$(tppdm669.cprj)
			text.keyw3 = shiftl$(tppdm669.cdoc)
			text.keyw4 = ""
			text.lines = TEXT.COPY("tppdm669.txta", "tppdm669.txta",
				     text.keyw1, text.keyw2, text.keyw3,
					text.keyw4,
				     "", "")
		endif
		db.insert(ttppdm669,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm670(ref boolean check)				|#800-172923.sn
{
	select	tppdm670.*
	from	tppdm670
	where	tppdm670._index1 = {:cprj}
	selectdo
		check = true
		tppdm670.cprj = cprj.copy
		db.insert(ttppdm670,db.retry,db.skip.dupl)
	endselect
}								|#800-172923.en

function copy.pdm740()
{
	select	tppdm740.*
	from	tppdm740
	where	tppdm740._index1 = {:cprj}
	selectdo
		tppdm740.cprj = cprj.copy
		tppdm740.ivam = 0.0
		db.insert(ttppdm740,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm741()
{
	select	tppdm741.*
	from	tppdm741
	where	tppdm741._index1 = {:cprj}
	selectdo
		tppdm741.cprj = cprj.copy
		db.insert(ttppdm741,db.retry,db.skip.dupl)
	endselect
}

|function copy.ppc320(ref boolean check)
|{
|	select	tpppc320.*
|	from	tpppc320
|	where	tpppc320._index1 = {:cprj}
|	selectdo
|		check = true
|		tpppc320.cprj = cprj.copy
|		db.insert(ttpppc320,db.retry,db.skip.dupl)
|	endselect
|}

function long copy.item.data(ref boolean check)
{
	domain	tcmcs.long6		start.position
	domain	tcmcs.long6		end.position
	domain	tcmcs.long6		segment.size
	domain	tcitem			new.item
	domain	tcmcs.s250m		ref.mess
	domain	tcitem			min.item    fixed
	domain 	tcitem			max.item    fixed

	segment.size = tcibd.dll0010.segment.size(tcibd.apco.project,
						  start.position,
						  end.position)
|	min.item = string.set$(chr$(0),len(min.item))		|#1152679.o
	set.fmin(min.item, "tcitem")				|#1152679.n
	min.item(start.position ; segment.size) = cprj
|	max.item = string.set$(chr$(255),len(max.item))		|#1152679.o
	set.fmax(max.item, "tcitem")				|#1152679.n
	max.item(start.position ; segment.size) = cprj

	select	tcibd001.item, tcibd001.dsca, tcibd001.txta
	from	tcibd001
	where	tcibd001._index1 inrange {:min.item} and {:max.item}
	and	tcibd001.kitm <> tckitm.equipment
	and	tcibd001.kitm <> tckitm.subcontracting
	selectdo
		dal.reset.error.messages(0)
		check = true
		new.item = tcibd001.item
		new.item(start.position;segment.size) = cprj.copy
		if tcibd001.txta = 0 then
			copy.text = tcyesno.no
		else
			copy.text = tcyesno.yes
		endif
	if  tcibd.dll0205.copy.process(tcibd001.item,
					new.item,
					tcibd001.dsca,	|* Copy Description
					tcyesno.no,		|#203506.sn
					false,
					0,
					0,
					utc.num(),
					tcyesno.no,
					"",			|#203506.en
					copy.text,  |* Copy Text
					tcyesno.yes,|* Copy Alternative Items
					tcyesno.yes,|* Copy Business Partners
								|#1058454.sn
					tcyesno.no, |* Skip Inactive BP
								|#1058454.en
					tcyesno.yes,|*Copy Engineering Relations
					tcyesno.yes,|* Copy Item Production Data
					tcyesno.no, |* No Copy BOM
					tcyesno.no, |* No Copy Routing
					tcyesno.no, |* No copy.ref.designators
								|#800-147039.so
|					tcyesno.yes)|* Copy Activities
								|#800-147039.eo
								|#800-147039.sn
					tcyesno.yes,|* Copy Activities
					tcyesno.no,
								|#215034-FP4.sn
|					tcyesno.no)		|#800-147039.en
					tcyesno.no,
					appr.yeno)
								|#215034-FP4.en
			then
			while dal.get.error.message(ref.mess) >= 0
				message(ref.mess)
				print.item.copy.process()
			endwhile
		endif
	endselect
	return(0)
}

function copy.pdm615(ref boolean check)
{
	select	tppdm615.*
	from	tppdm615
	where	tppdm615._index1 = {:cprj}
	selectdo
		check = true
		tppdm615.cprj = cprj.copy
		tppdm615.ltrs = utc.num()
		tppdm615.ltrc = utc.num()
		tppdm615.dfrc = tppdm.yeno.no
		tppdm615.dfrs = tppdm.yeno.no
		if tppdm615.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    = tppdm615.cprj & tppdm615.task
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppdm615.txta",
						"tppdm615.txta",
						text.keyw1, text.keyw2,
						text.keyw3, text.keyw4,
						"", "")
		endif
		db.insert(ttppdm615,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm625(ref boolean check)
{
	domain tcmcs.long6	start.position
	domain tcmcs.long6	end.position
	domain tcitem		equip.item
	domain tppdm.reft	reft.type

	reft.type = tppdm.reft.project

	select	tppdm625.*
	from	tppdm625
	where	tppdm625._index1 = {:cprj}
	selectdo
		check = true
		tppdm625.cprj = cprj.copy
		tppdm625.ltrs = utc.num()
		tppdm625.ltrp = utc.num()
		tppdm625.ltrc = utc.num()
		tppdm625.dfrc = tppdm.yeno.no
		tppdm625.dfrp = tppdm.yeno.no
		tppdm625.dfrs = tppdm.yeno.no
		if tppdm625.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    = tppdm625.cprj&tppdm625.cequ
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppdm625.txta",
					"tppdm625.txta",
					text.keyw1, text.keyw2, text.keyw3,
					text.keyw4,"", "")
		endif
		db.insert(ttppdm625,db.retry,db.skip.dupl)

		g.dummy.size = tcibd.dll0010.segment.size(tcibd.apco.project,
						start.position,end.position)
		equip.item = tppdm.dll0065.copy.cost.unit.into.item.domain(
					cprj,tppdm625.cequ, reft.type)
		select	tcibd001.*
		from	tcibd001
		where	tcibd001.cprj = :cprj
		and	tcibd001.kitm = tckitm.equipment
		and	tcibd001.item = :equip.item
		as set with 1 rows
		selectdo
			tcibd001.item(start.position;end.position) = cprj.copy
			tcibd001.cprj = cprj.copy
			db.insert(ttcibd001,db.retry,db.skip.dupl)
			g.dummy.bool = tpint.dlltdipu.update.ipu001(
						tcibd001.item, tppdm625.cvat,
						tppdm625.cuti, tppdm625.cuti,
						tppdm625.cpgp, tppdm625.csgp,
						tppdm625.ccur, tppdm625.ratp,
						tppdm625.ltrp, tppdm625.otbp,
						tppdm625.txta)
			sales.pris = convert.to.ref.curr(tppdm625.rats,
							 tppdm625.rsmc,
							 tppdm625.ccsr)
			g.dummy.long = tpint.dlltdisa.fill.fields.tdisa001(
						tcibd001.item, tppdm625.cvat,
						tppdm625.cuti, tppdm625.cuti,
						tppdm625.cpgs, tppdm625.csgs,
						sales.pris,tppdm625.ltrs,
						tppdm625.txta,
						tppdm625.seak)
		endselect
	endselect
}

function copy.pdm635(ref boolean check)
{
	domain tcmcs.long6	start.position
	domain tcmcs.long6	end.position
	domain tcitem		subc.item
	domain tppdm.reft	reft.type
	domain tccuni		inventory.cuni

	reft.type = tppdm.reft.project

	select	tppdm635.*
	from	tppdm635
	where	tppdm635._index1 = {:cprj}
	selectdo
		check = true
		tppdm635.cprj = cprj.copy
		tppdm635.ltps = utc.num()
		tppdm635.ltpp = utc.num()
		tppdm635.ltpc = utc.num()
		tppdm635.dfpc = tppdm.yeno.no
		tppdm635.dfpp = tppdm.yeno.no
		tppdm635.dfps = tppdm.yeno.no
		if tppdm635.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    = tppdm635.cprj&tppdm635.csub
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppdm635.txta",
					"tppdm635.txta",
					text.keyw1, text.keyw2, text.keyw3,
					text.keyw4, "", "")
		endif
		db.insert(ttppdm635,db.retry,db.skip.dupl)

		g.dummy.size = tcibd.dll0010.segment.size(tcibd.apco.project,
						start.position,end.position)
		subc.item = tppdm.dll0065.copy.cost.unit.into.item.domain(
					cprj, tppdm635.csub, reft.type)

		| Get inventory unit. This could be the time unit or the
		| quantity unit, depending of the dsbc value for this subc.
		if tppdm635.dsbc = tppdm.dsbc.quantity then
			inventory.cuni = tppdm635.cuni
		else
			inventory.cuni = tppdm635.cuti
		endif
		select	tcibd001.*
		from	tcibd001
		where	tcibd001.cprj = :cprj
		and	tcibd001.kitm = tckitm.subcontracting
		and	tcibd001.item = :subc.item
		as set with 1 rows
		selectdo
			tcibd001.item(start.position;end.position) = cprj.copy
			tcibd001.cprj = cprj.copy
			db.insert(ttcibd001,db.retry,db.skip.dupl)
			g.dummy.bool = tpint.dlltdipu.update.ipu001(
					tcibd001.item, tppdm635.cvat,
					inventory.cuni, inventory.cuni,
					tppdm635.cpgp, tppdm635.csgp,
					tppdm635.ccur, tppdm635.prip,
					tppdm635.ltpp, tppdm635.otbp,
					tppdm635.txta)
			sales.pris = convert.to.ref.curr(tppdm635.pris,
							 tppdm635.psmc,
							 tppdm635.ccsp)
			g.dummy.long = tpint.dlltdisa.fill.fields.tdisa001(
						tcibd001.item, tppdm635.cvat,
						inventory.cuni, inventory.cuni,
						tppdm635.cpgs, tppdm635.csgs,
						sales.pris,tppdm635.ltps,
						tppdm635.txta,
						tppdm635.seak)
		endselect
	endselect
}

function domain	tppdm.abfc convert.to.ref.curr(
					domain tppdm.aalc i.amount,
				ref	domain tppdm.aalc i.amount.mc(),
					domain tcccur     i.sales.curr)
{
	domain  tppdm.long	position

	GET_MCUR_PARM
	if REF_HOME_CCUR = i.sales.curr then
	   sales.pris = i.amount
	else
	   if INDEPENDENT_MCUR and
	      tpint.dlltcemm.currency.is.home.currency(0, i.sales.curr) then
		   g.dummy.bool = tpint.dlltcemm.position.of.hcur(
		   				get.compnr(),
		   				REF_HOME_CCUR,
						position)
		   sales.pris = i.amount.mc(position)
	   else
		CONVERT_AMOUNT( i.sales.curr, i.amount,
				false, REF_HOME_CCUR , sales.pris)
	   endif
	endif
	return(sales.pris)
}

function copy.pdm640(ref boolean check)
{
	select	tppdm640.*
	from	tppdm640
	where	tppdm640._index1 = {:cprj}
	selectdo
		check = true
		tppdm640.cprj = cprj.copy
		tppdm640.ltpr = utc.num()
		tppdm640.ltsp = utc.num()
		tppdm640.dpri = tppdm.yeno.no
		tppdm640.dspr = tppdm.yeno.no
		if tppdm640.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    = tppdm640.cprj & tppdm640.cico
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppdm640.txta",
					"tppdm640.txta",
					text.keyw1, text.keyw2, text.keyw3,
					text.keyw4, "", "")
		endif
		db.insert(ttppdm640,db.retry,db.skip.dupl)
	endselect
}

function copy.pdm643(ref boolean check)
{
	select	tppdm643.*
	from	tppdm643
	where	tppdm643._index1 = {:cprj}
	selectdo
		check = true
		tppdm643.cprj = cprj.copy
		if tppdm643.txta <> 0 then
			text.keyw1    = ""
			text.keyw2    = tppdm643.cprj & tppdm643.cpro
			text.keyw3    = ""
			text.keyw4    = ""
			text.lines    = TEXT.COPY("tppdm643.txta",
					"tppdm643.txta",
					text.keyw1, text.keyw2, text.keyw3,
					text.keyw4, "", "")
		endif
		db.insert(ttppdm643,db.retry,db.skip.dupl)
	endselect
}
								|#PRJ DELIVERABLE.sn
function boolean copy.pdm700(ref boolean check)
{
	domain	 tcdate 	planned.delivery.date

	select 	tppdm700.*
	from	tppdm700
	where	tppdm700._index1 = {:cprj}
	selectdo
		RETIFNOK(dal.copy.object("tppdm700"))
		dal.set.field("tppdm700.cprj", cprj.copy)
		dal.set.field("tppdm700.sqan", 0)
		dal.set.field("tppdm700.stat", tppdm.psts.free)
|		dal.set.field("tppdm700.pddt", utc.num())	|#800-176856.o
		dal.set.field("tppdm700.loco", logname$)
		dal.set.field("tppdm700.cqan", 0)		|#800-176856.sn
		dal.set.field("tppdm700.cuni", "")
		dal.set.field("tppdm700.suni", "")		|#800-176856.en
|		if tppdm700.txta <> 0 then			|#800-176856.so
|			text.keyw1    = ""
|			text.keyw2    =	tppdm700.cprj
|			text.keyw3    = ""
|			text.keyw4    = ""
|			text.lines    = TEXT.COPY("tppdm700.txta",
|				"tppdm700.txta",text.keyw1,text.keyw2,
|				text.keyw3,text.keyw4,"","")
|		endif						|#800-176856.eo
		RETIFNOK(dal.save.object("tppdm700", db.retry))
	endselect
	return(true)
}

								|#PRJ DELIVERABLE.en
function copy.pdm742(ref boolean check)
{
	select	tppdm742.*
	from	tppdm742
	where	tppdm742._index1 = {:cprj}
	selectdo
		check = true
		tppdm742.cprj = cprj.copy
		db.insert(ttppdm742,db.retry,db.skip.dupl)
	endselect
}

|function copy.pss010(ref boolean check)			|#200-102301.o
function boolean copy.pss010(ref boolean check)	|#200-102301.n
{
	boolean	record.not.present			|#900-213818.n
	record.not.present = false				|#900-213818.n

	select	tppss010.*
	from	tppss010
	where	tppss010._index1 = {:cprj}
	selectdo
		select	tppss010.cprj
		from	tppss010
		where	tppss010._index1 = {:cprj.copy,:tppss010.cpla}
		as set with 1 rows
		selectdo
		selectempty
			check = true
			record.not.present = true		|#900-213818.sn
		endselect
		if record.not.present then			|#900-213818.en
			record.not.present = false		|#900-213818.n
			tppss010.cprj = cprj.copy
								|#200-102301.sn
			if not assign.dates(tppss010.stdt, tppss010.fidt) then
				check = false
				return(false)
			endif					|#200-102301.en
			if tppss010.txta <> 0 then
				text.keyw1    = ""
				text.keyw2    = tppss010.cprj&tppss010.cpla
				text.keyw2    = tppss010.cprj
				text.keyw3    = ""
				text.keyw4    = ""
				text.lines    = TEXT.COPY("tppss010.txta",
					"tppss010.txta",text.keyw1,text.keyw2,
					text.keyw3,text.keyw4,"","")
			endif
			db.insert(ttppss010,db.retry,db.skip.dupl)
		endif						|#900-213818.n
|		endselect					|#900-213818.o
	endselect
	return(true)
}

function copy.pss020(ref boolean check)
{
	select	tppss020.*
	from	tppss020
	where	tppss020._index1 = {:cprj}
	selectdo
		check = true
		tppss020.cprj = cprj.copy
		tppss020.bsta = tppss.bsta.free
		db.insert(ttppss020,db.retry,db.skip.dupl)
	endselect
}

function copy.pss220(ref boolean check)
{
	select	tppss220.*
	from	tppss220
	where	tppss220._index1 = {:cprj}
	selectdo
		check = true
		tppss220.cprj = cprj.copy
		db.insert(ttppss220,db.retry,db.skip.dupl)
	endselect
}

|function copy.pss200(ref boolean check)			|#200-102301.o
function boolean copy.pss200(ref boolean check)	|#200-102301.n
{
	boolean	record.not.present			|#900-213818.n
	record.not.present = false				|#900-213818.n

|	domain	tcitem	pss.litm
	select	tppss200.*
	from	tppss200
	where	tppss200._index1 = {:cprj}
	selectdo
		select	tppss200.cprj
		from	tppss200
		where	tppss200._index1 = {:cprj.copy, :tppss200.cpla,
					    :tppss200.cact}
		as set with 1 rows
		selectdo
		selectempty
			check = true
			record.not.present = true		|#900-213818.sn
		endselect
		if record.not.present then			|#900-213818.en
			record.not.present = false		|#900-213818.n
			tppss200.pact = " "
			tppss200.lact = " "
			|* For Milestones only linked item will be present .
			|* But customised item should not be copied to
			|* different project  and derived from item also not
			|* copied in milestone as customised items only
			|* are allowed in this .
			tppss200.litm = ""
			tppss200.cprj = cprj.copy
			tppss200.stat = tpptc.stat.free
			tppss200.wast = tppdm.wast.free
			tppss200.rcod = ""
			tppss200.asdt = 0
			tppss200.afdt = 0
			tppss200.ohdt = 0			|# 246924.n
			find.date.from.plan = false		|#200-103008.sn
			if new.stdt <> 0 and tppss200.ssdt <> 0 and
			    prj.stdt = 0 then
				find.date.from.plan = true
			else
				if new.fidt <> 0 and tppss200.sfdt <> 0 and
					prj.dldt = 0 then
					find.date.from.plan = true
				endif
			endif

			if not find.date.from.plan then
				if not assign.dates(tppss200.ssdt,
					            tppss200.sfdt) then
					check = false
					return(false)
				endif
			else
				if not assign.dates.activities(tppss200.ssdt,
					tppss200.sfdt,tppss200.cpla) then
					check = false
					return(false)
				endif
			endif					|#200-103008.en
|								|#200-103008.so
|								|#200-102301.sn
|			if not assign.dates(tppss200.ssdt, tppss200.sfdt) then
|				check = false
|				return(false)
|			endif					|#200-102301.en
|								|#200-103008.eo
			tppss200.sdch = tppdm.yeno.no
			tppss200.dwar = destination.warehouse(tppss200.dwar)
			if check.obs.link() then
				tppss200.coel = ""
			endif
			if tppss200.txta <> 0 then
				text.keyw1    = ""
				text.keyw2    =	tppss200.cprj
				text.keyw3    = ""
				text.keyw4    = ""
				text.lines    = TEXT.COPY("tppss200.txta",
					"tppss200.txta",text.keyw1,text.keyw2,
					text.keyw3,text.keyw4,"","")
			endif

			db.insert(ttppss200,db.retry,db.skip.dupl)
		endif						|#900-213818.n
|		endselect					|#900-213818.o
	endselect
	|** To Fill the Parent
	select	tppss200.*
	from	tppss200
	where	tppss200._index1 = {:cprj}
	selectdo
		pss.pact = tppss200.pact
		pss.lact = tppss200.lact
|		select	tppss200.pact				|#200-103008.o
								|#800-174540.so
|		select	tppss200.pact, tppss200.ssdt,		|#200-103008.n
|			tppss200.sfdt				|#800-174540.sn

		select  tppss200.*				|#800-174540.n
		from	tppss200 for update
		where	tppss200._index1 = {:cprj.copy, :tppss200.cpla,
						:tppss200.cact}
		as set with 1 rows
		selectdo
			dal.start.business.method(		|#800-174540.sn
				"tppss200",
				"indicate.standard.activity.is.added",
				g.long,
				true)
			|* this business.method prevents that the mevl is
			|* defaulted again and causes corrupt data.
								|#800-174540.en
								|#800-167298.sn
			g.long = dal.change.object("tppss200")
			dal.set.field("tppss200.pcom", 0)
			dal.set.field("tppss200.asdt", 0)
			dal.set.field("tppss200.afdt", 0)
			dal.set.field("tppss200.lact", pss.lact)
			dal.set.field("tppss200.pact", pss.pact)
			g.long = dal.save.object("tppss200")
			if g.long <> 0 then
				continue
			endif
								|#800-167298.en
								|#800-167298.so
|			tppss200.pcom = 0
|			tppss200.asdt = 0
|			tppss200.afdt = 0
|			tppss200.lact = pss.lact
|			tppss200.pact = pss.pact
|			db.update(ttppss200,db.retry)
								|#800-167298.eo
			if isspace(tppss200.pact) then		|#200-103008.sn
		   |* The Plan dates are updated with the Top CE schedule dates
				g.dummy.long = tppss.dll2005.update.plan.dates(
					cprj.copy,
					tppss200.cpla, tppss200.cact,
					tppss200.ssdt, tppss200.sfdt)
			endif					|#200-103008.en
		endselect
	endselect
	return(true)
}

function boolean assign.dates(ref domain tppdm.date start.date,
		      ref domain tppdm.date end.date)
{
	long duration
	long act.duration
	if new.stdt <> 0 and start.date <> 0 and prj.stdt <> 0 then
		duration = start.date - prj.stdt
		start.date = new.stdt + duration
		if end.date <> 0 then
			act.duration = end.date - prj.stdt
			end.date = new.stdt + act.duration
		else
			end.date = 0
		endif
	else
		if new.fidt <> 0 and end.date <> 0 and prj.dldt <> 0 then
			duration = prj.dldt - end.date
			end.date = new.fidt - duration
			if start.date <> 0 then
				act.duration =
				prj.dldt - start.date
				start.date = new.fidt - act.duration
			else
				start.date = 0
			endif
		endif
	endif
|	if start.date <> 0 and start.date < 600 then		|#200-102613.o
	if start.date <> 0 and (start.date < 0 or 		|#200-102613.sn
				start.date > 2147452200) then	|#200-102613.en
		print.mess = sprintf$(form.text$("tppdm7840.06"))
		|* Date not according to UTC format, copying process aborted
		print.copy.line()
		return(false)
	endif
|	if end.date <> 0 and end.date > 2145983340 then		|#200-102613.o
	if end.date <> 0 and (end.date < 0 or			|#200-102613.sn
				end.date > 2147452200) then	|#200-102613.en
		print.mess = sprintf$(form.text$("tppdm7840.06"))
		|* Date not according to UTC format, copying process aborted
		print.copy.line()
		return(false)
	endif
		return(true)
}
								|#200-103008.sn
function boolean assign.dates.activities(ref domain tppdm.date
				start.date, ref domain tppdm.date
				end.date, domain tppss.cpla cpla)
{
	long time.period
	long activity.duration
	domain tppdm.date temp.end.date				|#900-226122.n

	select	tppss010.*
	from	tppss010
	where	tppss010._index1 = {:cprj, :cpla}
	as set with 1 rows
	selectdo
|		if tppss010.stdt <> 0 then			|#900-226122.so
		if tppss010.stdt <> 0 and new.stdt <> 0 then	|#900-226122.n
		   time.period = start.date - tppss010.stdt
		   start.date = new.stdt + time.period
		   if end.date <> 0 then
			activity.duration = end.date - tppss010.stdt
			end.date = new.stdt + activity.duration
		    else
			end.date = 0
		    endif
		else
||		    if tppss010.fidt <> 0 then			|#900-226122.o
		    if tppss010.fidt <> 0 and new.fidt <> 0 then|#900-226122.n
			time.period = tppss010.fidt - end.date
|			end.date = new.fidt - time.period	|#900-226122.o
			temp.end.date = new.fidt - time.period	|#900-226122.n
			if start.date <> 0 then
                            activity.duration = tppss010.fidt - start.date
                            					|#900-226122.sn
		    	  	if new.fidt > activity.duration then
		    	  	|* if finish time (with empty date) given as i/p
		    	  	|* then activity duration may exceed new.fidt
		    	  	   end.date = temp.end.date	|#900-226122.en
			    	   start.date = new.fidt - activity.duration
		    	  	 endif				|#900-226122.n
			else
			    end.date = temp.end.date		|#900-226122.dn
			    start.date = 0
			endif
		    endif
		endif
	endselect
	return(true)
}								|#200-103008.en

function copy.ptc030(ref boolean check)
{
	select	tpptc030.*
	from	tpptc030
	where	tpptc030._index1 = {:cprj}
	selectdo
		check = true
		tpptc030.cprj = cprj.copy
		tpptc030.stat = tpptc.stat.free
		db.insert(ttpptc030,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc031(ref boolean check)
{
	select	tpptc031.*
	from	tpptc031
	where	tpptc031._index1 = {:cprj}
	selectdo
		check = true
		tpptc031.cprj = cprj.copy
		tpptc031.stat = tpptc.stat.free
		db.insert(ttpptc031,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc032(ref boolean check)
{
	select	tpptc032.*
	from	tpptc032
	where	tpptc032._index1 = {:cprj}
	selectdo
		check = true
		tpptc032.cprj = cprj.copy
		tpptc032.stat = tpptc.stat.free
		db.insert(ttpptc032,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc040(ref boolean check)
{
	select	tpptc040.*
	from	tpptc040
	where	tpptc040._index1 = {:cprj}
	selectdo
		check = true
		tpptc040.cprj = cprj.copy
		tpptc040.stat = tpptc.stat.free
		g.dummy.long = tcibd.dll0010.determine.segment(tpptc040.item,
				tcibd.apco.project,project)
		if project = cprj then
			tpptc040.item(start.position;end.position) = cprj.copy
		endif
		db.insert(ttpptc040,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc041(ref boolean check)
{
	select	tpptc041.*
	from	tpptc041
	where	tpptc041._index1 = {:cprj}
	selectdo
		check = true
		tpptc041.cprj = cprj.copy
		tpptc041.stat = tpptc.stat.free
		db.insert(ttpptc041,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc042(ref boolean check)
{
	select	tpptc042.*
	from	tpptc042
	where	tpptc042._index1 = {:cprj}
	selectdo
		check = true
		tpptc042.cprj = cprj.copy
		tpptc042.stat = tpptc.stat.free
		db.insert(ttpptc042,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc043(ref boolean check)
{
	select	tpptc043.*
	from	tpptc043
	where	tpptc043._index1 = {:cprj}
	selectdo
		check = true
		tpptc043.cprj = cprj.copy
		tpptc043.stat = tpptc.stat.free
		db.insert(ttpptc043,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc044(ref boolean check)
{
	select	tpptc044.*
	from	tpptc044
	where	tpptc044._index1 = {:cprj}
	selectdo
		check = true
		tpptc044.cprj = cprj.copy
		tpptc044.stat = tpptc.stat.free
		db.insert(ttpptc044,db.retry,db.skip.dupl)
	endselect
}

|function copyptc050(ref boolean check)			|#200-102287.o
function boolean copy.ptc050(ref boolean check)	|#200-102287.n
{
	boolean	record.not.present			|#900-213818.n
	record.not.present = false				|#900-213818.n
	select	tpptc050.*
	from	tpptc050
	where	tpptc050._index1 = {:cprj}
	selectdo
		select	tpptc050.cprj
		from	tpptc050
		where	tpptc050._index1 = {:cprj.copy,
					      :tpptc050.cstl}
		as set with 1 rows
		selectdo
		selectempty
			check = true
			record.not.present = true		|#900-213818.sn
		endselect

		if record.not.present then			|#900-213818.en
			record.not.present = false		|#900-213818.n
			tpptc050.cprj = cprj.copy
			ofbp.copy = tpptc050.ofbp
			write.cuno()
			tpptc050.stls = tpptc.stls.free
			tpptc050.trsl = tppdm.yeno.no
			tpptc050.fcmp = 0			|#244562.n
			tpptc050.ityp = ""			|#244562.n
			tpptc050.idoc = 0
			tpptc050.ivam = 0.0
			tpptc050.csst = tppdm.yeno.no
			tpptc050.njsp = 0
								|#200-102301.sn
			if not assign.dates(tpptc050.stdt, tpptc050.fidt) then
				check = false
				return(false)
			endif					|#200-102301.en
			if tpptc050.txta <> 0 then
				text.keyw1    = ""
				text.keyw2    = tpptc050.cprj & " " &
						tpptc050.cstl
				text.keyw3    = ""
				text.keyw4    = ""
				text.lines    = TEXT.COPY("tpptc050.txta",
					"tpptc050.txta",text.keyw1,text.keyw2,
					text.keyw3,text.keyw4,"","")
			endif
			db.insert(ttpptc050,db.retry,db.skip.dupl)
		endif						|#900-213818.n
|		endselect					|#900-213818.o
	endselect
	return(true)						|#200-102301.n
}

|function copy.ptc100(ref boolean check)			|#200-102432.o
function boolean copy.ptc100(ref boolean check)	|#200-102432.n
{
	boolean	record.not.present			|#900-213818.n
	record.not.present = false				|#900-213818.n

	select	tpptc100.*
	from	tpptc100
	where	tpptc100._index1 = {:cprj}
	selectdo
		select	tpptc100.cprj
		from	tpptc100
		where	tpptc100._index1 = {:cprj.copy,:tpptc100.cspa}
		as set with 1 rows
		selectdo
		selectempty
			check = true
			record.not.present = true		|#900-213818.sn
		endselect

		if record.not.present then			|#900-213818.en
			record.not.present = false		|#900-213818.n
			tpptc100.cprj = cprj.copy
			tpptc100.stat = tpptc.stat.free
			tpptc100.wast = tppdm.wast.free
			tpptc100.rcod = ""
			tpptc100.ltpr = utc.num()
								|#200-102287.sn
			if not assign.dates(tpptc100.stdt, tpptc100.dldt) then
				check = false
				return(false)
			endif					|#200-102287.en
			tpptc100.llnr = 0
			tpptc100.qust = 0
			tpptc100.dwar = destination.warehouse(tpptc100.dwar)
			if tpptc100.txta <> 0 then
				text.keyw1    = form.text$("tpptc11009")
				|* Element
				text.keyw2    = tpptc100.cprj
				text.keyw3    = tpptc100.cspa
				text.keyw4    = tpptc100.seak
				text.lines    = TEXT.COPY("tpptc100.txta",
					"tpptc100.txta",text.keyw1,text.keyw2,
					text.keyw3,text.keyw4,"","")
			endif
			db.insert(ttpptc100,db.retry,db.skip.dupl)
		endif						|#900-213818.n
|		endselect					|#900-213818.o
	endselect
	return(true)
}

function copy.ptc101(ref boolean check)
{
	select	tpptc101.*
	from	tpptc101
	where	tpptc101._index1 = {:cprj}
	selectdo
		check = true
		tpptc101.cprj = cprj.copy
		tpptc101.stat = tpptc.stat.free
		if tpptc101.txta <> 0 then
			text.keyw1       = form.text$("tpptc11051")
			|* Element relationship
			text.keyw2(1;9)  = shiftl$(tpptc101.cprj)
			text.keyw2(8;7)  = shiftl$(tpptc101.cspp)
			text.keyw3(1;12) = form.text$("tpptc11052")
			|* Sequence no.:
			text.keyw3(13;3) = edit$(tpptc101.sern,"9999")
			text.keyw4       = ""
			text.lines 	 = TEXT.COPY("tpptc101.txta",
					"tpptc101.txta", text.keyw1,
					text.keyw2, text.keyw3,
					text.keyw4, "", "")
		endif
		db.insert(ttpptc101,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc120(ref boolean check)
{
	domain 	tcitem		base.item

	select	tpptc120.*, tcibd001.kitm, tcibd001.dfit
	from	tpptc120, tcibd001, tppdm005
	where	tpptc120._index1 = {:cprj}
	and 	tpptc120.item refers to tppdm005
	and	tppdm005.item refers to tcibd001
	selectdo
		if cprj <> cprj.copy and
		   tppdm.dll0011.read.ref.type.of.item(tpptc120.item) =
							tppdm.reft.pcs then
			if not isspace(tcibd001.dfit) then
				if not item.present.in.tppdm005(tcibd001.dfit)
									then
					continue
				endif
				tpptc120.item = tcibd001.dfit
				tpptc120.cpva = 0
			else
				|* Item not derived from standard or not
				|* configured, budget line will not be copied.
				continue
			endif
		endif
		if tcibd001.kitm = tckitm.generic and
		   tpptc120.cpva <> 0 then
			tpint.dllcaint.get.reference(
					tpptc120.cpva,
					tpptc120.item,
					tmp.ref.generic.item,
					tmp.reference.type,
					tmp.ref.date,
					tmp.ref.order,
					tmp.ref.pono,
					tmp.ref.seqn,
					tmp.ref.desc,
					tmp.ref.business.partner)
			if tmp.reference.type <> tcreft.standard then
				g.dummy.long =
				tpint.dllcatpl.copy.product.variant(
							tpptc120.item,
							cprj.copy,
							tpptc120.cpva)
				|* tpptc120.cpva is an io variable
			endif
		endif
		check = true
		tpptc120.cprj = cprj.copy
		tpptc120.stat = tpptc.stat.free
		tpptc120.dfpc = tppdm.yeno.no
		g.dummy.long = tcibd.dll0010.determine.segment(tpptc120.item,
				tcibd.apco.project,project)
		if project = cprj then
			tpptc120.item(start.position;end.position) = cprj.copy
		endif
		if tpptc120.txta <> 0 then
		   text.keyw1       = form.text$("tpptca0016")
		   |* Element budget
		   text.keyw2       = shiftl$(tpptc120.cprj)
		   g.dummy.long = tcibd.dll0010.determine.segment(tpptc120.item,
				tcibd.apco.none,base.item)
		   text.keyw3       = shiftl$(base.item)
		   text.keyw4(1;11) = form.text$("tpptc1110b")
		   |* Mat. Line :
		   text.keyw4(12;4) = edit$(tpptc120.sern,"9999")
		   text.lines 	 = TEXT.COPY("tpptc120.txta", "tpptc120.txta",
				   text.keyw1, 	text.keyw2, text.keyw3,
				   text.keyw4, "", "")
		endif
		db.insert(ttpptc120,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc500(ref boolean check)
{
	select	tpptc500.*
	from	tpptc500
	where	tpptc500._index1 = {:cprj}
	selectdo
		check = true
		tpptc500.cprj = cprj.copy
		tpptc500.stat = tpptc.stat.free
		db.insert(ttpptc500,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc130(ref boolean check)
{
	select	tpptc130.*
	from	tpptc130
	where	tpptc130._index1 = {:cprj}
	selectdo
		check = true
		tpptc130.cprj = cprj.copy
		tpptc130.stat = tpptc.stat.free
		tpptc130.dfrc = tppdm.yeno.no
|		tpptc130.orno = ""				|#800-175298.o
|		tpptc130.acln = 0				|#800-175298.o
		if tpptc130.txta <> 0 then
		   text.keyw1       = form.text$("tpptca0016")
		   |* Element budget
		   text.keyw2       = shiftl$(tpptc130.cprj)
		   text.keyw3       = shiftl$(tpptc130.task)
		   text.keyw4(1;11) = form.text$("tpptc11111")
		   |* Labor line:
		   text.keyw4(12;4) = edit$(tpptc130.sern,"9999")
		   text.lines       = TEXT.COPY("tpptc130.txta","tpptc130.txta",
				   text.keyw1, text.keyw2, text.keyw3,
				   text.keyw4, "", "")
		endif
		db.insert(ttpptc130,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc510(ref boolean check)
{
	select	tpptc510.*
	from	tpptc510
	where	tpptc510._index1 = {:cprj}
	selectdo
		check = true
		tpptc510.cprj = cprj.copy
		tpptc510.stat = tpptc.stch.free
		db.insert(ttpptc510,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc140(ref boolean check)
{
	select	tpptc140.*
	from	tpptc140
	where	tpptc140._index1 = {:cprj}
	selectdo
		check = true
		tpptc140.cprj = cprj.copy
		tpptc140.stat = tpptc.stat.free
		tpptc140.dfrc = tppdm.yeno.no
		if tpptc140.txta <> 0 then
		   text.keyw1       = form.text$("tpptca0016")
		   |* Element budget
		   text.keyw2       = shiftl$(tpptc140.cprj)
		   text.keyw3       = shiftl$(tpptc140.cequ)
		   text.keyw4(1;11) = form.text$("tpptc11121")
		   |* Equipm. Line :
		   text.keyw4(12;4) = edit$(tpptc140.sern,"9999")
		   text.lines       = TEXT.COPY("tpptc140.txta","tpptc140.txta",
				   text.keyw1, text.keyw2, text.keyw3,
				   text.keyw4, "", "")
		endif
		db.insert(ttpptc140,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc515(ref boolean check)
{
	select	tpptc515.*
	from	tpptc515
	where	tpptc515._index1 = {:cprj}
	selectdo
		check = true
		tpptc515.cprj = cprj.copy
		db.insert(ttpptc515,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc150(ref boolean check)
{
	select	tpptc150.*
	from	tpptc150
	where	tpptc150._index1 = {:cprj}
	selectdo
		check = true
		tpptc150.cprj = cprj.copy
		tpptc150.stat = tpptc.stat.free
		tpptc150.dfpc = tppdm.yeno.no
		if tpptc150.txta <> 0 then
		   text.keyw1       = form.text$("tpptca0016")
		   |* Element budget
		   text.keyw2       = shiftl$(tpptc150.cprj)
		   text.keyw3       = shiftl$(tpptc150.csub)
		   text.keyw4(1;11) = form.text$("tpptc11131")
		   |* Subc. Line:
		   text.keyw4(12;4) = edit$(tpptc150.sern,"9999")
		   text.lines       = TEXT.COPY("tpptc150.txta","tpptc150.txta",
				   text.keyw1, text.keyw2, text.keyw3,
				   text.keyw4, "", "")
		endif
		db.insert(ttpptc150,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc160(ref boolean check)
{
	select	tpptc160.*
	from	tpptc160
	where	tpptc160._index1 = {:cprj}
	selectdo
		check = true
		tpptc160.cprj = cprj.copy
		tpptc160.stat = tpptc.stat.free
		tpptc160.dfpc = tppdm.yeno.no
		if tpptc160.txta <> 0 then
		   text.keyw1       = form.text$("tpptca0016")
		   |* Element budget
		   text.keyw2       = shiftl$(tpptc160.cprj)
		   text.keyw3       = shiftl$(tpptc160.cico)
		   text.keyw4(1;11) = form.text$("tpptc11141")
		   |* Sund.cost.l.
		   text.keyw4(12;4) = edit$(tpptc160.sern,"9999")
		   text.lines       = TEXT.COPY("tpptc160.txta","tpptc160.txta",
				   text.keyw1, text.keyw2, text.keyw3,
				   text.keyw4, "", "")
		endif
		db.insert(ttpptc160,db.retry,db.skip.dupl)
	endselect
}

|function copy.ptc220(ref boolean check)			|#200-102301.o
function boolean copy.ptc220(ref boolean check)	|#200-102301.n
{
	domain	tccprj	project
	domain 	tcitem		base.item

	select	tpptc220.*, tcibd001.kitm, tcibd001.dfit
	from	tpptc220, tcibd001, tppdm005
	where	tpptc220._index1 = {:cprj}
	and	tpptc220.tsrl = tppdm.yeno.no			|#TP/TS.n
	and 	tpptc220.item refers to tppdm005
	and	tppdm005.item refers to tcibd001
	selectdo
		if cprj <> cprj.copy and
		   tppdm.dll0011.read.ref.type.of.item(tpptc220.item) =
							tppdm.reft.pcs then
			if not isspace(tcibd001.dfit) then
				if not item.present.in.tppdm005(tcibd001.dfit)
									then
					continue
				endif
				tpptc220.item = tcibd001.dfit
				tpptc220.cpva = 0
			else
				|* Item not derived from standard or not
				|* configured, budget line will not be copied.
				continue
			endif
		endif
		if tcibd001.kitm = tckitm.generic and
		   tpptc220.cpva <> 0 then
			tpint.dllcaint.get.reference(
					tpptc220.cpva,
					tpptc220.item,
					tmp.ref.generic.item,
					tmp.reference.type,
					tmp.ref.date,
					tmp.ref.order,
					tmp.ref.pono,
					tmp.ref.seqn,
					tmp.ref.desc,
					tmp.ref.business.partner)
			if tmp.reference.type <> tcreft.standard then
				g.dummy.long =
				tpint.dllcatpl.copy.product.variant(
							tpptc220.item,
							cprj.copy,
							tpptc220.cpva)
				|* tpptc220.cpva is an io variable
			endif
		endif
		g.dummy.long = tcibd.dll0010.determine.segment(tpptc220.item,
				tcibd.apco.project,project)
		if project = cprj then
			tpptc220.item(start.position;end.position) = cprj.copy
		endif
			check = true
			tpptc220.cprj = cprj.copy
			tpptc220.stat = tpptc.stat.free
			tpptc220.dfpc = tppdm.yeno.no
			tpptc220.snsb = 0
								|#900-225708.so
								|#200-102301.sn
|			if not assign.dates(tpptc220.rsta, tpptc220.rfin) then
|				check = false
|				return(false)
|			endif					|#200-102301.en
								|#900-225708.eo

								|#900-225708.sn
			find.date.from.plan = false
			if new.stdt <> 0 and tpptc220.rsta <> 0 and
			    prj.stdt = 0 then
				find.date.from.plan = true
			else
				if new.fidt <> 0 and tpptc220.rfin <> 0 and
					prj.dldt = 0 then
					find.date.from.plan = true
				endif
			endif

			if not find.date.from.plan then
				if not assign.dates(tpptc220.rsta,
					            tpptc220.rfin) then
					check = false
					return(false)
				endif
			else
				if not assign.dates.activities(tpptc220.rsta,
					tpptc220.rfin,tppss200.cpla) then
					check = false
					return(false)
				endif
			endif					|#900-225708.en

			if tpptc220.slnk = tppss.slnk.linked then
				tpptc220.slnk = tppss.slnk.create
			endif
			tpptc220.espp = ""
			if tpptc220.txta <> 0 then
			   text.keyw1       = form.text$("tpptca0108")
			   |* Activity budget
			   text.keyw2       = shiftl$(tpptc220.cprj)
			   g.dummy.long = tcibd.dll0010.determine.segment(
				tpptc220.item,
				tcibd.apco.none,base.item)
			   text.keyw3       = shiftl$(base.item)
			   text.keyw4(1;11) = form.text$("tpptc1110b")
			   |* Mat. Line :
			   text.keyw4(12;4) = edit$(tpptc220.sern,"9999")
			   text.lines 	 = TEXT.COPY("tpptc220.txta",
							"tpptc220.txta",
					   text.keyw1, 	text.keyw2, text.keyw3,
					   text.keyw4, "", "")
			endif
			db.insert(ttpptc220,db.retry,db.skip.dupl)
	endselect
	return(true)
}

|function copy.ptc230(ref boolean check)			|#200-102301.o
function boolean copy.ptc230(ref boolean check)	|#200-102301.n
{
	select	tpptc230.*
	from	tpptc230
	where	tpptc230._index1 = {:cprj}
	and 	tpptc230.tsrl = tppdm.yeno.no			|#TP/TS.n
	selectdo
			check = true
			tpptc230.cprj = cprj.copy
			tpptc230.stat = tpptc.stat.free
			tpptc230.dfrc = tppdm.yeno.no
			tpptc230.snsb = 0

			if tpptc230.slnk = tppss.slnk.linked then
				tpptc230.slnk = tppss.slnk.create
			endif
			tpptc230.espp = ""
|			tpptc230.orno = ""	|#BR1-102268	|#800-175298.o
|			tpptc230.acln = 0	|#BR1-102268	|#800-175298.o
								|#900-225708.so
								|#200-102301.sn
|			if not assign.dates(tpptc230.rsta, tpptc230.rfin) then
|				check = false
|				return(false)
|			endif					|#200-102301.en
								|#900-225708.eo
								|#900-225708.sn
			find.date.from.plan = false
			if new.stdt <> 0 and tpptc230.rsta <> 0 and
			    prj.stdt = 0 then
				find.date.from.plan = true
			else
				if new.fidt <> 0 and tpptc230.rfin <> 0 and
					prj.dldt = 0 then
					find.date.from.plan = true
				endif
			endif

			if not find.date.from.plan then
				if not assign.dates(tpptc230.rsta,
					            tpptc230.rfin) then
					check = false
					return(false)
				endif
			else
				if not assign.dates.activities(tpptc230.rsta,
					tpptc230.rfin,tppss200.cpla) then
					check = false
					return(false)
				endif
			endif					|#900-225708.en
			if tpptc230.txta <> 0 then
			   text.keyw1       = form.text$("tpptca0108")
			   |* Activity budget
			   text.keyw2       = shiftl$(tpptc230.cprj)
			   text.keyw3       = shiftl$(tpptc230.task)
			   text.keyw4(1;11) = form.text$("tpptc11111")
			   |* Labor line:
			   text.keyw4(12;4) = edit$(tpptc230.sern,"9999")
			   text.lines 	 = TEXT.COPY("tpptc230.txta",
					   "tpptc230.txta",
					   text.keyw1, 	text.keyw2, text.keyw3,
					   text.keyw4, "", "")
			endif
			db.insert(ttpptc230,db.retry,db.skip.dupl)
	endselect
	return(true)
}

|function copy.ptc240(ref boolean check)			|#200-102301.o
function boolean copy.ptc240(ref boolean check)	|#200-102301.n
{
	select	tpptc240.*
	from	tpptc240
	where	tpptc240._index1 = {:cprj}
	and 	tpptc240.tsrl = tppdm.yeno.no			|#TP/TS.n
	selectdo
			check = true
			tpptc240.cprj = cprj.copy
			tpptc240.stat = tpptc.stat.free
			tpptc240.dfrc = tppdm.yeno.no
			tpptc240.snsb = 0
			if tpptc240.slnk = tppss.slnk.linked then
				tpptc240.slnk = tppss.slnk.create
			endif
			tpptc240.espp = ""
								|#900-225708.so
								|#200-102301.sn
|			if not assign.dates(tpptc240.rsta, tpptc240.rfin) then
|				check = false
|				return(false)
|			endif					|#200-102301.en
								|#900-225708.eo
								|#900-225708.sn
			find.date.from.plan = false
			if new.stdt <> 0 and tpptc240.rsta <> 0 and
			    prj.stdt = 0 then
				find.date.from.plan = true
			else
				if new.fidt <> 0 and tpptc240.rfin <> 0 and
					prj.dldt = 0 then
					find.date.from.plan = true
				endif
			endif

			if not find.date.from.plan then
				if not assign.dates(tpptc240.rsta,
					            tpptc240.rfin) then
					check = false
					return(false)
				endif
			else
				if not assign.dates.activities(tpptc240.rsta,
					tpptc240.rfin,tppss200.cpla) then
					check = false
					return(false)
				endif
			endif					|#900-225708.en

			if tpptc240.txta <> 0 then
			   text.keyw1       = form.text$("tpptca0108")
			   |* Activity budget
			   text.keyw2       = shiftl$(tpptc240.cprj)
			   text.keyw3       = shiftl$(tpptc240.cequ)
			   text.keyw4(1;11) = form.text$("tpptc11121")
			   |* Equipm. Line :
			   text.keyw4(12;4) = edit$(tpptc240.sern,"9999")
			   text.lines 	 = TEXT.COPY("tpptc240.txta",
					   "tpptc240.txta",
					   text.keyw1, 	text.keyw2, text.keyw3,
					   text.keyw4, "", "")
			endif
			db.insert(ttpptc240,db.retry,db.skip.dupl)
	endselect
	return(true)
}

|function copy.ptc250(ref boolean check)			|#200-102301.o
function boolean copy.ptc250(ref boolean check)	|#200-102301.n
{
	select	tpptc250.*
	from	tpptc250
	where	tpptc250._index1 = {:cprj}
	and	tpptc250.tsrl = tppdm.yeno.no			|#TP/TS.n
	selectdo
			check = true
			tpptc250.cprj = cprj.copy
			tpptc250.stat = tpptc.stat.free
			tpptc250.dfpc = tppdm.yeno.no
			tpptc250.snsb = 0
			if tpptc250.slnk = tppss.slnk.linked then
				tpptc250.slnk = tppss.slnk.create
			endif
			tpptc250.espp = ""
								|#900-225708.so
								|#200-102301.sn
|			if not assign.dates(tpptc250.rsta, tpptc250.rfin) then
|				check = false
|				return(false)
|			endif					|#200-102301.en
								|#900-225708.eo

								|#900-225708.sn
			find.date.from.plan = false
			if new.stdt <> 0 and tpptc250.rsta <> 0 and
			    prj.stdt = 0 then
				find.date.from.plan = true
			else
				if new.fidt <> 0 and tpptc250.rfin <> 0 and
					prj.dldt = 0 then
					find.date.from.plan = true
				endif
			endif

			if not find.date.from.plan then
				if not assign.dates(tpptc250.rsta,
					            tpptc250.rfin) then
					check = false
					return(false)
				endif
			else
				if not assign.dates.activities(tpptc250.rsta,
					tpptc250.rfin,tppss200.cpla) then
					check = false
					return(false)
				endif
			endif					|#900-225708.en
			if tpptc250.txta <> 0 then
			   text.keyw1       = form.text$("tpptca0108")
			   |* Activity budget
			   text.keyw2       = shiftl$(tpptc250.cprj)
			   text.keyw3       = shiftl$(tpptc250.csub)
			   text.keyw4(1;11) = form.text$("tpptc11131")
			   |* Subc. Line:
			   text.keyw4(12;4) = edit$(tpptc250.sern,"9999")
			   text.lines 	 = TEXT.COPY("tpptc250.txta",
					   "tpptc250.txta",
					   text.keyw1, 	text.keyw2, text.keyw3,
					   text.keyw4, "", "")
			endif
			db.insert(ttpptc250,db.retry,db.skip.dupl)
	endselect
	return(true)
}

|function copy.ptc260(ref boolean check)			|#200-102301.o
function boolean copy.ptc260(ref boolean check)	|#200-102301.n
{
	select	tpptc260.*
	from	tpptc260
	where	tpptc260._index1 = {:cprj}
	and	tpptc260.tsrl = tppdm.yeno.no			|#TP/TS.n
	selectdo
			check = true
			tpptc260.cprj = cprj.copy
			tpptc260.stat = tpptc.stat.free
			tpptc260.dfpc = tppdm.yeno.no
			tpptc260.snsb = 0
			if tpptc260.slnk = tppss.slnk.linked then
				tpptc260.slnk = tppss.slnk.create
			endif
			tpptc260.espp = ""
								|#900-225708.so
								|#200-102301.sn
|			if not assign.dates(tpptc260.rsta, tpptc260.rfin) then
|				check = false
|				return(false)
|			endif					|#200-102301.en
								|#900-225708.eo
								|#900-225708.sn
			find.date.from.plan = false
			if new.stdt <> 0 and tpptc260.rsta <> 0 and
			    prj.stdt = 0 then
				find.date.from.plan = true
			else
				if new.fidt <> 0 and tpptc260.rfin <> 0 and
					prj.dldt = 0 then
					find.date.from.plan = true
				endif
			endif

			if not find.date.from.plan then
				if not assign.dates(tpptc260.rsta,
					            tpptc260.rfin) then
					check = false
					return(false)
				endif
			else
				if not assign.dates.activities(tpptc260.rsta,
					tpptc260.rfin,tppss200.cpla) then
					check = false
					return(false)
				endif
			endif					|#900-225708.en
			if tpptc260.txta <> 0 then
			   text.keyw1       = form.text$("tpptca0108")
			   |* Activity budget
			   text.keyw2       = shiftl$(tpptc260.cprj)
			   text.keyw3       = shiftl$(tpptc260.cico)
			   text.keyw4(1;11) = form.text$("tpptc11141")
			   |* Sund.cost.l.
			   text.keyw4(12;4) = edit$(tpptc260.sern,"9999")
			   text.lines 	 = TEXT.COPY("tpptc260.txta",
					   "tpptc260.txta",
					   text.keyw1, 	text.keyw2, text.keyw3,
					   text.keyw4, "", "")
			endif
			db.insert(ttpptc260,db.retry,db.skip.dupl)
	endselect
	return(true)
}

function copy.ptc300(ref boolean check)
{
	select	tpptc300.*
	from	tpptc300
	where	tpptc300._index1 = {:cprj}
	selectdo
		check = true
		tpptc300.cprj = cprj.copy
		tpptc300.lclg = ""
		tpptc300.lcdt = 0
		tpptc300.exdt = 0
		db.insert(ttpptc300,db.retry,db.skip.dupl)
	endselect
}

function copy.ptc520(ref boolean check)			|#BRQ000575.sn
{
	select	tpptc520.*
	from	tpptc520
	where	tpptc520._index1 = {:cprj}
	selectdo
		check = true
		tpptc520.cprj = cprj.copy
		tpptc520.lcdt = 0
		tpptc520.andt = 0
		db.insert(ttpptc520,db.retry,db.skip.dupl)
	endselect
}

|function copy.pin020(ref boolean check)			|#200-102746.o
function boolean copy.pin020(ref boolean check)	|#200-102746.n
{
	long retval
	domain	tcmcs.s250m		ref.mess
	domain	tcdate		dummy.date			|#200-102746.n
	select	tppin020.*
	from	tppin020
	where	tppin020._index1 = {:cprj}
	selectdo
		check = true
		tppin020.cprj = cprj.copy
		tppin020.invo = tppdm.yeno.no
		tppin020.inia = 0				|#200-102276.sn
		tppin020.inaa = 0				|#200-102276.en
		tppin020.trsl = tppdm.yeno.no
		tppin020.ityp = " "
		tppin020.idoc = 0
		tppin020.clos = tppdm.yeno.no
								|#200-102746.sn
		dummy.date = 0
		if new.stdt <> 0 then
			if not assign.dates(tppin020.sidt, dummy.date) then
				return(false)
			endif
		else
			tppin020.sidt = tppdm600.stdt
		endif						|#200-102746.en
		dal.new("tppin020", ttppin020, retval, true, db.retry,
			 db.skip.dupl)
		while dal.get.error.message(ref.mess) >= 0
			print.mess = sprintf$(ref.mess)		|#200-102821.n
|								|#200-102821.so
|			print.mess = sprintf$(form.text$("tppin4151.5"),
|			|* Installment payment %1$d for Sold-To Business Partner
|			|* %2$s could not be copied
|						tppin020.nins, tppin020.ofbp)
|								|#200-102821.eo
			print.copy.line()
			check = false
		endwhile
	endselect
	return(true)						|#200-102746.n
}

function copy.pin010(ref boolean check)
{
	long retval
	domain	tcmcs.s250m		ref.mess

	select	tppin010.*
	from	tppin010
	where	tppin010._index1 = {:cprj}
	selectdo
		check = true
		tppin010.cprj = cprj.copy
		tppin010.invo = tppdm.yeno.no

		if advance.yeno = tppdm.yeno.yes and 		|#200-103713.sn
			installment.yeno = tppdm.yeno.no then
			tppin010.nins = 0
		endif						|#200-103713.en


|		tppin010.nins = 0				|#200-102278.o
		tppin010.trsl = tppdm.yeno.no
		tppin010.ityp = " "
		tppin010.idoc = 0
		tppin010.adsu = tppdm.yeno.no
		dal.new("tppin010", ttppin010, retval, true, db.retry,
				db.skip.dupl)
		while dal.get.error.message(ref.mess) >= 0	|#200-102278.sn
			print.mess = sprintf$(ref.mess)		|#200-102821.n
|								|#200-102821.eo
|			print.mess =  sprintf$(form.text$("tppin4151.4"),
|			|* Installment link for Advance payment %1$d for
|			|* Sold-To Business Partner %2$s could not be copied
|						tppin010.sern, tppin010.ofbp)
|								|#200-102821.eo
			tppin010.nins = 0
			print.copy.line()
		endwhile					|#200-102278.en
	endselect
}								|#BRQ000575.en

function copy.pin012(ref boolean check)			|#BRQ000575.sn
{
	long retval
	domain	tcmcs.s250m		ref.mess
	domain	tppdm.nins 		temp.nins

	select	tppin012.*
	from	tppin012
	where	tppin012._index1 = {:cprj}
	selectdo
		check = true
		tppin012.cprj = cprj.copy
		temp.nins = tppin012.nins
		dal.new("tppin012", ttppin012, retval, true, db.retry,
				db.skip.dupl)
		while dal.get.error.message(ref.mess) >= 0	|#BRQ000575.sn
|			print.mess =  sprintf$(form.text$("tppin4151.6"),
|						temp.nins, tppin012.ofbp)
			print.mess = sprintf$(ref.mess)		|#200-102821.n
|								|#200-102821.eo
|			|* Installment payment %1$d for Sold-To Bus Partner%2$s
|			|* not present. Installment-Adv. settlement mapping
|			|* could not be copied.			|#200-102821.eo
			print.copy.line()
		endwhile
	endselect
}								|#BRQ000575.en

function copy.ppc260(ref boolean check)
{
	select	tpppc260.*
	from	tpppc260
	where	tpppc260._index1 = {:cprj}
	selectdo
		check = true
		tpppc260.cprj = cprj.copy
		g.dummy.long = tcibd.dll0010.determine.segment(tpppc260.item,
				tcibd.apco.project,project)
		if project = cprj then
			tpppc260.item(start.position;end.position) = cprj.copy
		endif
		db.insert(ttpppc260,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc261(ref boolean check)
{
	select	tpppc261.*
	from	tpppc261
	where	tpppc261._index1 = {:cprj}
	selectdo
		check = true
		tpppc261.cprj = cprj.copy
		db.insert(ttpppc261,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc262(ref boolean check)
{
	select	tpppc262.*
	from	tpppc262
	where	tpppc262._index1 = {:cprj}
	selectdo
		check = true
		tpppc262.cprj = cprj.copy
		db.insert(ttpppc262,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc263(ref boolean check)
{
	select	tpppc263.*
	from	tpppc263
	where	tpppc263._index1 = {:cprj}
	selectdo
		check = true
		tpppc263.cprj = cprj.copy
		db.insert(ttpppc263,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc264(ref boolean check)
{
	select	tpppc264.*
	from	tpppc264
	where	tpppc264._index1 = {:cprj}
	selectdo
		check = true
		tpppc264.cprj = cprj.copy
		db.insert(ttpppc264,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc265(ref boolean check)
{
	select	tpppc265.*
	from	tpppc265
	where	tpppc265._index1 = {:cprj}
	selectdo
		check = true
		tpppc265.cprj = cprj.copy
		db.insert(ttpppc265,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc280(ref boolean check)
{
	select	tpppc280.*
	from	tpppc280
	where	tpppc280._index1 = {:cprj}
	selectdo
		check = true
		tpppc280.cprj = cprj.copy
		db.insert(ttpppc280,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc281(ref boolean check)
{
	select	tpppc281.*
	from	tpppc281
	where	tpppc281._index1 = {:cprj}
	selectdo
		check = true
		tpppc281.cprj = cprj.copy
		db.insert(ttpppc281,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc282(ref boolean check)
{
	select	tpppc282.*
	from	tpppc282
	where	tpppc282._index1 = {:cprj}
	selectdo
		check = true
		tpppc282.cprj = cprj.copy
		db.insert(ttpppc282,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc285(ref boolean check)
{
	select	tpppc285.*
	from	tpppc285
	where	tpppc285._index1 = {:cprj}
	selectdo
		check = true
		tpppc285.cprj = cprj.copy
		db.insert(ttpppc285,db.retry,db.skip.dupl)
	endselect
}

function copy.ppc286(ref boolean check)
{
	select	tpppc286.*
	from	tpppc286
	where	tpppc286._index1 = {:cprj}
	selectdo
		check = true
		tpppc286.cprj = cprj.copy
		db.insert(ttpppc286,db.retry,db.skip.dupl)
	endselect
}

function check.fields()
{
	if (copy.est.to.prj = tppdm.yeno.no and
	    gen.data.yeno  = tppdm.yeno.no and
	    cost.unit.yeno = tppdm.yeno.no and
|	    plan.yeno      = tppdm.yeno.no and			|#BRQ000575.so
|	    calc.yeno      = tppdm.yeno.no and
|	    charges.yeno   = tppdm.yeno.no and			|#BRQ000575.eo
 	    scope.def.yeno = tppdm.yeno.no and		        |#BRQ000575.sn
|	    extension.yeno = tppdm.yeno.no and			|#200-103018.o
	    baseline.yeno = tppdm.yeno.no  and
	    bottom.up.yeno = tppdm.yeno.no and
	    top.down.yeno = tppdm.yeno.no and
	    bca.code.yeno = tppdm.yeno.no and
	    tpb.code.yeno = tppdm.yeno.no and
	    advance.yeno = tppdm.yeno.no   and
	    installment.yeno = tppdm.yeno.no and
	    budget.surch.yeno = tppdm.yeno.no and
	    cost.surch.yeno = tppdm.yeno.no and
	    rev.surch.yeno = tppdm.yeno.no and			|#BRQ000575.en
	    estimate.yeno   = tppdm.yeno.no) or
	    isspace(cprj.copy) then
		disable.commands(cont.process)
	else
		enable.commands(cont.process)
	endif
}

function boolean check.key.entity()
{
	domain	tcncmp	company

	company = get.compnr()
	select	tcemm110.*
	from	tcemm110
	where	tcemm110.enty = tcemm.enty.project
	and	tcemm110.loco = :company
	and	tcemm110.enid = :cprj
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function boolean source.project.valid()
{
	valid.source = false

|	select	tppdm600.ofes,tppdm600.ripr			|#239087.o
	select	tppdm600.ofes,tppdm600.ripr,tppdm600.tmpl	|#239087.n
	from	tppdm600
	where	tppdm600._index1 = {:cprj}
	as set with 1 rows
	selectdo
		if (not isspace(tppdm600.ripr) or
		    not isspace(tppdm600.ofes)) then
			valid.source = true
			return(true)
		endif
	endselect
	return(false)
}

function domain tppdm.long target.project.valid()
{
	valid.target.project = false
	select	tppdm600.ofes,tppdm600.ripr
	from	tppdm600
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		if not isspace(tppdm600.ripr) then
			return(1)
		else
		   if not isspace(tppdm600.ofes)then
			return(2)
		   endif
		endif
	endselect
	return(0)
}

function boolean estimate.data.exists()
{
	if est100.check.record() then
		return(true)
	endif
return(false)
}

function long est100.check.record()
{
	itppdm0125.record.present(tpest100,
				  tpest100._index1,:cprj.copy)
}

function domain tppdm.long copy.estimate()
{
	 tpestdll1201.estimate.data.can.be.copied(cprj,
						 act.ele.stru.used)
	if cost.unit.exist = tppdm.yeno.no then
	    if cost.unit.yeno = tppdm.yeno.no then
		cost.unit.yeno = tppdm.yeno.yes
		display("cost.unit.yeno")
		if copy.cost.units() then
			abort.transaction()
			return(0)
		endif
	    endif
	endif

	if act.ele.stru.used then
	  |********************************************************************
	  |* tpestdll1201.copy.all.versions() returns False(0) in case of an
	  |* error & a True(1) in case of success. Hence  copy.estimate()
	  |* returns a 1 in case of False & aborts the transaction.
	  |********************************************************************
|		if plan.yeno = tppdm.yeno.yes then		|#BRQ000575.o
|		if scope.def.yeno = tppdm.yeno.yes and		|#200-103018.so
								|#BRQ000575.sn
|			extension.yeno = tppdm.yeno.yes then	|#200-103018.eo
		if scope.def.yeno = tppdm.yeno.yes then		|#200-103018.n
			if not tpestdll1201.copy.all.versions(
					cprj,cprj.copy,
					copy.est.to.prj) then
				return(1)
			endif					|#BRQ000575.en
		else
|			plan.yeno = tppdm.yeno.yes		|#BRQ000575.so
|			if copy.planning() then
|				return(1)
|			endif					|#BRQ000575.eo
								|#200-103018.so
|			extension.yeno = tppdm.yeno.yes		|#BRQ000575.sn
|			if copy.extension() then
|				return(1)
|			endif					|#200-103018.eo
			scope.def.yeno = tppdm.yeno.yes
			if copy.scope() then
				return(1)
			endif
								|#BRQ000575.en

|		 disable.fields("plan.yeno")			|#BRQ000575.so
|		 display("plan.yeno")				|#BRQ000575.eo
		 disable.fields("scope.def.yeno")		|#BRQ000575.sn
|		 disable.fields("extension.yeno")		|#200-103018.o
		 display("scope.def.yeno")
|		 display("extension.yeno")	|#200-103018.o	|#BRQ000575.en
		 if not tpestdll1201.copy.all.versions( cprj,
					cprj.copy,
					copy.est.to.prj) then
			return(1)
		 endif
		endif

	else
		 if not tpestdll1201.copy.all.versions( cprj, cprj.copy,
					copy.est.to.prj) then
			return(1)
		endif
	endif
	if not (db.retry.hit() > 0) then
		UPDATE.PROGRESS.MESSAGE("tppdm9006")
		|* Estimation Data Copied...
		print.copy.estimate.data()
	endif

	return(0)
}

function disable.all.fields()
{
	disable.fields( "gen.data.yeno",
			"cost.unit.yeno",
|			"plan.yeno",				|#BRQ000575.so
|			"calc.yeno",
|			"charges.yeno",				|#BRQ000575.eo
		 	"scope.def.yeno",		        |#BRQ000575.sn
|		        "extension.yeno", 			|#200-103018.o
	                "baseline.yeno",
	   		"bottom.up.yeno",
	   		"top.down.yeno",
	   		"tpb.code.yeno",
	                "advance.yeno",
	                "installment.yeno",
	                "budget.surch.yeno",
	                "cost.surch.yeno",
	                "rev.surch.yeno",			|#BRQ000575.en
			"copy.est.to.prj",
			"estimate.yeno")
}

function update.resulted.in.project()
{
	long	bind.var

	select  tppdm600.*
	from	tppdm600 for update
	where	tppdm600._index1 = {:cprj}
	as set with 1 rows
	selectdo
		tppdm600.ripr = cprj.copy
		bind.var = db.bind("ttppdm600",rcd.ttppdm600)
		db.update(bind.var,db.retry)
		bind.var = db.unbind(bind.var)
	endselect
}

function update.originated.from.estimate()
{
	select  tppdm600.*
	from	tppdm600 for update
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		tppdm600.ofes = cprj
		db.update(ttppdm600,db.retry)
	endselect
}

function update.user()						|#200-162732.sn
{

	select  tppdm600.*
	from	tppdm600 for update
	where	tppdm600._index1 = {:cprj.copy}
	as set with 1 rows
	selectdo
		tppdm600.user = logname$
		if not tt.user(tppdm600.user, user.desc) then
			user.desc = ""
		endif
								|#246976.sn
		g.dummy.long =
		tpint.dllbpmdm.insert.project.approval.authorization(
				tppdm600.cprj,
				tppdm600.user)
								|#246976.en
		db.update(ttppdm600,db.retry)
	endselect
}								|#200-162732.en

function get.number.group.and.default.series()
{
	select 	tppdm001.ngrp:number.group,tppdm001.prsr:cprj.serie,
		tppdm001.ests:est.serie
	from	tppdm001
	where	tppdm001._index1 = {:logname$}
	and	tppdm001.ngrp <> ""
	and 	(tppdm001.prsr <> "" or tppdm001.ests <> "")
	as set with 1 rows
	selectdo
	selectempty
		g.dummy.long = tcmcs.dll0095.read.parm("tppdm000")
		number.group = tppdm000.ngrp
		cprj.serie =   tppdm000.prsr
		est.serie  =   tppdm000.ests
	endselect
}

function handle.project.numbering()
{
	if tppdm.dll0600.project.in.mcs052(cprj.copy) then
		if not tcmcs.dll0050.check.order.series(cprj.copy,
						number.group,
						error.mess) then
			if ask.enum("tppdm6500.cprj",tppdm.yeno.no)  =
			|* Series Exist as General Project Code; Do you wish to
			|* Generate Free Number
			tppdm.yeno.no	then
				return
			endif
		else
			return
		endif
	endif

	if not isspace(hold.cprj) then
		|* After entering/generating a project code, it can be changed
		|* manually, or another serie could be entered.In this case,the
		|* flags must be reset.
		if cprj.copy <> hold.cprj then
			if number.generated and hold.cprj.not.exist() then
			   |* Reset FFN; it is not used.
			   tppdm.dll0600.reset.first.free.number.with.commit(
								hold.cprj,
								number.group)
			endif
			serie.checked = false
			serie.valid = false
			number.generated = false
		endif
	endif

	if not serie.checked then
		|* Check whether the project field is a valid serie.
		if tcmcs.dll0050.check.order.series(	cprj.copy,
							number.group,
							error.mess) then
			|* The value of the project field is no valid Serie.
			serie.valid = false
		else
			serie.valid = true
		endif
		serie.checked = true
	endif

	if not number.generated and serie.valid then
		|* generate first free project number.
		if tppdm.dll0600.check.and.generate.order.number.with.commit(
							2,
							cprj.copy,
							number.group,
							0,
							"tppdm600.cprj") then
			while dal.get.error.message(error.mess) >= 0
				message(error.mess)
			endwhile
			input.again()
		endif
		number.generated = true
	endif
	hold.cprj = cprj.copy
	display("cprj.copy")
}

function boolean hold.cprj.not.exist()
{
	select	tppdm600.cprj
	from	tppdm600
	where	tppdm600._index1 = {:hold.cprj}
	as set with 1 rows
	selectdo
		return(false)
	endselect
	return(true)
}

function print.general.data()
{
	print.mess = sprintf$(form.text$("tppdm9012"))
	|* General Project Data copied.
	print.copy.line()
}

function print.general.data.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9019"))
	|* Error during General data copying. Hence the process is aborted.
	print.copy.line()
}

function print.cost.units.data()
{
	print.mess = sprintf$(form.text$("tppdm9013"))
	|* Project-Related Cost Objects copied.
	print.copy.line()
}

function print.cost.units.data.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9020"))
	|* Error during Project Cost objects  copying. Hence the process is
	|* aborted.
	print.copy.line()
}

|function print.copy.planning()					|#BRQ000575.so
|{
|	print.mess = sprintf$(form.text$("tppdm9014"))
|	|* Planning Data copied.
|	print.copy.line()
|}

|function print.copy.planning.error()
|{
|	print.mess1 = sprintf$(form.text$("tppdm9021"))
|	|* Error during Planning data copying. Hence the process is aborted.
|	print.copy.line()
|}								|#BRQ000575.eo

function print.copy.scope()					|#BRQ000575.sn
{
	print.mess = sprintf$(form.text$("tppdm9007"))
	|* Scope Data copied.
	print.copy.line()
}

function print.copy.scope.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9026"))
	|* Scope data couldn't be copied because of errors. The process is
	|* aborted.
	print.copy.line()
}

|function print.copy.extension()				|#200-103018.so
|{
|	print.mess = sprintf$(form.text$("tppdm9008"))
|	|* Extension Data Copied.
|	print.copy.line()
|}								|#200-103018.eo

|function print.copy.extension.error()				|#200-103018.so
|{
|	print.mess1 = sprintf$(form.text$("tppdm9027"))
|	|* Extension data couldn't be copied because of errors. The process is
|	|* aborted.
|	print.copy.line()
|}								|#200-103018.eo

function print.copy.baseline()
{
	print.mess = sprintf$(form.text$("tppdm9009"))
	|* Baseline Data copied.
	print.copy.line()
}

function print.copy.baseline.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9028"))
	|* Baseline data couldn't be copied because of errors. The process is
	|* aborted.
	print.copy.line()
}

|function print.calculation.data()				|#BRQ000575.eo
|{
|	print.mess = sprintf$(form.text$("tppdm9015"))
|	|*  Actual Budget Data copied.
|	print.copy.line()
|}

|function print.calculation.data.error()
|{
|	print.mess1 = sprintf$(form.text$("tppdm9022"))
|	|* Error during Budget data copying. Hence the process is aborted.
|	print.copy.line()
|}								|#BRQ000575.eo

function print.copy.bottom.up()					|#BRQ000575.sn
{
	print.mess = sprintf$(form.text$("tppdm9015"))
	|* Actual Budget Data copied.
	print.copy.line()
}

function print.copy.bottom.up.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9022"))
	|* Error during Budget data copying. Hence the process is aborted.
	print.copy.line()
}

function print.copy.top.down()
{
	print.mess = sprintf$(form.text$("tppdm9031"))
	|* Top Down Budget Data copied.
	print.copy.line()
}

function print.copy.top.down.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9032"))
	|* Top Down Budget data couldn't be copied because of errors. The
	|* process is aborted.
	print.copy.line()
}

function print.copy.bca.code()
{
	print.mess = sprintf$(form.text$("tppdm9029"))
	|* Budget Cost Analysis code copied.
	print.copy.line()
}

function print.copy.bca.code.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9030"))
	|* Budget Cost Analysis data couldn't be copied because of errors. The
	|* process is aborted.
	print.copy.line()
}

function print.copy.tpb.code()
{
	print.mess = sprintf$(form.text$("tppdm9033"))
	|* Time Phased Budget Analysis Code copied.
	print.copy.line()
}

function print.copy.tpb.code.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9034"))
	|* Time Phased Analysis Code couldn't be copied because of errors. The
	|* process is aborted.
	print.copy.line()
}

function print.copy.advance()
{
	print.mess = sprintf$(form.text$("tppdm9035"))
	|* Advance Payment Request copied.
	print.copy.line()
}

function print.copy.advance.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9036"))
	|* Advance Payment Request couldn't be copied because of errors. The
	|* process is aborted.
	print.copy.line()
}

function print.copy.installment()
{
	print.mess = sprintf$(form.text$("tppdm9037"))
	|* Installments copied.
	print.copy.line()
}

function print.copy.installment.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9038"))
	|* Installment data could not be copied because of errors. The process
	|* is aborted.
	print.copy.line()
}

function print.copy.budget.surcharges.data()
{
	print.mess = sprintf$(form.text$("tppdm9039"))
	|* Budget Cost Surcharges copied.
	print.copy.line()
}

function print.copy.budget.surcharges.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9040"))
	|* Budget Cost Surcharges could not be copied because of errors. The
	|* process is aborted.
	print.copy.line()
}

function print.copy.charges.data()
{
	print.mess = sprintf$(form.text$("tppdm9016"))
	|* Cost Registration Master Data copied.
	print.copy.line()
}

function print.copy.charges.data.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9023"))
	|* Error during Cost registration master data  copying. Hence the
	|* process is aborted.
	print.copy.line()
}

function print.copy.revenue.surcharges.data()
{
	print.mess = sprintf$(form.text$("tppdm9041"))
	|* Revenue Surcharges copied.
	print.copy.line()
}

function print.copy.revenue.surcharges.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9042"))
	|* Revenue Surcharges could not be copied because of errors. The process
	|* is aborted.
	print.copy.line()
}								|#BRQ000575.en

function print.copy.estimate.data()
{
	print.mess = sprintf$(form.text$("tppdm9018"))
	|* Estimation Data Copied.
	print.copy.line()
}

function print.copy.estimate.data.error()
{
	print.mess1 = sprintf$(form.text$("tppdm9025"))
	|* Error during Estimation data  copying. Hence the process is aborted.
	print.copy.line()
}

function print.item.copy.process()
{
	print.mess = sprintf$(error.mess)
	print.copy.line()
}

function print.archive.message()
{
	print.mess = sprintf$(form.text$("tppdma0193a"), tppdm600.cprj)
	|* Project '%1$s' cannot be updated in project archive
	print.copy.line()
}

function print.copy.line()
{
	if not (db.retry.hit() > 0) then
		rprt_send()
	endif
}

function boolean item.present.in.tppdm005(domain tcitem i.item)
{
	domain	tcitem	dummy.item

	select	tppdm005.item:dummy.item
	from	tppdm005
	where 	tppdm005._index1 = {:i.item}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
}

function set.default.target.eu()
{
	static domain tccprj		save.project
	static domain tcemm.grid 	save.eu
	static domain tcdsca		save.desc

	if save.project <> cprj.copy then
		|* The EU and the EU Description of the target project is
		|* determined
		g.dummy.bool = tpint.dlltcemm.what.enterprise.unit.is.entity.of(
				loco,
				tcemm.enty.project,cprj.copy,target.eu)
		g.dummy.bool = tpint.dlltcemm.get.enterprise.unit.details(
				target.eu,
				target.eu.desc,	dummy.loco,dummy.loco,
				dummy.bpid,dummy.timz)
		save.eu = target.eu
		save.desc = target.eu.desc
		save.project = cprj.copy
	else
		target.eu = save.eu
		target.eu.desc = save.desc
	endif
	display("target.eu")
	display("target.eu.desc")
}

function boolean target.project.exists()
{
	|* Do not use static save variable!!! After the project is copied, it
	|* exists in pdm600 and the target EU must be disabled.
	if not isspace(cprj.copy) then
		select	tppdm600.cprj
		from	tppdm600
		where	tppdm600._index1 = {:cprj.copy}
		as set with 1 rows
		selectdo
			return(true)
		endselect
	endif
	return(false)
}

function get.template.number.group.and.default.series()		|#BRQ000575.sn
{
	select 	tppdm001.tgrp:number.group,tppdm001.prsr:cprj.serie,
		tppdm001.ests:est.serie,tppdm001.tpsr:tmpl.serie
	from	tppdm001
	where	tppdm001._index1 = {:logname$}
	and	tppdm001.ngrp <> ""
	and	(tppdm001.prsr <> "" or tppdm001.ests <> ""
	and	 tppdm001.tpsr <> "")
	as set with 1 rows
	selectdo
	selectempty
		g.dummy.long = tcmcs.dll0095.read.parm("tppdm000")
		number.group = tppdm000.tgrp
		cprj.serie =   tppdm000.prsr
		est.serie  =   tppdm000.ests
		tmpl.serie =   tppdm000.tpsr			|
	endselect
}								|#BRQ000575.en

function enable.disable.relationship()				|#200-103016.sn
{

|	if installment.exist = tppdm.yeno.yes or		|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then		|#200-104678.eo
	if 	scope.def.yeno = tppdm.yeno.no then		|#200-104678.n
		installment.yeno = tppdm.yeno.no
		display("installment.yeno")
		disable.fields("installment.yeno")
|	else							|#200-104678.o
	else if installment.exist = tppdm.yeno.no then		|#200-104678.n
	        enable.fields("installment.yeno")
	     endif        					|#200-104678.n
	endif

|	if advance.exist = tppdm.yeno.yes or			|#200-104678.so
|			scope.def.yeno = tppdm.yeno.no then	|#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		advance.yeno = tppdm.yeno.no
		display("advance.yeno")
		disable.fields("advance.yeno")
|	else							|#200-104678.o
	else if advance.exist = tppdm.yeno.no then
	        enable.fields("advance.yeno")
	     endif						|#200-104678.n
	endif

|	if top.down.exist = tppdm.yeno.yes or			|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then		|#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		top.down.yeno = tppdm.yeno.no
		display("top.down.yeno")
		disable.fields("top.down.yeno")
|	else							|#200-104678.o
	else if top.down.exist = tppdm.yeno.no then		|#200-104678.n
		enable.fields("top.down.yeno")
	     endif						|#200-104678.n
	endif

|	if budget.surcharges.exist = tppdm.yeno.yes or		|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then		|#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		budget.surch.yeno = tppdm.yeno.no
		display("budget.surch.yeno")
		disable.fields("budget.surch.yeno")
|	else							|#200-104678.o
	else if budget.surcharges.exist = tppdm.yeno.no then	|#200-104678.n
		enable.fields("budget.surch.yeno")
	     endif						|#200-104678.n
	endif

|	if cost.surcharges.exist = tppdm.yeno.yes or		|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then		|#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		cost.surch.yeno = tppdm.yeno.no
		display("cost.surch.yeno")
		disable.fields("cost.surch.yeno")
|	else							|#200-104678.o
	else if cost.surcharges.exist = tppdm.yeno.no then	|#200-104678.n
		enable.fields("cost.surch.yeno")
	     endif						|#200-104678.n
	endif

|	if revenue.surcharges.exist = tppdm.yeno.yes or		|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then             |#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		rev.surch.yeno = tppdm.yeno.no
		display("rev.surch.yeno")
		disable.fields("rev.surch.yeno")
|	else							|#200-104678.o
	else if revenue.surcharges.exist = tppdm.yeno.no then	|#200-104678.n
		enable.fields("rev.surch.yeno")
	     endif						|#200-104678.n
	endif


|	if bottom.up.exist = tppdm.yeno.yes or			|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then             |#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		bottom.up.yeno = tppdm.yeno.no
		display("bottom.up.yeno")
		disable.fields("bottom.up.yeno")
|	else							|#200-104678.o
	else if bottom.up.exist = tppdm.yeno.no then		|#200-104678.n
		enable.fields("bottom.up.yeno")
	     endif						|#200-104678.n
	endif

|	if estimates.exist = true or                            |#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then             |#200-104678.eo
	if scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		estimate.yeno = tppdm.yeno.no
		display("estimate.yeno")
		disable.fields("estimate.yeno")
|	else							|#200-104678.o
	else if estimates.exist = false then			|#200-104678.n
		enable.fields("estimate.yeno")
	     endif						|#200-104678.n
	endif

|	if baseline.exist = tppdm.yeno.yes or			|#200-104678.so
|		scope.def.yeno = tppdm.yeno.no then		|#200-104678.eo
	if  scope.def.yeno = tppdm.yeno.no then			|#200-104678.n
		baseline.yeno = tppdm.yeno.no
		display("baseline.yeno")
		disable.fields("baseline.yeno")
|	else							|#200-104678.o
	else if baseline.exist = tppdm.yeno.no then		|#200-104678.n
		enable.fields("baseline.yeno")
	     endif						|#200-104678.n
	endif
}								|#200-103016.en

function determine.project.coding.values()			|#200-104557.sn
{
	if copy.template = tppdm.yeno.yes then
		set.ask.enum.values(tppdm.prse.est.series,
				    tppdm.prse.first.freeno,
				    tppdm.prse.temp.series,
				    tppdm.prse.close)
	endif


	if calling.program(1;9) = "tppdm6500" and
	    (copy.project = tppdm.yeno.no and
	       copy.template = tppdm.yeno.no) then
		set.ask.enum.values(tppdm.prse.proj.series,
				    tppdm.prse.est.series,
				    tppdm.prse.first.freeno,
				    tppdm.prse.close)
	endif

}								|#200-104557.en

								|#200-106252.so
|function copy.pss210(ref boolean check)			|#201772.sn
|{
|	select	tppss210.*
|	from	tppss210
|	where	tppss210._index1 = {:cprj}
|	and	tppss210.pcot = tppdm.cote.empty
|	and	tppss210.scot = tppdm.cote.empty
|	selectdo
|		check = true
|		tppss210.cprj = cprj.copy
|		db.insert(ttppss210,db.retry,db.skip.dupl)
|	endselect
|}
|

|function copy.pss210.calculation(ref boolean check)
|{
|	select	tppss210.*
|	from	tppss210
|	where	tppss210._index1 = {:cprj}
|	selectdo
|		check = true
|		tppss210.cprj = cprj.copy
|		db.insert(ttppss210,db.retry,db.skip.dupl)
|	endselect
|}								|#201772.en
								|#200-106252.eo

function long copy.pss210(ref boolean check)	|#200-106252.sn
{
	select	tppss210_1.cpla:copy.cpla,
                tppss210_1.pact:copy.pact,
                tppss210_1.pcot:copy.pcot,
                tppss210_1.psen:copy.psen,
                tppss210_1.sact:copy.sact,
                tppss210_1.scot:copy.scot,
                tppss210_1.ssen:copy.ssen,
                tppss210_1.rltp:copy.rltp,
                tppss210_1.lead:copy.lead,
                tppss210_1.cuni:copy.cuni
	from	tppss210 tppss210_1
	where	tppss210_1._index1 = {:cprj}
	and	tppss210_1.pcot = tppdm.cote.empty
	and	tppss210_1.scot = tppdm.cote.empty
	selectdo
		check = true
		ret = dal.new.object("tppss210")
		if ret <> 0 then
			continue
		endif
		dal.set.field("tppss210.cprj", cprj.copy)
		dal.set.field("tppss210.cpla", copy.cpla)
		dal.set.field("tppss210.pact", copy.pact)
		dal.set.field("tppss210.pcot", copy.pcot)
		dal.set.field("tppss210.psen", copy.psen)
		dal.set.field("tppss210.sact", copy.sact)
		dal.set.field("tppss210.scot", copy.scot)
		dal.set.field("tppss210.ssen", copy.ssen)
		dal.set.field("tppss210.rltp", copy.rltp)
		dal.set.field("tppss210.lead", copy.lead)
		dal.set.field("tppss210.cuni", copy.cuni)
		ret = dal.save.object("tppss210")
		if (ret <> 0) then
			continue
		endif
	endselect
	return(0)
}

function long copy.pss210.calculation(ref boolean check)
{
	select	tppss210_1.cpla:copy.cpla,
                tppss210_1.pact:copy.pact,
                tppss210_1.pcot:copy.pcot,
                tppss210_1.psen:copy.psen,
                tppss210_1.sact:copy.sact,
                tppss210_1.scot:copy.scot,
                tppss210_1.ssen:copy.ssen,
                tppss210_1.rltp:copy.rltp,
                tppss210_1.lead:copy.lead,
                tppss210_1.cuni:copy.cuni
	from	tppss210 tppss210_1
	where	tppss210_1._index1 = {:cprj}
	selectdo
		select 	tppss210.*
		from	tppss210
		where	tppss210._index1 = {:cprj.copy,
					      :copy.cpla}
		and 	tppss210.pact = :copy.pact
		and	tppss210.pcot = :copy.pcot
		and	tppss210.sact = :copy.sact
		and	tppss210.scot = :copy.scot
		as set with 1 rows
		selectdo
		selectempty
			check = true
			ret = dal.new.object("tppss210")
			dal.set.field("tppss210.cprj", cprj.copy)
			dal.set.field("tppss210.cpla", copy.cpla)
			dal.set.field("tppss210.pact", copy.pact)
			dal.set.field("tppss210.pcot", copy.pcot)
			dal.set.field("tppss210.psen", copy.psen)
			dal.set.field("tppss210.sact", copy.sact)
			dal.set.field("tppss210.scot", copy.scot)
			dal.set.field("tppss210.ssen", copy.ssen)
			dal.set.field("tppss210.rltp", copy.rltp)
			dal.set.field("tppss210.lead", copy.lead)
			dal.set.field("tppss210.cuni", copy.cuni)
			ret = dal.save.object("tppss210")
		endselect
	endselect
	return(0)
}								|#200-106252.en

function boolean read.ccal()					|# 246924.sn
|* read the calculation codes of the target project. If the target project
|* has the same calculation code the default calculation code can be filled,
|* otherwise no action
{
	select	tpptc300.ccal
	from	tpptc300
	where tpptc300._index1= {:cprj.copy, :prj.ccal}
	as set with 1 rows
	selectdo
		return(true)
	endselect

	return(false)
}								|#246924.en
|******************************************************************************
|************* *************Manish Kumar **************************************
|******** Removing Elements Not Belong To Maintained Project in Customize Table
|** tpms001
function boolean RemoveInvalidElementsFrom.tpptc100()			|ISG001007.sn
{	
|********** Updating tpptc100***********
	domain	tccprj		i.cprj
	domain	tppdm.cspa	i.cspa
	i.cprj = ""
	i.cspa = ""
	i.cprj = Get.Customize.Project()
	
	if not isspace(i.cprj) then
		select	tpptc100.*
		from	tpptc100 for update
		where	tpptc100._index1 = {:cprj.copy}
		selectdo
			i.cspa = tpptc100.cspa
			select	tpptc100.cspa
			from	tpptc100
			where	tpptc100._index1 = {:i.cprj,:i.cspa}
			selectdo
			selectempty
				db.delete(ttpptc100,db.retry,e)
				if not e then
					commit.transaction()
				else
					abort.transaction()
					return(false)
				endif
			endselect
		endselect

	endif
	return(true)
	
}		
function boolean RemoveElementsFrom.tpptc101()
{
|******* Updating tpptc101 Elements Relationship********
	domain	tppdm.cspa i.cspp
	domain	tccprj i.cprj
	i.cprj = ""
	i.cspp = ""
	
	i.cprj = Get.Customize.Project()
	
	select	tpptc101.*
	from	tpptc101 for update
	where	tpptc101._index1 = {:cprj.copy}
	selectdo
		i.cspp = tpptc101.cspp
		select	tpptc100.cspa
		from	tpptc100
		where	tpptc100._index1 = {:i.cprj,:i.cspp}
		selectdo
		selectempty
			db.delete(ttpptc101,db.retry,e)
			if not e then
				commit.transaction()
			else
				abort.transaction()
				return(false)
			endif
		endselect
	endselect
	return(true)
}

function boolean RemoveElementsFrom.tpest120()
{
|***************** Updating tpest120********
	domain	tppdm.cspa i.sele
	domain	tccprj i.cprj
	i.cprj = ""
	i.sele = ""
	
	i.cprj = Get.Customize.Project()
	
	select	tpest120.*
	from	tpest120 for update
	where	tpest120._index1 = {:cprj.copy}
	selectdo
		i.sele = tpest120.sele
		select	tpptc100.cspa
		from	tpptc100
		where	tpptc100._index1 = {:i.cprj,:i.sele}
		selectdo
		selectempty
			db.delete(ttpest120,db.retry,e)
			if not e then
				commit.transaction()
			else
				abort.transaction()
				return(false)
			endif
		endselect
	endselect
	return(true)
}


function boolean RemoveElementsFrom.tpest200()
{
|******* Updating tpest200************

	domain	tppdm.cspa i.psel
	domain	tccprj i.cprj
	i.cprj = ""
	i.psel = ""
	
	i.cprj = Get.Customize.Project()
	
	select	tpest200.*
	from	tpest200 for update
	where	tpest200._index1 = {:cprj.copy}
	selectdo
		i.psel = tpest200.psel
		select	tpptc100.cspa
		from	tpptc100
		where	tpptc100._index1 = {:i.cprj,:i.psel}
		selectdo
		selectempty
			db.delete(ttpest200,db.retry,e)
			if not e then
				commit.transaction()
			else
				abort.transaction()
				return(false)
			endif
		endselect
	endselect
	return(true)

}


function domain tccprj Get.Customize.Project()
{
	domain	tcseri		i.seri
	i.seri = ""
	i.seri = cprj.copy(1;3)
	
	select	tpmsl001.proj,tpmsl001.seri
	from	tpmsl001
	where	tpmsl001._index1 = {:i.seri}
	as set with 1 rows
	selectdo
	selectempty
		tpmsl001.proj = ""
	endselect
	return(tpmsl001.proj)
}							|ISG001007.en
|***************************** end of source **********************************
