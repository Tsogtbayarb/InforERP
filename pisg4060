|******************************************************************************
|* tdisg406  0  VRC B61U a7 live
|* DAL 2 for tdisg406
|* baan
|* 14-11-13 [17:30]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************|******************** Includes
	|*************** Includes ****************
	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

	|*************** Table declaration ******************
		table	ttdisg406
		
	|*************** Global Variables *******************	
		extern	domain	tcbool		gbl.rcpt.conf

|****************************** object hooks **********************************

function extern boolean method.is.allowed(
			long		i.method)
{
	on case i.method
		case DAL_NEW:
		if not new.method.is.allowed() then
			dal.set.error.message("@Cannot insert a record.")	
			return(false)
		endif
		break
	case DAL_UPDATE:
		if not update.method.is.allowed() then
			dal.set.error.message("@Cannot modify this record.")
			return(false)
		endif
		break
	case DAL_DESTROY:
		if not destroy.method.is.allowed() then
			dal.set.error.message("@Cannot delete this record.")
			return(false)
		endif
		break
	endcase

	return(true)
}

function extern long before.open.object.set()
{
	read.parameters()
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	on case type
		case DAL_NEW :
			break
		case DAL_UPDATE:
			break
	ENDCASE
	return(0)
}

function extern long set.object.defaults()
{
	return(0)
}

function extern long before.new.object()
{		
	return(0)
}

function extern long before.get.object()
{
	return(0)
}

function extern long after.get.object()
{
	
	return(0)
}

function long read.parameters()
{
	return(0)
}

|**** Dependencies Section ****************************************************

function void define.field.dependencies()
{
	|* Initialize field relations.
	dal.init.field.dependencies()
	
	
	|* Add direct dependent fields.
	|* Please keep the fields in alphabetical order.

	dal.finalize.field.dependencies()
}

function boolean new.method.is.allowed()
{
	if	gbl.rcpt.conf	then
		return(false)
	endif
	return(true)
}

function boolean update.method.is.allowed()
{
	if	gbl.rcpt.conf	then
		return(false)
	endif
	return(true)
}
function boolean destroy.method.is.allowed()
{
			long		delete.allowed

	with.old.object.values.do(	deleting_allowed,
					delete.allowed)	|* ref
	if not delete.allowed then
		return(false)
	endif

	return(true)
}

function void deleting_allowed(
	ref		long		o.delete.allowed)
{
	if	gbl.rcpt.conf	then
		o.delete.allowed = false
	endif
	o.delete.allowed = true
}


