|******************************************************************************
|* tdisg4400m000  0  VRC B61U a7 live
|* Print Purchase Order Revision Wise
|* Tools                         
|* 2014-03-20
|******************************************************************************
|* Form Type 4
|******************************************************************************
|* IDENT ISG001030   Somak Mondal	18-060-2014	     VRC B61U a7 live
|*
|* IDENT ISGEC0104 Arjit Kr. Gupta	02-09-2014	VRC B61U a7 isg
|* Landed cost to be calculated for tdpur401.oltp(2,3,4) and project description
|* for first po line. Tax Code logic added/modified.
|*
|* ISGECDV001067, IT0205, Arjit Gupta, VRC B61U a7 live,  Dt. 30-09-2014
|* Child Item purchase text to be printed
|*
|* IDENT ISGEC001071, Kuldeep Sharma, 2014-10-06
|* calculate tax on other charges line
|*
|* ID: ISGEC001106, IT0327, Ritu Shrivastava, VRC B61U a7 isg Dt. 16-10-2014
|* Print value of Child item for lowest version
|*
|* ISGEC001107, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 16-10-2014
|* Get LD date of PO Line of last seqn
|*
|* ID: ISGEC001120, IT0327, Ritu Shrivastava, VRC B61U a7 isg Dt. 20-10-2014
|* Print Revision value
|
|* ID: ISGEC001139, IT0327, Ritu Shrivastava, VRC B61U a7 isg Dt. 31-10-2014
|* To print proper amount value for child item
|*
|* ISGECDV001165, IT0205, Arjit Gupta, VRC B61U a7 live, Dt. 18-11-2014
|* If Child Item is Standard then Text will be printed from Item General.
|*
|* ISGECDV001168, IT0205, Arjit Gupta, VRC B61U a7 live, Dt. 20-11-2014
|* Print Reason for Modification of Current Revision.
|*
|* ISGECDV001198, IT0205, Arjit Gupta, VRC B61U a7 live, Dt. 11-12-2014
|* Import order and Revision when called from tdisg0189m000, tdisg0186m000.

|* ISG10102, IT0289, Shilpa Janardanan, VRC B61U a7 live, Dt. 19-12-2014
|* ST Rate calculation 

|* ID ISGEC0134
|* Manish Kumar
|* 30-01-2015
|* Changes for Document and referenc Number Printing on report.
|*
|* ISGEC01057, IT0289, Shilpa Janardanan, VRC B61U a7 live, Dt. 19-02-2015
|* ST Rate calculation 
|*
|* IDENT ISGEC001164, IT0301, Ritu Sharma, VRC B61U a7 isg Dt. 24-02-2015 
|* Modifications to calculate LST tax
|* IDENT ,IT0387 ,Radheshyam VRC B61U a7 isg,25-02-2015  add cost component field in report 
|
|* IDENT ISGEC01075, IT0289, Shilpa Janardanan, VRC B61U a7 isg Dt. 05-03-2015 
|* Initialising LD Date  
|******************************************************************************
|* IDENT PATCH002026, IT0376, Mani sharma, VRC B61U a7 isg Dt. 03.04.2015
|* Add user and  name on report


|* IDENT ISGEC015006, Shilpa Janardanan, VRC B61U a7 isg Dt. 16.05.2015
|* LD date not getting printed properly
|* Functional - Mamta

|* ISGEC015019,Radheshyam, 23-06-2015, VRC B61U a7 isg
|* Modification in report layout
|* Size of PO quantity increased, Sample Packing list removed, changes in header
|*
|* IDENT ISGEC015035, Ankit Sharma, VRC B61U a7 isg Dt. 31.07.2015
|* Change filter logic on version
|*
|* IDENT ISGEC015039, Shilpa Janardanan, VRC B61U a7 isg Dt.17-08-2015
|* Amount printing as zero for lower version
|****************************** declaration section ***************************
declaration:
	table	ttdpur400
	table	ttdpur401
	table	ttdmsl400
	table	ttcibd001
	table	ttcmcs036
	table	ttcmcs041
	table	ttctax941
	table	ttccom000
	table	ttccom001
	table	tbpmdm001
	table	ttccom130
	table	ttcmcs065
	table	ttctax940
	table	ttcmcs052
	table	ttdmsl500
	table	ttdmsl501
	table	ttcmsl200
	table	ttdisg502
	table	ttclct200
	table	ttcmsl200
	table	ttccom139
	table	ttcmcs143
	table	ttcemm170
	table	ttppdm740
	table	ttdisg002
	table	ttdisg502
	table	tdmisg001
	table	tdmisg003
	table	ttdpur012
	table	ttdpur402
	table	ttdpur201
	table	tdmisg002			|#ISGECDV001067.n
	table	ttdisg400			|#ISGECDV001168.n
	
	table	ttdisg869			|#ISGEC01034.n

	extern	domain	tcorno	i.orno
	extern	domain	tcsern	i.vrsn,last.vrsn
	extern	domain	tcamnt	iamt.m,exc.amnt,exc.rate,stx.rate,
				stx.amnt,tot.amnt,oth.chg1,oth.chg2
	extern	domain	tcamnt	tot.exc,tot.stx,tot.oth1,tot.oth2,tot.bas
	extern	domain	tcamnt	ind.exc,ind.stx,ind.oth1,ind.oth2,ind.bas
	extern	domain	tcamnt	tot.oth.stx,oth.stx,oth.exc			|#ISGEC001071.n
	extern	domain	tcwght	iwgt.m
	extern	domain	tcaitm	ialt.m
	extern	domain	tcdsca	oDs1.m,oDs2.m
	extern  domain  tppdm.dscl      aX1a.m 
	extern	domain	tcnama	comp.nama,comp.namb,
				brnc.nama,brnc.namb,brnc.namc,
				vend.nama,vend.namb,vend.namc,
				vend.namd,vend.namf,vend.pstc,
				brnc.namd,sign.nama,sign.desg,
				brnc.city,brnc.state,vend.dsca
	extern	domain 	tccity		brnc.ccit,vend.ccit
	extern	domain	tcmcs.cste	brnc.cste,vend.cste
	extern	domain	tcpstc		brnc.pstc
	extern	domain	tcccty		brnc.ccty,vend.ccty			
	extern  domain  tppdm.s100      pHed.m    | PO Header
	extern  domain  tppdm.s100      pFot.m
	extern  domain  tppdm.s100      aHed.m    | Acknowledgement Header
	extern  domain  tppdm.s100      aBd1.m    | Acknowledgement Body Text Line 1
	extern  domain  tppdm.s100      aBd2.m    | Acknowledgement Body Text Line 2
	extern  domain  tppdm.s100      de1f.m    | PO Header E1 form Text
	extern  domain  tppdm.s100      dcfr.m    | PO Header C form text
	extern	domain	tcncmp	curr.comp
	extern	domain	tctax.txnb.l	brnc.lst,brnc.cst
	extern	domain	tctelp	brnc.telp,vend.telp
	extern	domain	tctefx	brnc.tefx,vend.tefx
	extern	domain	tcpono		line.indc	
	extern boolean highest.vrsn
	string 	borf(5)
	extern domain tcdate	adat.c
	extern	domain	tcsern	alvl.c
	extern	domain	tcsern	prty.c
	extern	domain	tcdsca	qap.c
	extern domain tcdate	qdat.c,ldat.c
	extern	domain	tcqsl1		add.qty
	extern	domain	tcyesno	order.accp.print
	extern domain	tcmcs.str16	prog.name				|ISG001030.n
	extern	domain	tcdsca		rep.refb
	extern	domain	tcccty		var.reas			|#ISGECDV001168.n
	domain	tcpvat		rate	|ISG10102.n
	extern domain   tcnama   name.emp				|PATCH002026.n
	extern domain   tcemno 	log.name
	extern	domain	tcbool	printed					|#ISGEC01034.n
	extern domain tctax.layr.l	layer.temp1,layer.temp2			|#ISGEC001164.n
	extern domain  tcsern  i.version
	
|****************************** program section ********************************
before.program:								|ISG001030.sn
	import("prog.name$",prog.name)
| 	if strip$(prog.name) = "tdpur4100m900" then			|#ISGECDV001198.o
								|#ISGECDV001198.sn
	on case trim$(prog.name)
		case "tdpur4100m900":	
								|#ISGECDV001198.en
			import("tdpur400.orno",i.orno)
								|#ISGECDV001198.sn
								
								|#ISGEC015035.sn
			select tdmsl400.vrsn from tdmsl400
			where tdmsl400._index1 = {:i.orno}
			order by tdmsl400.vrsn desc
			as set with 1 rows
			selectdo
				i.vrsn = tdmsl400.vrsn	
			endselect				|#ISGEC015035.en				
			break
		case "tdisg0186m000":
			import("tdisg086.orno", i.orno)
			import("tdisg086.revi", i.vrsn)
			break	
		case "tdisg0189m000":
			import("tdisg089.orno", i.orno)
			import("tdisg089.revi", i.vrsn)
			break
	ENDCASE		
								|#ISGECDV001198.en
| 	endif					|#ISGECDV001198.o
										|ISG001030.en	
|****************************** group section **********************************

group.1:
init.group:
   get.screen.defaults()

|****************************** choice section ********************************

choice.cont.process:
on.choice:
   execute(print.data)

choice.print.data:
on.choice:
   if rprt_open() then
       read.main.table()
       rprt_close()
   else
       choice.again()
   endif


|****************************** field section *********************************
field.i.orno:
check.input:
	select tdpur400.orno from tdpur400
	where tdpur400._index1 = {:i.orno}
	as set with 1 rows
	selectdo
	selectempty
		message("Purchase Order not allowed")
		set.input.error("",e)
	endselect
after.input:
										|#ISGEC015035.sn
	select tdmsl400.vrsn from tdmsl400
	where tdmsl400._index1 = {:i.orno}
	order by tdmsl400.vrsn desc
	as set with 1 rows
	selectdo
		i.vrsn = tdmsl400.vrsn	
	endselect								|#ISGEC015035.en
| 	query.extend.where.in.zoom("tdmsl400.orno = "&quoted.string(i.orno))	|#ISGEC015035.n	
	
field.i.vrsn:

check.input:
	select tdmsl400.vrsn from tdmsl400
	where tdmsl400._index1 = {:i.orno,:i.vrsn}
	as set with 1 rows
	selectdo
	selectempty
		message("Version not allowed")
		set.input.error("",e)
	endselect
	
selection.filter:								|#ISGEC015035.sn	
	tdmsl400.orno	=	i.orno						|#ISGEC015035.en
	


	
|****************************** function section ******************************

functions:

function read.main.table()
{
					|#ISGEC01034.sn
	printed = false
	select	tdisg869.*
	from	tdisg869
	where	tdisg869._index1 = {:i.orno}
	and	tdisg869.sele = tcyesno.yes
	selectdo
		if not isspace(tdisg869.refe) then
			printed = true
		endif
	endselect
					|#ISGEC01034.en
	
	curr.comp = get.compnr()
	select tccom000.cadr,tccom130.* from tccom130,tccom000
	where tccom000._index1 = {0,:curr.comp}
	and tccom000.cadr refers to tccom130
	as set with 1 rows
	selectdo
		comp.nama = tccom130.nama
		comp.namb = tccom130.namb
	endselect
	brnc.nama = ""
	brnc.namb = "" 
	brnc.namc = ""
	brnc.telp = ""
	brnc.tefx = ""
	brnc.ccit = ""
	brnc.cste = ""
	brnc.pstc = ""
	brnc.ccty = ""
	brnc.city = ""
	brnc.state = ""
	vend.nama = ""
	vend.namb = "" 
	vend.namc = ""
	vend.telp = ""
	vend.tefx = ""
	vend.namd = ""
	vend.namf = "" 
	vend.pstc = ""
	vend.telp = ""
	vend.tefx = ""
	vend.dsca = ""
	vend.ccit = ""
	vend.cste = ""
	sign.nama = ""
	sign.desg = ""
	pHed.m = "Purchase Order" | Supplier I002, U017
	pFot.m = "PL. SEND BACK THE ATTACHED ACKNOWLEDGEMENT OF PURCHASE ORDER DULY STAMPED AND SIGNED BY SELLER"
|         pFot.m = "Not for use. Purchase Order Not Locked."			| Logic to be checked
	aHed.m = "ORDER ACCEPTANCE"
	highest.vrsn = true
	select tdmsl400.vrsn from tdmsl400
	where tdmsl400._index1 = {:i.orno}
	order by tdmsl400.vrsn desc
	as set with 1 rows
	selectdo
		if tdmsl400.vrsn <> i.vrsn then
			highest.vrsn = false
		endif
	endselect
	order.accp.print = tcyesno.no
	select tdmsl400.stat,tdmsl400.apby from tdmsl400
	where tdmsl400._index1 = {:i.orno,:i.vrsn}
	and	tdmsl400.stat = tcyesno.yes
	as set with 1 rows
	selectdo
		order.accp.print = tcyesno.yes
		select tccom001.nama:sign.nama,
			bpmdm001.jobt:sign.desg
		from tccom001,bpmdm001
		where tccom001._index4 = {:tdmsl400.apby}
		and	tccom001.emno refers to bpmdm001
		as set with 1 rows
		selectdo
		endselect
	endselect
	
	select tdpur400.*,tcmcs065.cadr,
		tdmsl400.vrsn, tdmsl400.apdt, 
		tccom130brnc.nama:brnc.nama,
		tccom130brnc.namb:brnc.namb,
		tccom130brnc.namc:brnc.namc,
		tccom130brnc.telp:brnc.telp,
		tccom130brnc.tefx:brnc.tefx,
		tccom130brnc.ccit:brnc.ccit,
		tccom130brnc.cste:brnc.cste,
		tccom130brnc.pstc:brnc.pstc,
		tccom130brnc.ccty:brnc.ccty,
		tccom130vend.nama:vend.nama,
		tccom130vend.namb:vend.namb,
		tccom130vend.namc:vend.namc,
		tccom130vend.telp:vend.telp,
		tccom130vend.tefx:vend.tefx,
		tccom130vend.namd:vend.namd,
		tccom130vend.namf:vend.namf,
		tccom130vend.pstc:vend.pstc,
		tccom130vend.dsca:vend.dsca,
		tccom130vend.ccty:vend.ccty,
		tccom130vend.ccit:vend.ccit,
		tccom130vend.cste:vend.cste,
		tccom001.nama,bpmdm001.mail,
		tcmcs041.txta,tdpur012.dsca
		
	from tdmsl400,tdpur400,tcmcs065,
		tccom130 tccom130brnc,
		tccom130 tccom130vend,
		bpmdm001,tccom001,tcmcs041,
		tdpur012
	where tdmsl400._index1 = {:i.orno,:i.vrsn}
	and	tdmsl400.orno refers to tdpur400
	and	tdpur400.cofc refers to tcmcs065
	and	tcmcs065.cadr refers to tccom130brnc
	and	tdpur400.otad refers to tccom130vend
	and	tdpur400.ccon refers to tccom001 unref clear
	and	tdpur400.cdec refers to tcmcs041
	and	tdpur400.cofc refers to tdpur012
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
		get.var(pid, "tdpur400.cdf_refb", rep.refb)
		if not highest.vrsn then
			select.header.from.history()
		endif
						|#ISGECDV001168.sn
		var.reas = ""				
		get.var(pid, "tdpur400.cdf_reas", var.reas)
		select	tdisg400.desc
		from	tdisg400
		where	tdisg400._index1 = {:var.reas}
		selectdo
		selectempty
			tdisg400.desc = ""
		endselect
						|#ISGECDV001168.en
		select tcmcs143.dsca from tcmcs143
		where tcmcs143._index1 = {:brnc.ccty,:brnc.cste}
		as set with 1 rows
		selectdo
		endselect
		if isspace(vend.namf) then
			vend.namf = vend.dsca
		endif
		if isspace(vend.namf) then
			select tccom139.dsca from tccom139
			where tccom139._index1 = {:vend.ccty,:vend.cste,:vend.ccit}
			as set with 1 rows
			selectdo
				vend.namf = tccom139.dsca
			endselect
		endif
		select tccom139.dsca from tccom139
		where tccom139._index1 = {:brnc.ccty,:brnc.cste,:brnc.ccit}
		as set with 1 rows
		selectdo
		endselect
		
		brnc.city = strip$(tccom139.dsca)&"-"&strip$(brnc.pstc) & "," & tcmcs143.dsca
		
		if isspace(tdpur400.ccon) then
			tccom001.nama = ""
			bpmdm001.mail = ""
		endif
		
		brnc.lst = ""
		brnc.cst = ""
		last.vrsn = 0
		select tdmsl400.vrsn:last.vrsn 
		from tdmsl400
		where tdmsl400._index1 = {:i.orno}
		order by tdmsl400.vrsn desc
		as set with 1 rows
		selectdo
		endselect
		if strip$(shiftl$(tdpur400.otbp)) = "I002" or strip$(shiftl$(tdpur400.otbp)) = "U017" then
			pHed.m = "Branch Transfer Requisition"
		else
			pHed.m = "Purchase Order"
		endif
		select tcemm170.fcua from tcemm170
		where tcemm170._index1 = {:curr.comp}
		as set with 1 rows
		selectdo
		endselect
		select tdpur401.cprj from tdpur401
		where tdpur401._index1 = {:tdpur400.orno}
		as set with 1 rows
		selectdo
			|#ISGEC0104.sn
			select	tcmcs052.dsca
			from	tcmcs052
			where	tcmcs052._index1 = {:tdpur401.cprj}
			selectdo
			selectempty
				tcmcs052.dsca = ""
			endselect	
			|#ISGEC0104.en
		endselect
		select tppdm740.ccur from tppdm740
		where tppdm740._index1 = {:tdpur401.cprj,:tdpur400.otbp}
		and tppdm740.ccur = :tcemm170.fcua
		as set with 1 rows
		selectdo
			de1f.m = "E1-Form (as applicable)"
			dcfr.m = "C-Form to suppliers (as applicable)"
		selectempty
			de1f.m = ""
			dcfr.m = ""			
		endselect
		
		select tdmsl400.stat,tdmsl400.work,tdmsl400.vrsn,tdmsl400.orno				|PATCH002026.sn
		from    tdmsl400
		where   tdmsl400._index1 = {:i.orno,:i.vrsn}
		selectdo
			if tdmsl400.stat = tcyesno.no and tdmsl400.work = tdmsl.work.no then
				select tdmsl500.logn
				from   tdmsl500
				where  tdmsl500._index1 = {:tdmsl400.orno,:tdmsl400.vrsn}
				selectdo
					if strip$(shiftl$(tdmsl500.logn)) <> "" then
						log.name = tdmsl500.logn
					else
						log.name = ""
					endif	
				selectempty	
					log.name = logname$
				endselect	
			endif
			if tdmsl400.stat = tcyesno.yes and tdmsl400.work = tdmsl.work.completed then
				select tdmsl500.logn
				from    tdmsl500
				where   tdmsl500._index1 = {:tdmsl400.orno,:tdmsl400.vrsn}
				selectdo
					if strip$(shiftl$(tdmsl500.logn)) <> "" then
						log.name = tdmsl500.logn
					else
						log.name = ""
					endif	
				selectempty
					log.name = ""
				endselect	
			endif	
			if tdmsl400.stat = tcyesno.no and tdmsl400.work = tdmsl.work.yes then
				select tdmsl500.logn
				from   tdmsl500
				where  tdmsl500._index1 = {:tdmsl400.orno,:tdmsl400.vrsn}
				selectdo
					if strip$(shiftl$(tdmsl500.logn)) <> "" then
						log.name = tdmsl500.logn
					else
						log.name = ""
					endif	
				selectempty	
					log.name = logname$
				endselect	
			endif
			if tdmsl400.stat = tcyesno.yes and tdmsl400.work = tdmsl.work.yes then
				select tdmsl500.logn
				from   tdmsl500
				where  tdmsl500._index1 = {:tdmsl400.orno,:tdmsl400.vrsn}
				selectdo
					if strip$(shiftl$(tdmsl500.logn)) <> "" then
						log.name = tdmsl500.logn
					else
						log.name = ""
					endif	
				selectempty	
					log.name = logname$
				endselect	
			endif
		endselect
		
		
		
		select ttaad200.name:name.emp					
		from    ttaad200
		where   ttaad200._index1 = {:log.name}
		and     ttaad200._compnr = {000}
 		selectdo
		selectempty
			name.emp = ""
		endselect							|PATCH002026.en
		|*** Locking logic to be implemented  start
| 		if strip$(shiftl$(tdpur400.otbp)) = "I002" or strip$(shiftl$(tdpur400.otbp)) = "U017" then
| 			pHed.m = "Provisional Branch Transfer Requisition"
| 		else
| 			pHed.m = "Provisional Purchase Order"
| 		endif
		|*** Locking logic to be implemented  end
		
| 		if last.vrsn = i.vrsn and tdpur400.hdst = tdpur.hdst.modified or tdpur400.hdst = tdpur.hdst.created then
		if last.vrsn = i.vrsn and order.accp.print <> tcyesno.yes then
			pFot.m = "Not for use. Purchase Order Not Locked."
		endif

		if last.vrsn > i.vrsn then
			pFot.m = "This is old revision of Purchase Order. Please refer latest Revision No. : " & str$(last.vrsn)
		endif
		if tdpur400.hdst = tdpur.hdst.cancelled then
			pFot.m = "Please do not refer any revision of this Purchase Order. This Purchase Order is cancelled."
		endif
		select tctax940.regn:brnc.lst
		from tctax940
		where tctax940._index5 = {tcemm.enty.l.pur.office,:tdpur400.cofc}
		and	tctax940.catg = tctax.catg.l.vat
		and	tctax940.efdt <= :tdpur400.odat
		and 	(tctax940.exdt = 0 or tctax940.exdt >= :tdpur400.odat)
		as set with 1 rows
		selectdo
		endselect
		select tctax940.regn:brnc.cst
		from tctax940
		where tctax940._index5 = {tcemm.enty.l.pur.office,:tdpur400.cofc}
		and	tctax940.catg = tctax.catg.l.cst
		and	tctax940.efdt <= :tdpur400.odat
		and 	(tctax940.exdt = 0 or tctax940.exdt >= :tdpur400.odat)
		as set with 1 rows
		selectdo
		endselect
		aBd1.m = "We acknowledge and accept your Purchase Order No. " & str$(tdpur400.orno) & " dated " & 
			  sprintf$("%u(%02d:%02m:%04Y)",tdpur400.odat) & " Rev. " & str$(tdmsl400.vrsn) & " dated " &
			  sprintf$("%u(%02d:%02m:%04Y)",tdmsl400.apdt)
		get.var(pid, "tdpur400.cdf_adat", adat.c)
		get.var(pid, "tdpur400.cdf_alvl", alvl.c)
		get.var(pid, "tdpur400.cdf_prty", prty.c)
		get.var(pid, "tdpur400.cdf_qap", qap.c)
		get.var(pid, "tdpur400.cdf_qdat", qdat.c)
	endselect
	get.po.totals()
	line.indc = 0
	rprt_send()
	select tdpur401.*,tcibd001.*,tcmcs052.dsca 
	from tdpur401,tcibd001,tcmcs052
	where tdpur401._index1 = {:i.orno}
	and	tdpur401.oltp in (1,4)
	and	tdpur401.item refers to tcibd001
	and	tdpur401.cprj refers to tcmcs052 unref clear
	selectdo
		if not highest.vrsn then
			if not select.line.from.history() then
				continue
			endif
		endif		
| 		get.var(pid, "tdpur401.cdf_ldat", ldat.c)			|#ISGEC001071.o
| 		get.ld.date()			|#ISGEC015006.n						|#ISGEC001071.n
		add.qty = 0.0
		if etol(tdpur401.oltp) = 1 then
			if highest.vrsn then
				add.qty = get.additional.qty.from.401()
			else
				add.qty = get.additional.qty.from.501()
			endif
		endif
		if isspace(tdpur401.cprj) then
			tcmcs052.dsca = ""
		endif
		tdpur401.oamt = (tdpur401.oamt / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.tase.l = (tdpur401.tase.l / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.tasv.l = (tdpur401.tasv.l / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.tass.l = (tdpur401.tass.l / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.qoor = tdpur401.qoor + add.qty
		iamt.m = 0
		exc.amnt = 0
		exc.rate = 0
		stx.rate = 0
		stx.amnt = 0
		tot.amnt = 0
		oth.chg1 = 0
		oth.chg2 = 0
		ialt.m = ""
		aX1a.m = ""
		|#ISGEC0104.sn
		Get_Landed_Cost(tdpur401.orno, tdpur401.pono)
		|#ISGEC0104.en
		|#ISGEC0104.so
			| borf = str$(tdpur401.pono)&"/"&str$(tdpur401.sqnb)
			| select tclct200.* from tclct200
			| where tclct200._index1 = {2}
			| and	tclct200.bobj = :tdpur400.orno
			| and	tclct200.borf = :borf
			| order by tclct200._index1
			| as set with 2 rows
			| selectdo
			| 	if not highest.vrsn then
			| 		select tcmsl200.* from tcmsl200
			| 		where tcmsl200._index1 ={:tclct200.boty,:tclct200.boor,:tclct200.bobj,:tclct200.borf,:tdmsl400.vrsn,:tclct200.lcln}
			| 		as set with 1 rows
			| 		selectdo
			| 			tdmsl.dll0500.move.tcmsl200.to.tclct200()
			| 		endselect
			| 	endif
			| 	if oth.chg1 = 0 then
			| 		oth.chg1 = tclct200.lcam
			| 	else
			| 		oth.chg2 = tclct200.lcam
			| 	endif
			| endselect
		|#ISGEC0104.eo
		if isspace(tdpur401.item(1;9)) then
			select tcibd004.aitc:ialt.m 
			from tcibd004
			where tcibd004._index1 = {"SUP",:tdpur401.otbp,:tdpur401.item}
			as set with 1 rows
			selectdo
			endselect
		endif
		iWgt.m = 0
		if highest.vrsn then
			select sum(tdisg002.wght):iwgt.m from tdisg002
			where tdisg002._index1 = {:tdpur401.orno,:tdpur401.pono}
			and	tdisg002.slct = tcyesno.yes
			and	tdisg002.stat = tcyesno.yes
			selectdo
			endselect
		else
			select sum(tdisg502.wght):iwgt.m from tdisg502
			where tdisg502._index1 = {:tdpur401.orno,:i.vrsn,:tdpur401.pono}
			and	tdisg502.slct = tcyesno.yes
			and	tdisg502.stat = tcyesno.yes
			selectdo
			endselect
		endif
		
| 		aX1a.m = "Details as per Annexure I(a) attached"
		
		populate.tax.amounts()
									|#ISGEC001071.sn
		exc.amnt = exc.amnt + oth.exc
		stx.amnt = stx.amnt + oth.stx
									|#ISGEC001071.en
		tot.amnt = tdpur401.oamt + exc.amnt + stx.amnt + oth.chg1 + oth.chg2
		aBd2.m = "for project " & strip$(tdpur401.cprj) & " / " & strip$(tcmcs052.dsca)
		tdpur401.ddta = get.last.ld.date()		|#ISGEC001107.n
		line.indc = 1
		rprt_send()
		line.indc = 2
		send.document.detail()
		line.indc = 3
		send.document.detail()
		
		
	endselect
	
}
function send.document.detail()
{
	domain	tccprj		tmp.cprj Fixed	|#ISGECDV001165.n
	
	if highest.vrsn then
		select tdisg002.*,dmisg001.*
		from tdisg002,dmisg001
		where tdisg002._index1 = {:i.orno,:tdpur401.pono}
		and	tdisg002.cmba refers to dmisg001
		and	tdisg002.slct = tcyesno.yes
		and	tdisg002.stat = tcyesno.yes
		selectdo
					|#ISGECDV001067.sn
			select	dmisg002.txtb,
				dmisg002.itmt, dmisg002.oitm			|#ISGECDV001165.n
			from	dmisg002
			where	dmisg002._index1 = {:dmisg001.docn, :dmisg001.revn}
			and	dmisg002.item = :tdisg002.item
			selectdo
								|#ISGECDV001165.sn
				tmp.cprj = ""
				tmp.cprj = string.set$(" ", 9)
				if	trim$(dmisg002.itmt) = "S"	then
					select	tcibd001.txta:dmisg002.txtb
					from	tcibd001
					where	tcibd001._index1 = {:1}
					wherebind(1, tmp.cprj & trim$(dmisg002.oitm))
					selectdo
					selectempty
						dmisg002.txtb = 0
					endselect
				endif	
								|#ISGECDV001165.en
			selectempty
				dmisg002.txtb = 0
			endselect
					|#ISGECDV001067.en
			rprt_send()
			read.child.documents()
		endselect
	else
		select tdisg502.*,dmisg001.*
		from tdisg502,dmisg001
		where tdisg502._index1 = {:i.orno,:i.vrsn,:tdpur401.pono}
		and	tdisg502.cmba refers to dmisg001
		and	tdisg502.slct = tcyesno.yes
		and	tdisg502.stat = tcyesno.yes
		selectdo
			tdmsl.dll0500.move.tdisg502.to.tdisg002()
| 			read.child.documents()	|#ISGEC015039.o
						|#ISGECDV001067.sn
			select	dmisg002.txtb,
				dmisg002.itmt, dmisg002.oitm			|#ISGECDV001165.n
			from	dmisg002
			where	dmisg002._index1 = {:dmisg001.docn, :dmisg001.revn}
			and	dmisg002.item = :tdisg502.item
			selectdo
								|#ISGECDV001165.sn
				tmp.cprj = ""
				tmp.cprj = string.set$(" ", 9)
				if	trim$(dmisg002.itmt) = "S"	then
					select	tcibd001.txta:dmisg002.txtb
					from	tcibd001
					where	tcibd001._index1 = {:1}
					wherebind(1, tmp.cprj & trim$(dmisg002.oitm))
					selectdo
					selectempty
						dmisg002.txtb = 0
					endselect
				endif	
								|#ISGECDV001165.en
			selectempty
				dmisg002.txtb = 0
			endselect
					|#ISGECDV001067.en
					
			tdisg002.qnty = tdisg502.qnty			|#ISGEC001106.sn
			tdisg002.quom = tdisg502.quom
			tdisg002.wght = tdisg502.wght			|#ISGEC001106.en
			
			rprt_send()
			read.child.documents()		|#ISGEC015039.n
		endselect
	endif
}
function read.child.documents()
{
	tdisg002.qnty = 0			
	tdisg002.wght = 0
	tdisg002.amnt = 0						|#ISGEC001139.n
	select dmisg003.* from dmisg003
	where dmisg003._index1 = {:tdisg002.docn,:tdisg002.revi}
	selectdo
		dmisg001.dcid = dmisg003.drgn
		dmisg001.dttl = dmisg003.dcfn
		dmisg001.revn = dmisg003.drev			|#ISGEC001120.n
		rprt_send()
	endselect
}
function populate.tax.amounts()
{
	domain	tcamnt		line.tax.amount.array(1, 1)	based
	domain	tcamnt		line.base.amount.array(1, 1)	based
	domain	tccvat		line.tax.code.array(1, 1)	based
	domain	tctax.indt.l	o.line.indirect.tax.array(1, 1)	based
	domain	tctax.indt.l	i.duty.type.array(1, 1)		based
	domain	tcyesno		expensed.tax(1, 1)		based
	domain	tcmcs.s250m	o.comb.output.set(1)		based
	domain	tcpvat		o.tax.rates(1,1)		based
	domain	tcamnt		i.duties.array(1,1)		based
	domain tctax.seqn 	o.maximum.sequence.number
	domain tcamnt 		o.claimable.tax.amount
	domain tcamnt 		o.non.claimable.tax.amount
	domain tcamnt 		o.total.tax.amount
	domain tcamnt 		o.sales.tax
	domain tcmcs.s250m 	o.error.msg mb
	domain	tcamnt		tmp.rate		|#ISGEC0104.n
	domain	tcamnt		temp.1.rate, temp.amnt	|#ISG10102.n
	
	
	tmp.rate = 0					|#ISGEC0104.n
	temp.1.rate = 0	|#ISG10102.n
	rate = 0	|#ISG10102.n
	temp.amnt = 0
	tctax.dll9141.determine.aggregate.tax.amounts.per.line( 
						tdpur401.ccty,				| domain tcccty i.tax.country, 
						tdpur401.cvat,				| domain tccvat i.aggregate.tax.code, 
						tdpur401.odat,				| domain tcdate i.tax.date, 
						tdpur401.oamt,				| domain tcamnt i.order.line.price, 
						tdpur401.cuva,				| domain tcamnt i.customs.value, 
						tdpur401.mrpi.l,			| domain tcamnt i.market.retail.price, 
						0.00,					| domain tcamnt i.retail.sales.price, 
						0.00,					| domain tcamnt i.tariff.price, 
						tdpur400.ccur,				| domain tcccur i.price.currency, 
						tdpur400.ratd,				| domain tcdate i.currency.rate.date, 
						tdpur400.ratt,				| domain tcrtyp i.currency.exchange.rate.type, 
						tdpur401.tase.l,			| domain tcpric i.asv.excise, 
						tdpur401.tasv.l,			| domain tcpric i.asv.vat, 
						tdpur401.tass.l,			| domain tcpric i.asv.service.tax, 
						tdpur401.ddta,				| domain tcdate i.ship.or.receive.date, 
						tcyesno.no,				| domain tcyesno i.as.is.sales, 
						tcyesno.no,				| domain tcyesno i.yesno.flag, 
						i.duty.type.array,			| ref domain tctax.indt.l i.duty.type.array(,), 
						i.duties.array,				| ref domain tcamnt i.duties.array(,), 
						o.tax.rates,				| ref domain tcpvat o.tax.rates(,), 
						o.maximum.sequence.number,		| ref domain tctax.seqn o.maximum.sequence.number, 
						line.base.amount.array,			| ref domain tcamnt o.line.base.amount.array(,), 
						line.tax.amount.array,			| ref domain tcamnt o.line.tax.amount.array(,), 
						line.tax.code.array,			| ref domain tccvat o.line.tax.code.array(,) fixed, 
						o.line.indirect.tax.array,		| ref domain tctax.indt.l o.line.indirect.tax.array(,), 
						expensed.tax,				| ref domain tcyesno o.expensed.tax(,), 
						o.claimable.tax.amount,			| ref domain tcamnt o.claimable.tax.amount, 
						o.non.claimable.tax.amount,		| ref domain tcamnt o.non.claimable.tax.amount, 
						o.total.tax.amount,			| ref domain tcamnt o.total.tax.amount, 
						o.sales.tax,				| ref domain tcamnt o.sales.tax, 
						o.comb.output.set,			| ref domain tcmcs.s250m o.comb.output.set() fixed mb, 
						o.error.msg)				| ref domain tcmcs.s250m o.error.msg mb )
	select tctax941.*,tcmcs036.*
	from tctax941,tcmcs036
	where tctax941._index1 = {:tdpur401.ccty,:tdpur401.cvat}
	and	tctax941.type = 20		|tctax.type.l.tax
	and	tctax941.cmbb refers to tcmcs036
	selectdo
		on case tcmcs036.indt.l
		case	tctax.indt.l.bed:
		case	tctax.indt.l.service:			|#ISGEC0104.n
			exc.amnt = exc.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)
			exc.rate = o.tax.rates(tctax941.layr,tctax941.seqn)
			tmp.rate = exc.rate			|#ISGEC0104.n
			break
		case	tctax.indt.l.aed:	
		case	tctax.indt.l.sed:	
		case	tctax.indt.l.e.cess.excise:	
		case	tctax.indt.l.e.cess.service:		|#ISGEC0104.n	
		case	tctax.indt.l.hse.cess.excise:
		case	tctax.indt.l.hse.cess.servic:		|#ISGEC0104.n
			exc.amnt = exc.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)
| 			exc.rate = exc.rate + o.tax.rates(tctax941.layr,tctax941.seqn)/10	|#ISGEC0104.o
			exc.rate = exc.rate + (tmp.rate * o.tax.rates(tctax941.layr,tctax941.seqn))/100	|#ISGEC0104.n
			break
		default:
| 			stx.amnt = stx.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)	|#ISG10102.o
| 			stx.rate = o.tax.rates(tctax941.layr,tctax941.seqn)				|#ISG10102.o
			
			rate = rate + 1		|#ISG10102.sn
			if rate =  1 then
				stx.amnt = stx.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)
				stx.rate = o.tax.rates(tctax941.layr,tctax941.seqn)
				temp.1.rate = stx.rate
				get.layer(layer.temp1)	|#ISGEC001164.n
				
				
			else
| 				if tctax941.lr06 = tcyesno.no	then						|#ISGEC001164.so to test
| 					stx.rate = stx.rate + o.tax.rates(tctax941.layr,tctax941.seqn)
| 					stx.amnt = stx.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)
| 				else										|#ISGEC001164.eo
					get.layer(layer.temp2)	|#ISGEC001164.sn
					if layer.temp1 = layer.temp2 then
						stx.amnt = stx.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)			
						stx.rate = stx.rate + o.tax.rates(tctax941.layr,tctax941.seqn)
					else			|#ISGEC001164.en
						
						stx.amnt = stx.amnt + line.tax.amount.array(tctax941.layr,tctax941.seqn)			
						stx.rate = stx.rate + (temp.1.rate * o.tax.rates(tctax941.layr,tctax941.seqn))/100	|#ISG10102.n
					endif					|#ISGEC001164.n	
| 				endif										|#ISGEC001164.o					
			endif			|#ISG10102.en
		endcase
		
	endselect
}

function select.header.from.history()
{
	select tdmsl500.*,tcmcs065.cadr,
		tccom130brnc.nama:brnc.nama,
		tccom130brnc.namb:brnc.namb,
		tccom130brnc.namc:brnc.namc,
		tccom130brnc.telp:brnc.telp,
		tccom130brnc.tefx:brnc.tefx,
		tccom130brnc.ccit:brnc.ccit,
		tccom130brnc.cste:brnc.cste,
		tccom130brnc.pstc:brnc.pstc,
		tccom130brnc.ccty:brnc.ccty,
		tccom130vend.nama:vend.nama,
		tccom130vend.namb:vend.namb,
		tccom130vend.namc:vend.namc,
		tccom130vend.telp:vend.telp,
		tccom130vend.tefx:vend.tefx,
		tccom130vend.namd:vend.namd,
		tccom130vend.namf:vend.namf,
		tccom130vend.pstc:vend.pstc,
		tccom130vend.dsca:vend.dsca,
		tccom130vend.ccty:vend.ccty,
		tccom130vend.ccit:vend.ccit,
		tccom130vend.cste:vend.cste,
		tccom001.nama,bpmdm001.mail,
		tcmcs041.txta,tdpur012.dsca
		
	from tdmsl500,tcmcs065,
		tccom130 tccom130brnc,
		tccom130 tccom130vend,
		bpmdm001,tccom001,tcmcs041,tdpur012
	where tdmsl500._index1 = {:i.orno,:i.vrsn}
	and	tdmsl500.cofc refers to tcmcs065
	and	tcmcs065.cadr refers to tccom130brnc
	and	tdmsl500.otad refers to tccom130vend
	and	tdmsl500.ccon refers to tccom001 unref clear
	and	tdmsl500.cdec refers to tcmcs041
	and	tdmsl500.cofc refers to tdpur012
	as set with 1 rows
	selectdo
		tdmsl.dll0500.move.tdmsl500.to.tdpur400()
	endselect
}
function long select.line.from.history()
{
	select tdmsl501.*,tcibd001.*,tcmcs052.dsca 
	from tdmsl501,tcibd001,tcmcs052
	where tdmsl501._index1 = {:i.orno,:i.vrsn,:tdpur401.pono}
	and	tdmsl501.item refers to tcibd001
	and	tdmsl501.cprj refers to tcmcs052 unref clear
	as set with 1 rows
	selectdo
		tdmsl.dll0500.move.tdmsl501.to.tdpur401()
	selectempty
		return(0)
	endselect
	return(1)
}

function domain tcqsl1	get.additional.qty.from.401()
{
	domain tcqsl1 ord.qty,app.qty,diff.qty,bac.qty
	ord.qty = 0
	app.qty = 0
	bac.qty = 0
	diff.qty = 0
	select atdpur401.qoor:ord.qty,atdpur401.qiap:app.qty,
		atdpur401.qibo:bac.qty
	from tdpur401 atdpur401
	where atdpur401._index1 = {:tdpur401.orno,:tdpur401.pono}
	and atdpur401.oltp = 1
	selectdo
		diff.qty = diff.qty + bac.qty - (ord.qty - app.qty)
	endselect
	return(diff.qty)
}
function domain tcqsl1	get.additional.qty.from.501()
{
	domain tcqsl1 ord.qty,app.qty,diff.qty,bac.qty
	ord.qty = 0
	app.qty = 0
	bac.qty = 0
	diff.qty = 0
	select atdmsl501.qoor:ord.qty,atdmsl501.qiap:app.qty,
		atdmsl501.qibo:bac.qty
	from tdmsl501 atdmsl501
	where atdmsl501._index1 = {:tdpur401.orno,:i.vrsn, :tdpur401.pono}
	and atdmsl501.oltp = 1
	selectdo
		diff.qty = diff.qty + bac.qty - (ord.qty - app.qty)
	endselect
	return(diff.qty)
}
function get.po.totals()
{
	tot.exc = 0
	tot.stx = 0
	tot.oth1 = 0
	tot.oth2 = 0
	tot.bas = 0
	ind.exc = 0
	ind.stx = 0
	ind.oth1 = 0
	ind.oth2 = 0
	ind.bas = 0
	
	select tdpur401.* 
	from tdpur401
	where tdpur401._index1 = {:i.orno}
	and	tdpur401.oltp in (1,4)
	selectdo
		if not highest.vrsn then
			if not select.line.from.history() then
				continue
			endif
		endif		
		select tdpur402.rqno,tdpur402.rqpo,tdpur201.*
		from tdpur402,tdpur201
		where tdpur402._index1 = {:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb}
		and tdpur402.cmbe refers to tdpur201
		as set with 1 rows
		selectdo
			ind.exc = 0
			ind.stx = 0
			ind.oth1 = 0
			ind.oth2 = 0
			ind.bas = ind.bas + tdpur201.oamt			
		endselect
		add.qty = 0.0
		if etol(tdpur401.oltp) = 1 then
			if highest.vrsn then
				add.qty = get.additional.qty.from.401()
			else
				add.qty = get.additional.qty.from.501()
			endif
		endif
		tdpur401.oamt = (tdpur401.oamt / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.tase.l = (tdpur401.tase.l / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.tasv.l = (tdpur401.tasv.l / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.tass.l = (tdpur401.tass.l / tdpur401.qoor ) * (tdpur401.qoor + add.qty)
		tdpur401.qoor = tdpur401.qoor + add.qty
		iamt.m = 0
		exc.amnt = 0
		exc.rate = 0
		stx.rate = 0
		stx.amnt = 0
		tot.amnt = 0
		oth.chg1 = 0
		oth.chg2 = 0
		|#ISGEC0104.sn
		rate = 0		|#ISG10102.n
		
		Get_Landed_Cost(tdpur401.orno, tdpur401.pono)
		|#ISGEC0104.en
		|#ISGEC0104.so
			| borf = str$(tdpur401.pono)&"/"&str$(tdpur401.sqnb)
			| select tclct200.* from tclct200
			| where tclct200._index1 = {2}
			| and	tclct200.bobj = :tdpur400.orno
			| and	tclct200.borf = :borf
			| order by tclct200._index1
			| as set with 2 rows
			| selectdo
			| 	if not highest.vrsn then
			| 		select tcmsl200.* from tcmsl200
			| 		where tcmsl200._index1 ={:tclct200.boty,:tclct200.boor,:tclct200.bobj,:tclct200.borf,:tdmsl400.vrsn,:tclct200.lcln}
			| 		as set with 1 rows
			| 		selectdo
			| 			tdmsl.dll0500.move.tcmsl200.to.tclct200()
			| 		endselect
			| 	endif
			| 	if oth.chg1 = 0 then
			| 		oth.chg1 = tclct200.lcam
			| 	else
			| 		oth.chg2 = tclct200.lcam
			| 	endif
			| endselect
		|#ISGEC0104.eo
		populate.tax.amounts()
								|#ISGEC001071.so
| 		tot.exc = tot.exc + exc.amnt 
| 		tot.stx = tot.stx + stx.amnt 
								|#ISGEC001071.eo
								|#ISGEC001071.sn
		tot.exc = tot.exc + exc.amnt + oth.exc
 		tot.stx = tot.stx + stx.amnt + oth.stx
								|#ISGEC001071.en
		tot.oth1 = tot.oth1 + oth.chg1
		tot.oth2 = tot.oth2 + oth.chg2
		tot.bas = tot.bas + tdpur401.oamt
| 		tot.amnt = tdpur401.oamt + exc.amnt + stx.amnt + oth.chg1 + oth.chg2 				|#ISGEC001071.n
 		tot.amnt = tdpur401.oamt + exc.amnt + stx.amnt + oth.chg1 + oth.chg2 + oth.exc + oth.stx	|#ISGEC001071.o
	endselect	
}

|#ISGEC0104.sn
function Get_Landed_Cost(domain tcorno		im.orno,
			domain	tcpono		im.pono)
{
	domain	tcpono	tmp.sqnb
	string	tmp.borf(5), prv.borf(5)
	
	oth.chg1 = 0
	oth.chg2 = 0
	oth.stx = 0					|#ISGEC001071.sn
	oth.exc = 0					|#ISGEC001071.en
	select	a_tdpur401.sqnb:tmp.sqnb 
	from	tdpur401 a_tdpur401
	where	a_tdpur401._index1 = {:im.orno, :im.pono}
	and	a_tdpur401.oltp in (2,3,4)
	selectdo
		tmp.borf = str$(im.pono)&"/"&str$(tmp.sqnb)
		select	tclct200.* from tclct200
		where	tclct200._index1 = {2}
		and	tclct200.bobj = :im.orno
		and	tclct200.borf = :tmp.borf
		order by tclct200._index1
		as set with 2 rows
		selectdo
			if not highest.vrsn then
				select	tcmsl200.*
				from	tcmsl200
				where	tcmsl200._index1 ={:tclct200.boty,:tclct200.boor,:tclct200.bobj,:tclct200.borf,:tdmsl400.vrsn,:tclct200.lcln}
				as set with 1 rows
				selectdo
					tdmsl.dll0500.move.tcmsl200.to.tclct200()
				endselect
			endif
			if	tmp.borf <> prv.borf	then
				prv.borf = tmp.borf
				oth.chg1 = oth.chg1 + tclct200.lcam
			else
				oth.chg2 = oth.chg2 + tclct200.lcam
			endif	
			calculate.oth.tax.amounts()			|#ISGEC001071.n
			
			| if oth.chg1 = 0 then
			| 	oth.chg1 = tclct200.lcam
			| else
			| 	oth.chg2 = tclct200.lcam
			| endif
			
		endselect
	endselect	
}
|#ISGEC0104.en
							|#ISGEC001071.sn

function calculate.oth.tax.amounts()
{
	domain	tcamnt		line.tax.amount.array(1, 1)	based
	domain	tcamnt		line.base.amount.array(1, 1)	based
	domain	tccvat		line.tax.code.array(1, 1)	based
	domain	tctax.indt.l	o.line.indirect.tax.array(1, 1)	based
	domain	tctax.indt.l	i.duty.type.array(1, 1)		based
	domain	tcyesno		expensed.tax(1, 1)		based
	domain	tcmcs.s250m	o.comb.output.set(1)		based
	domain	tcpvat		o.tax.rates(1,1)		based
	domain	tcamnt		i.duties.array(1,1)		based
	domain tctax.seqn 	o.maximum.sequence.number
	domain tcamnt 		o.claimable.tax.amount
	domain tcamnt 		o.non.claimable.tax.amount
	domain tcamnt 		o.total.tax.amount
	domain tcamnt 		o.sales.tax
	domain tcmcs.s250m 	o.error.msg mb
	if isspace(tclct200.cvat) then
		return
	endif
	tctax.dll9141.determine.aggregate.tax.amounts.per.line( 
						tdpur401.ccty,				| domain tcccty i.tax.country, 
						tclct200.cvat,				| domain tccvat i.aggregate.tax.code, 
						tdpur401.odat,				| domain tcdate i.tax.date, 
						tdpur401.oamt,				| domain tcamnt i.order.line.price, 
						tdpur401.cuva,				| domain tcamnt i.customs.value, 
						tdpur401.mrpi.l,			| domain tcamnt i.market.retail.price, 
						0.00,					| domain tcamnt i.retail.sales.price, 
						0.00,					| domain tcamnt i.tariff.price, 
						tdpur400.ccur,				| domain tcccur i.price.currency, 
						tdpur400.ratd,				| domain tcdate i.currency.rate.date, 
						tdpur400.ratt,				| domain tcrtyp i.currency.exchange.rate.type, 
						tclct200.lcam,			| domain tcpric i.asv.excise, 
						tclct200.lcam,			| domain tcpric i.asv.vat, 
						tclct200.lcam,			| domain tcpric i.asv.service.tax, 
						tdpur401.ddta,				| domain tcdate i.ship.or.receive.date, 
						tcyesno.no,				| domain tcyesno i.as.is.sales, 
						tcyesno.no,				| domain tcyesno i.yesno.flag, 
						i.duty.type.array,			| ref domain tctax.indt.l i.duty.type.array(,), 
						i.duties.array,				| ref domain tcamnt i.duties.array(,), 
						o.tax.rates,				| ref domain tcpvat o.tax.rates(,), 
						o.maximum.sequence.number,		| ref domain tctax.seqn o.maximum.sequence.number, 
						line.base.amount.array,			| ref domain tcamnt o.line.base.amount.array(,), 
						line.tax.amount.array,			| ref domain tcamnt o.line.tax.amount.array(,), 
						line.tax.code.array,			| ref domain tccvat o.line.tax.code.array(,) fixed, 
						o.line.indirect.tax.array,		| ref domain tctax.indt.l o.line.indirect.tax.array(,), 
						expensed.tax,				| ref domain tcyesno o.expensed.tax(,), 
						o.claimable.tax.amount,			| ref domain tcamnt o.claimable.tax.amount, 
						o.non.claimable.tax.amount,		| ref domain tcamnt o.non.claimable.tax.amount, 
						o.total.tax.amount,			| ref domain tcamnt o.total.tax.amount, 
						o.sales.tax,				| ref domain tcamnt o.sales.tax, 
						o.comb.output.set,			| ref domain tcmcs.s250m o.comb.output.set() fixed mb, 
						o.error.msg)				| ref domain tcmcs.s250m o.error.msg mb )
	select tctax941.*,tcmcs036.*
	from tctax941,tcmcs036
	where tctax941._index1 = {:tdpur401.ccty,:tdpur401.cvat}
	and	tctax941.type = 20		|tctax.type.l.tax
	and	tctax941.cmbb refers to tcmcs036
	selectdo
		on case tcmcs036.indt.l
		case	tctax.indt.l.bed:
		case	tctax.indt.l.service:	
			oth.exc = oth.exc + line.tax.amount.array(tctax941.layr,tctax941.seqn)
			break
		case	tctax.indt.l.aed:	
		case	tctax.indt.l.sed:	
		case	tctax.indt.l.e.cess.excise:	
		case	tctax.indt.l.e.cess.service:	
		case	tctax.indt.l.hse.cess.excise:
		case	tctax.indt.l.hse.cess.servic:	
			oth.exc = oth.exc + line.tax.amount.array(tctax941.layr,tctax941.seqn)
			break
		default:
			oth.stx = oth.stx + line.tax.amount.array(tctax941.layr,tctax941.seqn)
		endcase
	endselect
}
function get.ld.date()
{
	select tdpur401a.cdf_ldat:ldat.c,tdpur401a.sqnb
	from tdpur401 tdpur401a
	where tdpur401a._index1 = {:i.orno,:tdpur401.pono}
	and	tdpur401a.cdf_ldat <> 0
	order by tdpur401a.sqnb desc 
	as set with 1 rows
	selectdo
	selectempty	
		ldat.c = 0				|#ISGEC01075.n
	endselect
	
| 		get.var(pid, "tdpur401.cdf_ldat", ldat.c)			|#ISGEC001071.o
	
}

							|#ISGEC001071.en
							
							
							|#ISGEC001107.sn
function domain tcdate get.last.ld.date()
{
	domain	tcdate	ot.ddta
	domain	tcpono	t.seqn
	
	ot.ddta = 0
	if	highest.vrsn	then
		select	ld_tdpur401.ddta:ot.ddta,
			ld_tdpur401.sqnb:t.seqn,
			ld_tdpur401.cdf_ldat:ldat.c		|ISGEC015006.n
		from	tdpur401 ld_tdpur401
		where	ld_tdpur401._index1 = {:i.orno, :tdpur401.pono}
		order by ld_tdpur401.sqnb desc
		as set with 1 rows
		selectdo
		endselect
	else
		select	ld_tdmsl501.ddta:ot.ddta,
			ld_tdmsl501.sqnb:t.seqn,
			ld_tdmsl501.ldat.c:ldat.c		|ISGEC015006.n
		from	tdmsl501 ld_tdmsl501
		where	ld_tdmsl501._index1 = {:i.orno, :i.vrsn, :tdpur401.pono}
		order by ld_tdmsl501.sqnb desc
		as set with 1 rows
		selectdo
		endselect	
	endif
	
	return(ot.ddta)	
}
							|#ISGEC001107.en
							
function get.layer(ref domain tctax.layr.l layer.temp)	
{
	if tctax941.lr01 = tcyesno.yes then	
		layer.temp  = 1
	else
		if tctax941.lr02 = tcyesno.yes then	
			layer.temp  = 2
		else
			if tctax941.lr03 = tcyesno.yes then	
				layer.temp  = 3
			else
				if tctax941.lr04 = tcyesno.yes then	
					layer.temp  = 4		
				else
					if tctax941.lr05 = tcyesno.yes then	
						layer.temp  = 5
					else
						if tctax941.lr06 = tcyesno.yes then	
							layer.temp  = 6
						else
							if tctax941.lr07 = tcyesno.yes then	
								layer.temp  = 7
							else
								if tctax941.lr08 = tcyesno.yes then	
									layer.temp  = 8		
								else
									if tctax941.lr09 = tcyesno.yes then	
										layer.temp  = 9
									endif
								endif
							endif
						endif
					endif
				endif
			endif
		endif	
	endif
}									|#ISGEC001164.en							

