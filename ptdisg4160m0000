|******************************************************************************
|* tdisg4160m000  0  VRC B61U a7 isg 
|* Maintain Request for Indent Value increase
|* TechVikas                     
|* 2019-09-26
|******************************************************************************
|* Main table tdisg460 Request for Indent Value increase (For zero revision of PO), Form Type 1
|******************************************************************************
                                                                                
|****************************** declaration section ***************************
declaration:

	table   ttdisg460 | Request for Indent Value increase (For zero revision of PO)
	table   ttdpur201
	table   ttdpur402
	table   ttdpur400
	table   ttdpur201
	table   ttdisg461
	table   ttdisg462
	table	ttdpur200
	table	tbpmdm001
	table	ttccom001
	table	ttdisg000
	table	ttcmcs052
	table	ttppdm090
	table	ttcibd001
	table	ttdpur201
	table	ttcmcs052
	table	ttppdm090
	table	ttcibd001
	table	ttppdm649
	table	ttdpur401
	table	ttcmcs008
	table	ttcemm170
	
	
	extern domain	tclogn	user
	extern domain	tcnama	reqs.name,appr.name
	extern domain	tcamnt	tot.ind.val,tot.po.val,tot.amnt.inc,tot.aamt
	extern domain	tcorno	orno.f,reqn.var
	extern domain	tcmcs.str10	dsca
	extern domain	tdpur.hdst	hdst.f
	long	ret,flag,file.ret,diff.cprj
	domain	tcmcs.s512m	body.attachment
	string	calling.session(13)
	
	long	comma.pos,mail.len,mail.name.len,comma.name.pos,cc.mail.len,cc.comma.pos,cc.mail.name.len,cc.comma.name.pos,cc.id
	string  cc.mail.name(1000),cc.mail(1000)
	domain	tcmcs.str100		recipient.name
	domain	tcinfo		recipient.mail,from.mail
	extern domain	tcccur	pur.ccur
	extern domain	tcrtyp	pur.ratt
	
#include <bic_cmf>
|****************************** program section ********************************
before.program:
	user = logname$
	import("prog.name$",calling.session)
	import("tdpur400.orno",orno.f)
	import("tdpur400.hdst",hdst.f)
	import("tdpur400.ccur",pur.ccur)
	import("tdpur400.ratt",pur.ratt)
	
	if calling.session = "tdpur4100m900" then
		select	tdisg000.*
		from	tdisg000
		where	tdisg000._index1 = {0}
		as set with 1 rows
		selectdo
		selectempty
			message("Parameter Not maintained !!")
			exit()
		endselect
		select	tdpur400.*
		from	tdpur400
		where	tdpur400._index1 = {:orno.f}
		and	tdpur400.hdst = tdpur.hdst.created
		selectdo
			check_project()
			if diff.cprj > 1 then
				message("Different Project in same PO not allowed.!!")
				exit()
			else
				select	tdisg460.reqn:reqn.var,tdisg460.stat
				from	tdisg460
				where	tdisg460._index2 = {:orno.f}
				and	tdisg460.stat in (1,6,4,5)
				selectdo
					if tdisg460.stat = ltoe(4) then
	| 					message("%s Request already sent for approval.",tdisg460.reqn)
						message("%s Request already sent for approval.",reqn.var)
						exit()
					else
						if tdisg460.stat = ltoe(5) then
	| 						message("%s Request already Canceled.",tdisg460.reqn)
							message("%s Request already Canceled.",reqn.var)
							exit()
						else
							if tdisg460.stat = ltoe(1) then
								message("%s Request Already generated.",reqn.var)
								exit()
							else
								message("%s Request returned.",reqn.var)
								exit()
							endif
| 							tdisg460.reqn = reqn.var
| 							tdisg460.orno = orno.f
| 							update_data()
						endif
					endif
				selectempty
					get.exchage.rate()
					check.data()
					if flag = 1 then
						if ask.enum("tdisg000000002",tcyesno.no,ret) =  tcyesno.yes then
							generate_request()
							reqn.var = tdisg460.reqn
						else
							exit()
						endif
					else
						message("No need to generate request for indent value increase.")
						exit()
					endif
				endselect
| 				query.extend.where("tdisg460.reqn = " & quoted.string(tdisg460.reqn))
				query.extend.where("tdisg460.reqn = " & quoted.string(reqn.var))
			endif
		selectempty
			message("Request can not be generated,PO is not in created status.!!")
			exit()
		endselect
	else
	endif


|****************************** group section **********************************
|****************************** form section **********************************
form.all:
init.form:
	disable.fields("tdisg460.reqn")
	disable.fields("tdisg460.orno")
	disable.fields("tdisg460.indv")
	disable.fields("tdisg460.dpov")
	disable.fields("tdisg460.amti")
	disable.fields("tdisg460.reby")
	disable.fields("tdisg460.reon")
	disable.fields("tdisg460.stat")
	disable.fields("tdisg460.stdt")
	disable.fields("tdisg460.appr")
	disable.fields("tdisg460.rem2")
	
|****************************** choice section **********************************
choice.frw.to.project:
before.choice:
	select	tdisg461.*
	from	tdisg461
	where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
	selectdo
		select	tdpur402.*
		from	tdpur402
		where	tdpur402._index1 = {:tdisg461.orno,:tdisg461.pono,:tdisg461.sqnb}
		and	tdpur402.rqno = :tdisg461.indn
		and	tdpur402.rqpo = :tdisg461.indl
		selectdo
		selectempty
			message("PO line does not found.!!")
			choice.again()
		endselect
		select	tdpur401.cprj,tdpur401.cspa
		from	tdpur401
		where	tdpur401._index1 = {:tdisg461.orno,:tdisg461.pono,:tdisg461.sqnb}
		and	tdpur401.cprj = :tdisg461.cprj
		and	tdpur401.cspa = :tdisg461.cspa
		selectdo
		selectempty
			message("Project or Element changed in PO !!")
			choice.again()			
		endselect
	selectempty
		message("Line does not found !!")		|ticket no - 7787
		choice.again()					|ticket no - 7787
	endselect
		
on.choice:
	forward_to_project()

choice.update_request:
before.choice:
	if tdisg460.stat = tdisg.rest.created or tdisg460.stat = tdisg.rest.returned then
	else
		message("Request can not be updated!!")
		choice.again()
	endif
on.choice:
	update_data()
	
choice.cancel_request:
before.choice:
	if tdisg460.stat = tdisg.rest.created or tdisg460.stat = tdisg.rest.returned then
	else
		message("Request can not be updated!!")
		choice.again()
	endif
on.choice:
	cancel_data()
	
|****************************** field section **********************************
field.reqs.name:
before.display:
	select	ttaad200.name:reqs.name
	from	ttaad200
	where	ttaad200._index1 = {:tdisg460.reby}
	and	ttaad200._compnr = {000}
	selectdo
	selectempty
		reqs.name = ""
	endselect
| 	if tdisg460.stat = ltoe(1) then
| 		enable.commands("frw.to.project")
| 		enable.fields("tdisg460.rem1")
| 	else
| 		disable.commands("frw.to.project")
| 		disable.fields("tdisg460.rem1")
| 	endif
	if tdisg460.stat = tdisg.rest.created or tdisg460.stat = tdisg.rest.returned then
		enable.commands("update_request")
		enable.commands("cancel_request")
		enable.fields("tdisg460.rem1")
		select	tdisg461.indn				|ticket no - 7787
		from	tdisg461
		where	tdisg461._index1 = {:tdisg460.reqn}
		as set with 1 rows
		selectdo
			enable.commands("frw.to.project")
		selectempty
			disable.commands("frw.to.project")
		endselect					|ticket no - 7787
	else
		disable.commands("update_request")
		disable.commands("cancel_request")
		disable.commands("frw.to.project")
		disable.fields("tdisg460.rem1")
	endif
	

field.appr.name:
before.display:
	select	ttaad200.name:appr.name
	from	ttaad200
	where	ttaad200._index1 = {:tdisg460.appr}
	and	ttaad200._compnr = {000}
	selectdo
	selectempty
		appr.name = ""
	endselect
	
field.tot.ind.val:
before.display:
	select	sum(tdisg461.indv):tot.ind.val,sum(tdisg461.dpov):tot.po.val,sum(tdisg461.amti):tot.amnt.inc,sum(tdisg461.aamt):tot.aamt
	from	tdisg461
	where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
	selectdo
	selectempty
		tot.ind.val = 0
		tot.po.val = 0
		tot.amnt.inc = 0
	endselect
	
|*****************************function section ********************************************
functions:
function generate_request()
{
	tdisg460.reqn = tdisg000.resr
	ret = tcmcs.dll0050.check.and.generate.order.number( 3,	|* action
							tdisg460.reqn,	|* io ref
							tdisg000.regr,
							0,	|* field length
							"tdisg460.reqn")
	if not isspace(tdisg460.reqn) then
		upadte_request_header()
	else
		message("Request Not generated.")
		choice.again()
	endif

}

function upadte_request_header()
{
	get.exchage.rate()
	select	tdisg460.*
	from	tdisg460
	where	tdisg460._index1 = {:tdisg460.reqn,:orno.f}
	selectdo
	selectempty
		tdisg460.reqn = tdisg460.reqn
		tdisg460.orno = orno.f
		tdisg460.reby = logname$
		tdisg460.reon = utc.num()
		tdisg460.stat = ltoe(1)
		tdisg460.stdt = utc.num()
		tdisg460.rem1 = ""
		tdisg460.rem2 = ""
		tdisg460.appr = ""
		tdisg460.rate = tcmcs008.rate
		tdisg460.ratf = tcmcs008.ratf
		tdisg460.ccur = tdpur400.ccur
		db.insert(ttdisg460,db.retry,e)
	endselect
	commit.transaction()
	update_request_line()
}
function update_request_line()
{
	select	tdpur401.*
	from	tdpur401
	where	tdpur401._index1 = {:orno.f}
	selectdo
		select	tdpur402.rqno,tdpur402.rqpo
		from	tdpur402
		where	tdpur402._index1 = {:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb}
		selectdo
			select	tdpur201.oamt
			from	tdpur201
			where	tdpur201._index1 = {:tdpur402.rqno,:tdpur402.rqpo}
			selectdo
			selectempty
				tdpur201.oamt = 0
			endselect
			if tdpur401.oamt*(tdisg460.rate/tdisg460.ratf) > (tdpur201.oamt+get_amnt()) then
				select	tdisg461.*
				from	tdisg461
				where	tdisg461._index1 = {:tdisg460.reqn,:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb,:tdpur402.rqno,:tdpur402.rqpo}
				selectdo
				selectempty
					tdisg461.reqn = tdisg460.reqn
					tdisg461.orno = tdpur401.orno
					tdisg461.pono = tdpur401.pono
					tdisg461.sqnb = tdpur401.sqnb
					tdisg461.indn = tdpur402.rqno
					tdisg461.indl = tdpur402.rqpo
					tdisg461.cprj = tdpur401.cprj
					tdisg461.cspa = tdpur401.cspa
					tdisg461.indv = tdpur201.oamt
					tdisg461.dpov = tdpur401.oamt*(tdisg460.rate/tdisg460.ratf)
					tdisg461.aamt = get_amnt()
					tdisg461.amti = ((tdpur401.oamt*(tdisg460.rate/tdisg460.ratf))-(tdpur201.oamt+tdisg461.aamt))
					db.insert(ttdisg461,db.retry,e)
				endselect
				select	tdisg462.*
				from	tdisg462
				where	tdisg462._index1 = {:tdisg460.reqn,:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb,:tdisg461.indn,:tdisg461.indl,:tdisg460.stdt}
				selectdo
				selectempty
					tdisg462.reqn = tdisg460.reqn
					tdisg462.orno = tdisg460.orno
					tdisg462.pono = tdisg461.pono
					tdisg462.sqnb = tdisg461.sqnb
					tdisg462.indn = tdisg461.indn
					tdisg462.indl = tdisg461.indl
					tdisg462.amti = tdisg461.amti
					tdisg462.indv = tdisg461.indv
					tdisg462.dpov = tdisg461.dpov
					tdisg462.aamt = tdisg461.aamt
					tdisg462.reby = tdisg460.reby
					tdisg462.reon = tdisg460.reon
					tdisg462.stat = tdisg460.stat
					tdisg462.stdt = tdisg460.stdt
					tdisg462.rem1 = tdisg460.rem1
					tdisg462.rem2 = tdisg460.rem2
					tdisg462.cprj = tdisg461.cprj
					tdisg462.cspa = tdisg461.cspa					
					tdisg462.updt = logname$
					tdisg462.upno = utc.num()
					tdisg462.rate = tdisg460.rate
					tdisg462.ratf = tdisg460.ratf
					tdisg462.ccur = tdisg460.ccur
					db.insert(ttdisg462,db.retry,e)
				endselect
			endif
			commit.transaction()
		endselect
	endselect
}
function forward_to_project()
{
	select	tdisg460.*
	from	tdisg460 for update
	where	tdisg460._index1 = {:tdisg460.reqn,:tdisg460.orno}
	and	tdisg460.stat in(1,6)
	selectdo
| 		tdisg460.stat = ltoe(4)
		tdisg460.stat = tdisg.rest.pending
		tdisg460.stdt = utc.num()
		db.update(ttdisg460,db.retry,e)
		select	tdisg461.*
		from	tdisg461
		where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
		selectdo
			select	tdisg462.*
			from	tdisg462
			where	tdisg462._index1 = {:tdisg461.reqn,:tdisg461.orno,:tdisg461.pono,:tdisg461.sqnb,:tdisg461.indn,:tdisg461.indl,:tdisg460.stdt}
			selectdo
			selectempty
				tdisg462.reqn = tdisg461.reqn
				tdisg462.orno = tdisg461.orno
				tdisg462.pono = tdisg461.pono
				tdisg462.sqnb = tdisg461.sqnb
				tdisg462.indn = tdisg461.indn
				tdisg462.indl = tdisg461.indl
				tdisg462.amti = tdisg461.amti
				tdisg462.indv = tdisg461.indv
				tdisg462.dpov = tdisg461.dpov
				tdisg462.aamt = tdisg461.aamt
				tdisg462.reby = tdisg460.reby
				tdisg462.reon = tdisg460.reon
				tdisg462.stat = tdisg460.stat
				tdisg462.stdt = tdisg460.stdt
				tdisg462.rem1 = tdisg460.rem1
				tdisg462.rem2 = tdisg460.rem2
				tdisg462.cprj = tdisg461.cprj
				tdisg462.cspa = tdisg461.cspa
				tdisg462.updt = logname$
				tdisg462.upno = utc.num()
				tdisg462.rate = tdisg460.rate
				tdisg462.ratf = tdisg460.ratf
				tdisg462.ccur = tdisg460.ccur
				db.insert(ttdisg462,db.retry,e)
			endselect
		endselect
	endselect
	commit.transaction()
	send.email.alert()
}
function cancel_data()
{
	select	tdisg460.*
	from	tdisg460 for update
	where	tdisg460._index1 = {:tdisg460.reqn,:tdisg460.orno}
	selectdo
		tdisg460.stat = ltoe(5)
		tdisg460.stdt = utc.num()
		db.update(ttdisg460,db.retry,e)
		select	tdisg461.*
		from	tdisg461
		where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
		selectdo
			select	tdisg462.*
			from	tdisg462
			where	tdisg462._index1 = {:tdisg461.reqn,:tdisg461.orno,:tdisg461.pono,:tdisg461.sqnb,:tdisg461.indn,:tdisg461.indl,:tdisg460.stdt}
			selectdo
			selectempty
				tdisg462.reqn = tdisg460.reqn
				tdisg462.orno = tdisg460.orno
				tdisg462.pono = tdisg461.pono
				tdisg462.sqnb = tdisg461.sqnb
				tdisg462.indn = tdisg461.indn
				tdisg462.indl = tdisg461.indl
				tdisg462.amti = tdisg461.amti
				tdisg462.indv = tdisg461.indv
				tdisg462.dpov = tdisg461.dpov
				tdisg462.aamt = tdisg461.aamt
				tdisg462.reby = tdisg460.reby
				tdisg462.reon = tdisg460.reon
				tdisg462.stat = tdisg460.stat
				tdisg462.stdt = tdisg460.stdt
				tdisg462.rem1 = tdisg460.rem1
				tdisg462.rem2 = tdisg460.rem2				
				tdisg462.cprj = tdisg461.cprj
				tdisg462.cspa = tdisg461.cspa
				tdisg462.updt = logname$
				tdisg462.upno = utc.num()
				tdisg462.rate = tdisg460.rate
				tdisg462.ratf = tdisg460.ratf
				tdisg462.ccur = tdisg460.ccur
				db.insert(ttdisg462,db.retry,e)
			endselect
		selectempty
			tdisg462.reqn = tdisg460.reqn
			tdisg462.orno = tdisg460.orno
			tdisg462.pono = 0
			tdisg462.sqnb = 0
			tdisg462.indn = ""
			tdisg462.indl = 0
			tdisg462.amti = 0
			tdisg462.indv = 0
			tdisg462.dpov = 0
			tdisg462.aamt = 0
			tdisg462.reby = tdisg460.reby
			tdisg462.reon = tdisg460.reon
			tdisg462.stat = tdisg460.stat
			tdisg462.stdt = tdisg460.stdt
			tdisg462.rem1 = tdisg460.rem1
			tdisg462.rem2 = tdisg460.rem2				
			tdisg462.cprj = ""
			tdisg462.cspa = ""
			tdisg462.updt = logname$
			tdisg462.upno = utc.num()
			tdisg462.rate = tdisg460.rate
			tdisg462.ratf = tdisg460.ratf
			tdisg462.ccur = tdisg460.ccur
			db.insert(ttdisg462,db.retry,e)			
		endselect
	endselect
	commit.transaction()
	send.email.alert()
}

function check.data()
{
	flag = 0
	select	tdpur400.hdst
	from	tdpur400
	where	tdpur400._index1 = {:orno.f}
| 	and	tdpur400.impo.l = 2
	and	tdpur400.hdst = 5
	selectdo
		select	tdpur401.*
		from	tdpur401
		where	tdpur401._index1 = {:orno.f}
		selectdo
			select	tdpur402.rqno,tdpur402.rqpo
			from	tdpur402
			where	tdpur402._index1 = {:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb}
			selectdo
				select	tdisg461.reqn
				from	tdisg461,tdisg460
				where	tdisg461._index3 = {:tdpur402.rqno,:tdpur402.rqpo}
				and	tdisg460.stat in (1,6)
				and	tdisg461.reqn refers to tdisg460
				selectdo
					message("Request No %s already generated against this Indent Line and is pending for approval",tdisg461.reqn)
					flag = 0
				selectempty
					select	tdpur201.oamt
					from	tdpur201
					where	tdpur201._index1 = {:tdpur402.rqno,:tdpur402.rqpo}
					selectdo
					selectempty
						tdpur201.oamt = 0
					endselect
					get.exchage.rate()
					if tdpur401.oamt*(tcmcs008.rate/tcmcs008.ratf) > (tdpur201.oamt+get_amnt()) then
						flag = 1
					endif
				endselect
			endselect
		endselect
	endselect
}
function delete_data()
{
	select	tdisg461.*
	from	tdisg461 for update
	where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
	selectdo
		db.delete(ttdisg461,db.retry,e)
	endselect
	commit.transaction()

}
function update_data()
{
	delete_data()
	select	tdpur401.*
	from	tdpur401
	where	tdpur401._index1 = {:tdisg460.orno}
	selectdo
		select	tdpur402.rqno,tdpur402.rqpo
		from	tdpur402
		where	tdpur402._index1 = {:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb}
		selectdo
			select	tdpur201.oamt
			from	tdpur201
			where	tdpur201._index1 = {:tdpur402.rqno,:tdpur402.rqpo}
			selectdo
			selectempty
				tdpur201.oamt = 0
			endselect
			if (tdpur401.oamt*(tdisg460.rate/tdisg460.ratf)) > (tdpur201.oamt+get_amnt()) then
				select	tdisg461.*
				from	tdisg461
				where	tdisg461._index1 = {:tdisg460.reqn,:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb,:tdpur402.rqno,:tdpur402.rqpo}
				selectdo
				selectempty
					tdisg461.reqn = tdisg460.reqn
					tdisg461.orno = tdpur401.orno
					tdisg461.pono = tdpur401.pono
					tdisg461.sqnb = tdpur401.sqnb
					tdisg461.indn = tdpur402.rqno
					tdisg461.indl = tdpur402.rqpo
					tdisg461.indv = tdpur201.oamt
					tdisg461.dpov = tdpur401.oamt*(tdisg460.rate/tdisg460.ratf)
					tdisg461.aamt = get_amnt()
					tdisg461.amti = ((tdpur401.oamt*(tdisg460.rate/tdisg460.ratf))-(tdpur201.oamt+tdisg461.aamt))
					tdisg461.cprj = tdpur401.cprj
					tdisg461.cspa = tdpur401.cspa					
					db.insert(ttdisg461,db.retry,e)
				endselect
				tdisg462.upno = utc.num()
				select	tdisg462.*
				from	tdisg462
				where	tdisg462._index1 = {:tdisg460.reqn,:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb,:tdisg461.indn,:tdisg461.indl,:tdisg462.upno}
				selectdo
				selectempty
					tdisg462.reqn = tdisg460.reqn
					tdisg462.orno = tdisg460.orno
					tdisg462.pono = tdisg461.pono
					tdisg462.sqnb = tdisg461.sqnb
					tdisg462.indn = tdisg461.indn
					tdisg462.indl = tdisg461.indl
					tdisg462.amti = tdisg461.amti
					tdisg462.indv = tdisg461.indv
					tdisg462.dpov = tdisg461.dpov
					tdisg462.aamt = tdisg461.aamt
					tdisg462.reby = tdisg460.reby
					tdisg462.reon = tdisg460.reon
					tdisg462.stat = tdisg460.stat
					tdisg462.stdt = tdisg460.stdt
					tdisg462.rem1 = tdisg460.rem1
					tdisg462.rem2 = tdisg460.rem2
					tdisg462.cprj = tdisg461.cprj
					tdisg462.cspa = tdisg461.cspa
					tdisg462.updt = logname$
					tdisg462.upno = utc.num()
					tdisg462.rate = tdisg460.rate
					tdisg462.ratf = tdisg460.ratf
					tdisg462.ccur = tdisg460.ccur
					db.insert(ttdisg462,db.retry,e)
				endselect
			endif
			commit.transaction()
		selectempty
| 			tdisg462.upno = utc.num()	|ticket no - 7787
| 			select	tdisg462.*
| 			from	tdisg462
| 			where	tdisg462._index1 = {:tdisg460.reqn,:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb,:tdisg461.indn,:tdisg461.indl,:tdisg462.upno}
| 			selectdo
| 			selectempty
| 				tdisg462.reqn = tdisg460.reqn
| 				tdisg462.orno = tdisg460.orno
| 				tdisg462.pono = 0
| 				tdisg462.sqnb = 0
| 				tdisg462.indn = ""
| 				tdisg462.indl = 0
| 				tdisg462.amti = 0
| 				tdisg462.indv = 0
| 				tdisg462.dpov = 0
| 				tdisg462.aamt = 0
| 				tdisg462.reby = tdisg460.reby
| 				tdisg462.reon = tdisg460.reon
| 				tdisg462.stat = tdisg460.stat
| 				tdisg462.stdt = tdisg460.stdt
| 				tdisg462.rem1 = tdisg460.rem1
| 				tdisg462.rem2 = tdisg460.rem2
| 				tdisg462.cprj = ""
| 				tdisg462.cspa = ""
| 				tdisg462.updt = logname$
| 				tdisg462.upno = utc.num()
| 				tdisg462.rate = tdisg460.rate
| 				tdisg462.ratf = tdisg460.ratf
| 				tdisg462.ccur = tdisg460.ccur
| 				db.insert(ttdisg462,db.retry,e)
| 			endselect
| 			commit.transaction()			|ticket no - 7787		
		endselect
	selectempty
| 		tdisg462.upno = utc.num()		|ticket no - 7787
| 		select	tdisg462.*
| 		from	tdisg462
| 		where	tdisg462._index1 = {:tdisg460.reqn,:tdpur401.orno,:tdpur401.pono,:tdpur401.sqnb,:tdisg461.indn,:tdisg461.indl,:tdisg462.upno}
| 		selectdo
| 		selectempty
| 			tdisg462.reqn = tdisg460.reqn
| 			tdisg462.orno = tdisg460.orno
| 			tdisg462.pono = tdisg461.pono
| 			tdisg462.sqnb = tdisg461.sqnb
| 			tdisg462.indn = tdisg461.indn
| 			tdisg462.indl = tdisg461.indl
| 			tdisg462.amti = tdisg461.amti
| 			tdisg462.indv = tdisg461.indv
| 			tdisg462.dpov = tdisg461.dpov
| 			tdisg462.aamt = tdisg461.aamt
| 			tdisg462.reby = tdisg460.reby
| 			tdisg462.reon = tdisg460.reon
| 			tdisg462.stat = tdisg460.stat
| 			tdisg462.stdt = tdisg460.stdt
| 			tdisg462.rem1 = tdisg460.rem1
| 			tdisg462.rem2 = tdisg460.rem2
| 			tdisg462.cprj = tdisg461.cprj
| 			tdisg462.cspa = tdisg461.cspa
| 			tdisg462.updt = logname$
| 			tdisg462.upno = utc.num()
| 			tdisg462.rate = tdisg460.rate
| 			tdisg462.ratf = tdisg460.ratf
| 			tdisg462.ccur = tdisg460.ccur
| 			db.insert(ttdisg462,db.retry,e)
| 		endselect
| 		commit.transaction()				|ticket no - 7787
	endselect
}
function domain	tcamnt get_amnt()
{
	domain	tcamnt	amti.var,amti
	domain	tcorno	reqn.var
	amti.var = 0
	select	tdisg461.amti:amti,tdisg461.reqn:reqn.var
	from	tdisg461,tdisg460
	where	tdisg461._index3 = {:tdpur402.rqno,:tdpur402.rqpo}
	and	tdisg460.stat = 2
	and	tdisg461.reqn refers to tdisg460
	selectdo
		amti.var = amti.var + amti
	endselect
	return(amti.var)
}
function send.email.alert()
{
	string tmp.file(200),line(500)
	long fp
	domain tcemno	emno.code
	domain	tfgld.user	user.code
	
	long    message.ID
        long    to.ID
        long    attachment.ID
        long    ret

	double	amount
	domain	tccprj	cprj
        domain	ttcmf.prov service
        long stat       
        long mid        
	domain  ttaad.user       server.user
	domain  tcdate           server.time

	server.user = logname$
	server.time = utc.num()	

	select	tdisg461.indn
	from	tdisg461
	where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
	as set with 1 rows
	selectdo
		select	tdpur200.remn
		from	tdpur200
		where	tdpur200._index1 = {:tdisg461.indn}
		selectdo
			select 	tccom001.nama
			from 	tccom001
			where 	tccom001._index1 = {:tdpur200.remn}
			as set with 1 rows
			selectdo
			endselect
		endselect
	endselect
	
	tmp.file = bse.tmp.dir$()
	body.attachment = strip$(tmp.file) &"/Body"&server.user&".html"
	file.ret = seq.open(body.attachment , "w+")
	if file.ret <=0 then
		message("Temp file can not be created")
	endif
	
	line = "" 
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<p1>","Request " & tdisg460.reqn & " has been sent for your approval.","<br><br>","</p1>")
	fp = seq.puts(line , file.ret)
		
	line = concat$("	","<p1>","Requster Remarks :" & trim$(tdisg460.rem1),"<br><br>","</p1>")
	fp = seq.puts(line , file.ret)	

	line = concat$("	","<p1>","Request Detail -","<br><br>","</p1>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<table","border=","1"," >")
	fp = seq.puts(line , file.ret)
	
	
	line = concat$("	","<tr>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Indent No.","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Line No.","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","PO No.","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Line No.","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Project","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Description","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Element","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Description","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Item","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Description","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Indent Amount","</th>")
	fp = seq.puts(line , file.ret)

	line = concat$("	","<th align =left>","PO Amount","</th>")
	fp = seq.puts(line , file.ret)
	
	line = concat$("	","<th align =left>","Amount to increase","</th>")
	fp = seq.puts(line , file.ret)

	line = concat$("	","</tr>")
	fp = seq.puts(line , file.ret)
	
	fp = seq.puts(line , file.ret)
	select	tdisg461.*,tcmcs052.dsca,tppdm090.desc
	from	tdisg461,tcmcs052,tppdm090
	where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
	and	tdisg461.cprj refers to tcmcs052
	and	tdisg461.cspa refers to tppdm090
	selectdo
		select	tdpur201.item,tcibd001.dsca
		from	tdpur201,tcibd001
		where	tdpur201._index1 = {:tdisg461.indn,:tdisg461.indl}
		and	tdpur201.item refers to tcibd001
		selectdo
		selectempty
			tdpur201.item = ""
			tcibd001.dsca = ""
		endselect
		
		line = concat$("	","<tr>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.indn,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.indl,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.orno,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.pono,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.cprj,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tcmcs052.dsca,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.cspa,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tppdm090.desc,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdpur201.item,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tcibd001.dsca,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.indv,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.dpov,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","<th align =left>",tdisg461.amti,"</th>")
		fp = seq.puts(line , file.ret)
		
		line = concat$("	","</tr>")
		fp = seq.puts(line , file.ret)
		
		fp = seq.puts(line , file.ret)
	endselect

	line = concat$("	","</table>","<br><br>")
	fp = seq.puts(line , file.ret)

	line = concat$("	","<p1>","Note - This is an autogenerated e-mail.","</p1>")
	fp = seq.puts(line , file.ret)
	
	fp = seq.close(file.ret)
	
	user.code = logname$
	select	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:user.code}
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
	selectempty
		bpmdm001.mail = ""
	endselect
	if isspace(bpmdm001.mail) then
		message("Email ID for user " & user.code & " Not maintained")
	endif		
	|******* Email Header
        message.ID = cmf.create()
	line = "Indent Value Increase request " & tdisg461.indn 
        ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        ret = cmf.setSubject(message.ID,line)
	
	|******** from ID
| 	bpmdm001.mail = "veena.pawar@isgec.co.in"		|for testing
	to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	ret = cmf.setRecipientName(to.ID,tccom001.nama)
        ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	ret = cmf.setRecipientType(to.ID, "SMTP")
	ret = cmf.setRecipientResponsibility(to.ID, "TRUE")
| 	|******** CC ID
| 	bpmdm001.mail = "sanjeev.kumar@techvikas.com"		|for testing
| 	to.ID = cmf.createRecipient(message.ID, ttcmf.role.cc)  
| 	ret = cmf.setRecipientName(to.ID,tccom001.nama)
|       ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
| 	ret = cmf.setRecipientType(to.ID, "SMTP")
| 	ret = cmf.setRecipientResponsibility(to.ID, "TRUE")
|********cc list**************************
	create.cc.list()
	
	cc.mail.len = len(trim$(cc.mail))
	cc.comma.pos = pos(cc.mail,",")	
	cc.mail.name.len = len(trim$(cc.mail.name))
	cc.comma.name.pos = pos(cc.mail.name,",")
	
	while (cc.comma.pos<>0)
		recipient.mail = ""
		recipient.name = ""
		mail.name.len = len(trim$(cc.mail.name))
		cc.comma.name.pos = pos(cc.mail.name,",")
		recipient.name = trim$(cc.mail.name(1;(cc.comma.name.pos-1)))
		recipient.mail = trim$(cc.mail(1;(cc.comma.pos-1)))
		
		cc.ID = cmf.createRecipient(message.ID, ttcmf.role.cc)
		ret = cmf.setRecipientName(cc.ID, recipient.name)
		ret = cmf.setRecipientAddress(cc.ID,recipient.mail)
	        ret = cmf.setRecipientType(cc.ID, "SMTP")
	        ret = cmf.setRecipientResponsibility(cc.ID, "TRUE")
	        
	        cc.mail = cc.mail((cc.comma.pos+1);cc.mail.len)
	        cc.mail.len = len(trim$(cc.mail))
		cc.comma.pos = pos(cc.mail,",")
		
		cc.mail.name = cc.mail.name((cc.comma.name.pos+1);cc.mail.name.len)
	        cc.mail.name.len = len(trim$(cc.mail.name))
		cc.comma.name.pos = pos(cc.mail.name,",")
	endwhile
	
	select	tdisg460.reby
	from	tdisg460
	where	tdisg460._index1 = {:tdisg460.reqn,:tdisg460.orno}
	selectdo
		select	tccom001.nama,bpmdm001.mail
		from	tccom001,bpmdm001
		where	tccom001._index4 = {:tdisg460.reby}
		and	tccom001.emno refers to bpmdm001
		selectdo
			cc.ID = cmf.createRecipient(message.ID,ttcmf.role.cc)
			ret = cmf.setRecipientName(cc.ID,trim$(tccom001.nama))
			ret = cmf.setRecipientAddress(cc.ID,trim$(bpmdm001.mail))
			ret = cmf.setRecipientType(cc.ID,"SMTP")
			ret = cmf.setRecipientResponsibility(cc.ID,"TRUE")
		selectempty
		endselect
	selectempty
	endselect
	
	select	tdisg461.indn
	from	tdisg461
	where	tdisg461._index1 = {:tdisg460.reqn,:tdisg460.orno}
	group by tdisg461.indn
	selectdo
		select	tdpur200.remn
		from	tdpur200
		where	tdpur200._index1 = {:tdisg461.indn}
		selectdo
			select 	bpmdm001.mail,tccom001.nama 
			from 	tccom001,bpmdm001
			where 	tccom001._index1 = {:tdpur200.remn}
			and	tccom001.emno refers to bpmdm001
			as set with 1 rows
			selectdo
			selectempty
				bpmdm001.mail = ""
			endselect
| 			bpmdm001.mail = "randev.katoch@techvikas.com"		|for testing
			if isspace(bpmdm001.mail) then
				message("Email ID for Buyer " & tdpur200.ccon & " Not maintained")
			else
				to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
				ret = cmf.setRecipientName(to.ID,tccom001.nama)
				ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
				ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
				ret = cmf.setRecipientType(to.ID, "SMTP")
				ret = cmf.setRecipientResponsibility(to.ID, "TRUE")				
			endif
		endselect
	endselect
	
	|********* Mail Body	
	attachment.ID = cmf.createAttachment(message.ID)
	ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	ret = cmf.setAttachmentMIME(attachment.ID,"text/html")                       
	ret = cmf.setAttachmentFileName(attachment.ID,body.attachment)

	|*********  Send mail
        if message.ID <>0 then
                stat = cmf.startService("SMTP",2)
                if stat<>0 then
                        message("Message could not be sent "&
                                "(Infor ERP Enterprise eMessage Connector"&
                                " service did not start)")
                endif
                stat = cmf.send(message.ID,"SMTP")
                if stat<>0 then
                        message("Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&"service refused message)")
                        cmf.stopService("SMTP",2)
                endif
                stat = cmf.stopService("SMTP",2)
        endif
}
function check_project()
{
	domain	tccprj	cprj.var
	cprj.var = ""
	diff.cprj = 0
	select	tdpur401.cprj
	from	tdpur401
	where	tdpur401._index1 = {:tdpur400.orno}
	group by tdpur401.cprj
	selectdo
		diff.cprj = diff.cprj + 1
	selectempty
	endselect

}

function create.cc.list()	|#
{
	cc.mail.name = " "
	cc.mail = " "
	
	select	tdisg461.cprj
	from	tdisg461
	where	tdisg461._index1 = {:tdisg460.reqn}
	as set with 1 rows
	selectdo
		select	tppdm649.emno
		from	tppdm649
		where	tppdm649._index1 = {:tdisg461.cprj}
		and	tppdm649.cres(1;1) = "P"
		selectdo
			select	bpmdm001.mail,tccom001.nama
			from	bpmdm001,tccom001
| 			where	bpmdm001._index1 = {:tppdm649.emno}
			where	tccom001._index4 = {:tppdm649.emno}
| 			and	bpmdm001.emno refers to tccom001 
			and	tccom001.emno refers to bpmdm001
			selectdo
				cc.mail.name = cc.mail.name & strip$(tccom001.nama) & ","
				cc.mail = cc.mail & strip$(bpmdm001.mail) & ","
			endselect
		selectempty
		endselect
	endselect

}

function get.exchage.rate()
{
	domain tcncmp	curr.comp
	domain tcdate	curr.date
	curr.comp = get.compnr()
	curr.date = utc.num()
	
	select	tcemm170.fcua,tcemm170.expu
	from	tcemm170
	where	tcemm170._index1 = {:curr.comp}
	as set with 1 rows
	selectdo
	selectempty
		tcemm170.fcua = ""
		tcemm170.expu = ""
	endselect
	select	tcmcs008.rate,tcmcs008.ratf,tcmcs008.stdt
	from	tcmcs008
	where	tcmcs008._index1 = {:tcemm170.fcua,:pur.ccur,:pur.ratt}
	and	tcmcs008.stdt <= :curr.date
	and	tcmcs008.rapr = 1
	order by tcmcs008.stdt desc
	as set with 1 rows
	selectdo
	selectempty
		tcmcs008.rate = 1
		tcmcs008.ratf = 1
	endselect
	
	
}
