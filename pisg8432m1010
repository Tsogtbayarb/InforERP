|******************************************************************************
|* tdisg8432m100  0  VRC B61U a7 live
|* Purchase to Sale Register [Stock]
|* Installation user             
|* 2014-10-09
|******************************************************************************
|* Main table tdisg832 Billing Advice Lines, Form Type 4
|******************************************************************************
|* ISGEC001124, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 27-10-2014
|* Sent To Supplier, Location, Sub Contracting PO, Project
|* 
|* ISGEC001137, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 30-10-2014
|* Add column Transfer Order- Issue Date
|*
|* ISGEC001189, IT0205, Arjit Gupta, VRC B61U a7 isg, Dt. 20-12-2014
|* Incase of FOC/FIV only print Code not enum
|* Description as suggested by Mr. Nishant Verma.
|*
|* PATCH001022, Dharmendra, 13-03-2015
|****************************** declaration section ***************************
declaration:

	table	ttdisg832 | Billing Advice Lines
	table	ttdisg831
	table	ttdpur400
	table	ttdpur401
	table	twhinh310
	table	twhinh312
	table	ttfacp935
	table	twhinh936
	table	ttcibd001
	table	ttccom100
	table	ttccom130
	table	ttccom139
	table	ttctax941
	table	ttcmcs036
	table	ttcmcs032
	table	ttpisg039
	table	ttdisg867
	table	ttppdm740
	table	ttppin020
	table	tcisli235
	table	tciisg000
	table	ttfisg001
	table	ttfisg002
	table	ttfisg003
	table	ttfacr200
	table	ttfacp100
	table	twhisg312
	table	ttdisg867		|#ISGEC001124.n
	table	twhinr110		|#ISGEC001137.n

	|******************* Form Variables ****************
	extern	domain	tccprj		cprj.f
	extern	domain	tccprj		cprj.t
	extern	domain	tcorno		orno.f    fixed
	extern	domain	tcorno		orno.t    fixed
	extern	domain	tcdate		odat.f	
	extern	domain	tcdate		odat.t	
	extern	domain	tcorno		edrn.f    fixed
	extern	domain	tcorno		edrn.t    fixed
	extern	domain	tcdate		rcdt.f
	extern	domain	tcdate		rcdt.t
	extern	domain	tccom.bpid	suno.f
	extern	domain	tccom.bpid	suno.t
	extern	domain	tcyesno		all.rcpt
	extern	domain	tcyesno		rcpt.conf
	extern	domain	tcyesno		only.stck
	extern	domain	tpproj.type	var.type
	extern	domain	tdrcpt.type	rcpt.type
	extern	domain	tdyesno		var.ptrn
	extern	domain	tdyesno		sale.invn
	extern	domain	tdyesno		acnt.voch
	
	|*************** File Handling Variables *******************
	string		str(300), err.file(100), file.name(100), line3(3000), line4(3000)
	long		ret2, stat.fp
	
	|******************* Script Variables ***************
	extern	domain	tcdate		v.odat.f
	extern	domain	tcdate		v.odat.t
	extern	domain	tcdate		v.rcdt.f
	extern	domain	tcdate		v.rcdt.t
	extern	domain	tcbool		fwhinh936.found
	extern	domain	whinh.lstc	lsta.f
	extern	domain	whinh.lstc	lsta.t
	extern	domain	tcccty		ccty.f
	extern	domain	tcccty		ccty.t
	extern	domain	tcccty		ccty.exp
	extern	domain	tcccur		ccur.f
	extern	domain	tcccur		ccur.t
	extern	domain	tcccur		ccur.exp
		domain	tcbool		not.found
		domain	tcbool		foc.found
	|************** File Utilization Variables ******************
	extern	domain	tccprj		rep.bprj			|1
	extern	domain	tcdsca		rep.bpdc			|2	
	extern	domain	tcmcs.str10	rep.bptp			|3	
	extern	domain	tfgld.ttyp	rep.tptr			|4
	extern	domain	tfgld.docn	rep.dptr			|4				
	extern	domain	tcmcs.str12	rep.ptrn			|4				
	extern	domain	tcmcs.str10	rep.ptdt			|5
	extern	domain	tcmcs.str5	rep.ptfy			|6
	extern	domain	tcmcs.str2	rep.ptfp			|7
	extern	domain	tcorno		rep.born			|8
	extern	domain	tcmcs.str10	rep.odat			|9	
	extern	domain	tccom.bpid	rep.bsup			|10				
	extern	domain	tcnama		rep.bsnm			|11
	extern	domain	tcmcs.str10	rep.rtyp			|12
	extern	domain	whinh.shpm	rep.rcno			|13
	extern	domain	tcpono		rep.rcln			|14
	extern	domain	tcmcs.str10	rep.rcdt			|15
	extern	domain	tcmcs.str15	rep.rstt			|16
	extern	domain	tfacp.isup	rep.isup			|17
	extern	domain	tcmcs.str10	rep.isdt			|18				
	extern	domain	tcdsca		rep.grno			|19				
	extern	domain	tcmcs.str10	rep.grdt			|20				
	extern	domain	tcdsca		rep.fmst			|21				
	extern	domain	tcdsca		rep.tost			|22				
	extern	domain	tcitem		rep.item			|23
	extern	domain	tcdsca		rep.itdsc			|24
	extern	domain	tcdsca		rep.kitm			|25			|#ISGEC001137.n
	extern	domain	tcqiv1		rep.qnty			|26	
	extern	domain	tcamnt		rep.rprc			|27	
	extern	domain	tcamnt		rep.rbmt			|28	
	extern	domain	tcamnt		rep.rexc			|29	
	extern	domain	tcamnt		rep.rcst			|30	
	extern	domain	tcamnt		rep.rvat			|31	
	extern	domain	tcamnt		rep.rsrv			|32	
	extern	domain	tcamnt		rep.roth			|33	
	extern	domain	tcamnt		rep.bamt			|34
	extern	domain	tcorno		rep.edrn			|35
	extern	domain	tcdsca		rep.stat			|36	
	extern	domain	tccom.bpid	rep.cuno			|37
	extern	domain	tcnama		rep.cnnm			|38
	extern	domain	tcdsca		rep.blno			|39
	extern	domain	tcmcs.str10	rep.bldt			|40
	extern	domain	tcmcs.str12	rep.cinv			|41
	extern	domain	tcmcs.str10	rep.cidt			|42
	extern	domain	tcmcs.str12	rep.sinv			|43
	extern	domain	tcmcs.str10	rep.sidt			|44
	extern	domain	tcmcs.str5	rep.slfy			|45
	extern	domain	tcmcs.str2	rep.slfp			|46
	extern	domain	tcamnt		rep.bval			|47
	extern	domain	tcamnt		rep.ed.reim			|48
	extern	domain	tcamnt		rep.cst.reim			|49
	extern	domain	tcamnt		rep.fgt.reim			|50
	extern	domain	tcamnt		rep.misc.claim			|51
	extern	domain	tcamnt		rep.cstm			|52
	extern	domain	tcamnt		rep.vatm			|53
	extern	domain	tcamnt		rep.serv			|54
	extern	domain	tcamnt		rep.sale			|55
	extern	domain	tcdsca		rep.loca			|56
	extern	domain	tccom.bpid	rep.fsup			|57		|#ISGEC001124.n
	extern	domain	tcnama		rep.fsnm			|58		|#ISGEC001124.n
	extern	domain	tcdsca		rep.fcty			|59		|#ISGEC001124.n
	extern	domain	tcmcs.cste	rep.fstt			|59		|#ISGEC001124.n
	extern	domain	tcnama		rep.floc			|59		|#ISGEC001124.n
	extern	domain	tcorno		rep.forn			|60		|#ISGEC001124.n
	extern	domain	tccprj		rep.fprj			|61		|#ISGEC001124.n
	extern	domain	tcdsca		rep.fpdc			|62		|#ISGEC001124.n
	extern	domain	tcmcs.str10	rep.trdt			|63		|#ISGEC001137.n
	extern	domain	tfgld.date	cut.off.date
	extern	domain	tfgld.date	invoice.date
	extern	domain	tfgld.date	voucher.date					|# PATCH001022.n
	
	

|*************** Include **************
#include<bic_desktop>
|****************************** program section ********************************

before.display.object:
	|set.enable.disable.fields()
	disable.fields("rcdt.f")
|****************************** group section **********************************

group.1:
init.group:
	get.screen.defaults()

|****************************** choice section ********************************

choice.cont.process:
before.choice:
| 	if	all.rcpt = tcyesno.yes	or
| 		only.stck = tcyesno.yes	or
| 		rcpt.conf = tcyesno.yes	then
| 	else	
| 		message("Please Check All Receipt or All Confirm Receipt or Only Stock")
| 		choice.again()
| 	endif
	
	
on.choice:
	generate.file()


|****************************** field section *********************************
field.cprj.f:
when.field.changes:
	cprj.t = cprj.f
	
field.orno.f:
when.field.changes:
	orno.t = orno.f	
	
before.zoom:
	str = "tdpur400.orno in ("
	str = str & "select tdpur401.orno from tdpur401 where tdpur401._index5 inrange '" &cprj.f&"' and '"&cprj.t&"')"
	query.extend.where.in.zoom(str)
	
field.orno.t:
before.zoom:
	str = "tdpur400.orno in ("
	str = str & "select tdpur401.orno from tdpur401 where tdpur401._index5 inrange '" &cprj.f&"' and '"&cprj.t&"')"
	query.extend.where.in.zoom(str)	
	
field.odat.f:
when.field.changes:
	odat.t = odat.f	

field.edrn.f:
when.field.changes:
	edrn.t = edrn.f

| field.rcdt.f:
| before.display:
| 	rcdt.f = date.to.utc(2014,07,28,0,0,0)
	
| when.field.changes:
| 	rcdt.t = rcdt.f

| field.all.rcpt:
| when.field.changes:
| 	set.enable.disable.fields()
| 	
| field.only.stck:
| when.field.changes:
| 	set.enable.disable.fields()
| 	
| field.rcpt.conf:
| when.field.changes:
| 	set.enable.disable.fields()	
|****************************** function section ******************************

functions:

function generate.file()
{
	open.file()
	generate.header()
	read.main.table()
	close.file()
}

function read.main.table()
{
	domain	tfgld.date	tmp.isdt
	domain	tfgld.date	tmp.bldt
	domain	tcccty		tmp.ccty
	domain	tfgld.date	tmp.ptdt
	domain	tcmcs.cste	tmp.loca
	domain	tcamnt		tmp.st.reim, tmp.vat.reim, tmp.exc.amnt
	domain	tfgld.year	tmp.ptfy
	domain	tfgld.prod	tmp.ptfp
	
| 	rcdt.f = date.to.utc(2014,07,28,0,0,0)		|# PATCH001022.o
	rcdt.f = date.to.utc(2014,08,27,0,0,0)	|# PATCH001022.n
	put.default.values()
	get.date.utc(odat.f, 00, 00, 00, v.odat.f)
	get.date.utc(odat.t, 23, 59, 59, v.odat.t)
	get.date.utc(rcdt.f, 00, 00, 00, v.rcdt.f)
	get.date.utc(rcdt.t, 23, 59, 59, v.rcdt.t)
	get.cut.off.date(v.rcdt.t)
	
	get.filter.field()
	get.rcpt.type()
	
	db.set.to.default(twhinh312)
	db.set.to.default(ttdpur401)
	db.set.to.default(ttdpur400)
	db.set.to.default(ttcibd001)
	select	whinh312.rcno, whinh312.rcln, whinh312.psno, whinh312.lsta,
		whinh312.orno, whinh312.pono, whinh312.item, whinh312.qrec, 
		whinh312.ardt, tdpur401.cprj, tdpur400.otbp, tdpur400.odat,
		tcibd001.dsca, tcibd001.kitm						|#ISGEC001137.n
	from	whinh312, tdpur401, tdpur400, tcibd001
	where	whinh312._index4 inrange {whinh.oorg.purchase, :orno.f}	and
					{whinh.oorg.purchase, :orno.t}
	and	whinh312.ardt inrange :v.rcdt.f	and	:v.rcdt.t
	and	whinh312._index7 inrange {:lsta.f}	and	{:lsta.t}
	and	whinh312.item refers to tcibd001 Unref Clear
	and	whinh312.orno = tdpur401.orno 
	and	whinh312.pono = tdpur401.pono 
	and	whinh312.seqn = tdpur401.sqnb 
	and	tdpur401._index5 inrange {:cprj.f}	and	{:cprj.t}
	and	whinh312.orno refers to tdpur400
	and	tdpur400.odat inrange :v.odat.f	and	:v.odat.t
	and	tdpur400._index2 inrange {:suno.f}	and	{:suno.t}
	selectdo
		db.set.to.default(ttppdm740)
		select	tppdm740.ccur, tppdm740.ofbp, tppdm740.rtyp
		from	tppdm740
		where	tppdm740._index1 = {:tdpur401.cprj}
		and	(tppdm740.ccur	inrange :ccur.f	and	:ccur.t
		and	tppdm740.ccur <> :ccur.exp)
		selectdo
			invoice.date = 0
			invoice.date = 0
			tmp.ccty = ""
			not.found = false
			if	tppdm740.ccur = "INR"	then
				select	prj_tccom130.ccty:tmp.ccty
				from	tccom100 prj_tccom100, tccom130 prj_tccom130
				where	prj_tccom100._index1 = {:tppdm740.ofbp}
				and	prj_tccom100.cadr refers to prj_tccom130
				and	prj_tccom130.ccty inrange :ccty.f	and	:ccty.t
				and	prj_tccom130.ccty <> :ccty.exp
				selectdo
				selectempty
					not.found = true	
				endselect
				if	not.found	and var.type <> tpproj.type.both	then
					continue
				endif
			endif	
			Initialize_Variables()
			rep.bprj = tdpur401.cprj
			rep.bpdc = get.project.desc(tdpur401.cprj)
			if	(tmp.ccty = "IN ")	or
				(tppdm740.ccur = "INR")	then
				rep.bptp = "Domestic"
			else
				rep.bptp = "Export"
			endif	
			
			tmp.ptdt = 0
			select	ptr_tfacp251.ityp:rep.tptr,
				ptr_tfacp251.idoc:rep.dptr
			from	tfacp251 ptr_tfacp251
			where	ptr_tfacp251.rcno = :whinh312.rcno
			and	ptr_tfacp251.rseq = :whinh312.rcln
			as set with 1 rows
			selectdo
			endselect
			tmp.ptfy = 0
			tmp.ptfp = 0
			tfisg001.ncmp = 0
			select	tfisg001.ncmp
			from	tfisg001
			where	tfisg001._index1 = {:1}
			wherebind(1, lval(trim$(whinh312.psno)))
			selectdo
			endselect
			if	tfisg001.ncmp <> 0	then
				select	pt_tfacp200.docd:tmp.ptdt,
					pt_tfacp200.year:tmp.ptfy,
					pt_tfacp200.prod:tmp.ptfp
				from	tfacp200 pt_tfacp200
				where	pt_tfacp200._index1 = {:rep.tptr, :rep.dptr}
				and	pt_tfacp200.docn = 0
				and	pt_tfacp200._compnr = :tfisg001.ncmp
				selectdo
				endselect
			endif	
			if	rep.dptr <> 0	then
				rep.ptrn = rep.tptr & " " & str$(rep.dptr)
			endif
			if	tmp.ptdt <> 0	then
				rep.ptdt = sprintf$("%D(%02m/%02d/%04Y)", tmp.ptdt)
			endif
			if	tmp.ptfy <> 0	then
				rep.ptfy = str$(tmp.ptfy)
			endif
			if	tmp.ptfp <> 0	then
				rep.ptfp = str$(tmp.ptfp)
			endif	
			rep.born = whinh312.orno
			rep.odat = sprintf$("%u(%02m/%02d/%04Y)", tdpur400.odat)
			rep.bsup = tdpur400.otbp
			rep.bsnm = get.bp.name(tdpur400.otbp)
			rep.rtyp = "Warehouse"
			rep.rcno = whinh312.rcno
			rep.rcln = whinh312.rcln
			rep.rcdt = sprintf$("%u(%02m/%02d/%04Y)", whinh312.ardt)
			rep.rstt = enum.descr$("whinh.lstc", whinh312.lsta)
			tmp.isdt = 0
			select	sp_tfacp100.isup:rep.isup,
				sp_tfacp100.invd:tmp.isdt
			from	tfacp100 sp_tfacp100
			where	sp_tfacp100._index1 = {:1}
			wherebind(1, lval(trim$(whinh312.psno)))
			selectdo
			endselect
			if	tmp.isdt <> 0	then
				rep.isdt = sprintf$("%D(%02m/%02d/%04Y)", tmp.isdt)
			endif
			Get_gr_detail(whinh312.psno, rep.grno, rep.grdt, rep.fmst, rep.tost)	
			rep.item = whinh312.item
			rep.itdsc = tcibd001.dsca
			rep.kitm = enum.descr$("tckitm", tcibd001.kitm)		|#ISGEC001137.n
			tdisg.dll0002.Get_Warehouse_Receipt(whinh312.rcno, whinh312.rcln, rep.qnty, rep.rprc, rep.rbmt, rep.rexc,
							rep.rcst, rep.rvat, rep.rsrv, rep.roth, rep.bamt)
			db.set.to.default(ttdisg831)
			db.set.to.default(ttdisg832)
			select	tdisg832.*, tdisg831.cinv, tdisg831.type, tdisg831.stat,
				tdisg831.cind, tdisg831.bold, tdisg831.ofbp, tdisg831.prdt
			from	tdisg832, tdisg831
			where	tdisg832._index4 = {:whinh312.rcno, :whinh312.rcln}
			and	tdisg832.oorg = whinh.oorg.purchase
			and	tdisg832.orno = :whinh312.orno
			and	tdisg832.pono = :whinh312.pono
			and	tdisg832.edrn refers to tdisg831.edrn 
			and	tdisg831._index4 = {:tdpur401.cprj}
			order by tdisg832._index1
			selectdo
				rep.edrn = tdisg832.edrn
				rep.stat = enum.descr$("tdisg.stat", tdisg831.stat)
				rep.cinv = tdisg831.cinv
				rep.cidt = sprintf$("%D(%02m/%02d/%04Y)", tdisg831.cind)
				
				foc.found = false
				if	tdisg832.tobi = tcyesno.no	then
					foc.found = true
				endif
				
				tmp.bldt = 0
				select	tpisg039.ityp, tpisg039.idoc, tpisg039.sidt
				from	tpisg039
				where	tpisg039._index1 = {:tdpur401.cprj, :tdisg831.ofbp, :tdisg832.nins, :tdisg832.edrn, :tdisg832.rcno, :tdisg832.rcln}
				selectdo
				selectempty
					tpisg039.ityp = ""
					tpisg039.idoc = 0
					tpisg039.sidt = 0
				endselect
				if	tpisg039.sidt <> 0	then
					get.utc.to.date(tpisg039.sidt, tmp.bldt)
					invoice.date = tmp.bldt
					rep.sidt = sprintf$("%D(%02m/%02d/%04Y)", tmp.bldt)
				endif 
				tmp.ptfy = 0
				tmp.ptfp = 0
				if	tmp.bldt <> 0	then
					get.fiscal.year.period(tmp.bldt, tmp.ptfy, tmp.ptfp)
				else	
					get.fiscal.year.period(tdisg831.cind, tmp.ptfy, tmp.ptfp)
				endif
				if	tmp.ptfy <> 0	then
					rep.slfy = str$(tmp.ptfy)
				endif
				if	tmp.ptfp <> 0	then
					rep.slfp = str$(tmp.ptfp)
				endif
				tmp.bldt = 0
				if	tdisg831.type = tdisg.type.domestic	then
					if	tpisg039.idoc <> 0	then
						rep.sinv = tpisg039.ityp & " " & str$(tpisg039.idoc)
					endif
				else
					if	isspace(tdisg831.bold)	and
						(tdisg831.stat = tdisg.stat.process)then
						if	tpisg039.idoc <> 0	then
							rep.sinv = tpisg039.ityp & " " & str$(tpisg039.idoc)
						else
| 							rep.sinv = enum.descr$("whreas.type", get.reason.type(tdisg832.reas))	|#ISGEC001189.o
							rep.sinv = tdisg832.reas		|#ISGEC001189.n
						endif
					else	
						if	tpisg039.idoc <> 0	then
							rep.sinv = tpisg039.ityp & " " & str$(tpisg039.idoc)
						endif
						select	bl_tdisg839.biln:rep.blno,
							bl_tdisg839.pddt:tmp.bldt
						from	tdisg839 bl_tdisg839
						where	bl_tdisg839._index1 = {:tdisg831.bold}
						selectdo
						endselect
						if	tmp.bldt <> 0	then
							rep.bldt = sprintf$("%D(%02m/%02d/%04Y)", tmp.bldt)
						endif
					endif	
				endif
				if	foc.found	then	
| 					rep.sinv = enum.descr$("whreas.type", get.reason.type(tdisg832.reas))		|#ISGEC001189.o
					rep.sinv = tdisg832.reas			|#ISGEC001189.n
				endif	
				|select	cu_cisli205.ofbp:rep.cuno,
				|	cu_tccom100.nama:rep.cnnm,
				tmp.loca = ""
				select	cu_tctax940.stpv:tmp.loca
				from	cisli205 cu_cisli205,
					tccom100 cu_tccom100,	
					tctax940 cu_tctax940
				where	cu_cisli205.ityp = :tpisg039.ityp
				and	cu_cisli205.idoc = :tpisg039.idoc
				and	cu_cisli205.ofbp refers to cu_tccom100 Unref Clear	
				and	cu_cisli205.rnso.l refers to cu_tctax940 Unref Clear
				selectdo
				endselect
				
				rep.cuno = tppdm740.ofbp
				rep.cnnm = get.bp.name(tppdm740.ofbp)
				get.state.desc("IN ", tmp.loca, rep.loca)	
				tmp.st.reim = 0
				tmp.vat.reim = 0
				Get_Sale_Data(tdisg832.edrn, whinh312.rcno, whinh312.rcln, tdpur401.cprj,
						tppdm740.ofbp, tppdm740.ccur, tppdm740.rtyp, rep.bval,
						rep.ed.reim, tmp.st.reim, rep.cst.reim, tmp.vat.reim, rep.fgt.reim,
						tmp.exc.amnt, rep.serv, rep.cstm, rep.vatm)
				rep.misc.claim = tmp.st.reim + tmp.vat.reim		
| 				Get_Sale_Detail(tdpur401.cprj, tpisg039.ityp, tpisg039.idoc, 0, utc.num(),
| 						tmp.indt, rep.cuno, rep.cnnm, tmp.bamt, tmp.samt, rep.ed.reim,
| 						tmp.st.reim, rep.cst.reim, tmp.vat.reim, rep.fgt.reim, tmp.gr.val,
| 						tmp.advn, tmp.retn, tmp.nt.val)	
							|#ISGEC001124.sn
				if	tdisg832.tobi = tcyesno.no	and
					(get.reason.type(tdisg832.reas) = whreas.type.free.vendor or
					get.reason.type(tdisg832.reas) =  whreas.type.stock)	then
					get.sent.to.details(tdisg832.edrn, tdisg832.rcno, tdisg832.rcln,
							rep.fsup, rep.fsnm, rep.fcty, rep.fstt, rep.floc,
							rep.forn, rep.fprj, rep.fpdc)
				endif	
							|#ISGEC001124.en
										|#ISGEC001137.sn
				whinr110.trdt = 0
				select	whinr110.trdt
				from	whinr110
				where	whinr110._index3 = {:tdpur401.cprj, 200, tckoor.project.man, :tdisg832.worn, :tdisg832.wlin}
				and	whinr110.kost = tckost.issue
				selectdo
				endselect
				
				if	whinr110.trdt <> 0	then
					rep.trdt = sprintf$("%u(%02m/%02d/%04Y)", whinr110.trdt)
				endif	
										|#ISGEC001137.en
			endselect
			rep.sale = (rep.bval + rep.ed.reim + rep.misc.claim + rep.cst.reim + rep.fgt.reim +
					rep.serv + rep.cstm + rep.vatm)
			
			if cut.off.date >= invoice.date  then	
				if	not print.record()	then			|*********commented by abhishek on dt. 6 feb 2015
					continue
				endif							|****************
			endif	
| 			if	only.stck = tcyesno.yes	then
| 				if	whinh312.lsta = whinh.lstc.confirmed	then
| 					if	(tdisg831.stat <> tdisg.stat.process)	then
| 						if	tdisg831.type = tdisg.type.domestic	then
| 							print.detail()
| 						else
| 							if	isspace(tdisg831.bold)	then
| 								print.detail()
| 							endif
| 						endif
| 					endif
| 				endif	
| 			else
			select	whisg312.amnt
			from	whisg312
			where	whisg312._index1 = {:whinh312.rcno,:whinh312.rcln}
			selectdo
			selectempty
				whisg312.amnt = 0
			endselect
			
| 			print.detail()		|# PATCH001022.o
						|# PATCH001022.sn
			if len(strip$(rep.sinv)) <= 6 then
				if tdisg831.prdt = 0 then
					rep.sidt = "" 
					print.detail()
				else	
					get.utc.to.date(tdisg831.prdt, voucher.date)
					if cut.off.date > voucher.date then
						continue
					else	
						rep.sidt = sprintf$("%D(%02m/%02d/%04Y)", voucher.date) 
						print.detail()
					endif	
				endif	
			endif
						|# PATCH001022.en
			
| 			endif
		endselect	
	endselect
}

function boolean print.record()
{
	on case var.type
		case tpproj.type.dom:
			on case sale.invn
				case	tdyesno.yes:
					if	foc.found then
						if	tdisg831.stat <> tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
				case	tdyesno.no:
					if	foc.found then
						if	tdisg831.stat = tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	not isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
			ENDCASE
			on case	acnt.voch
				case	tdyesno.yes:
					if	foc.found then
						if	tdisg831.stat <> tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
				case	tdyesno.no:
					if	foc.found then
						if	tdisg831.stat = tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	not isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
			ENDCASE	
			break
		case tpproj.type.exp:
			on case sale.invn
				case	tdyesno.yes:
					if	foc.found then
						if	tdisg831.stat <> tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	isspace(rep.cinv)	then
							return(false)
						endif	
					endif	
					break
				case	tdyesno.no:
					if	foc.found then
						if	tdisg831.stat = tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	not isspace(rep.cinv)	then
							return(false)
						endif	
					endif	
					break
			ENDCASE
			on case	acnt.voch
				case	tdyesno.yes:
					if	foc.found then
						if	tdisg831.stat <> tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
				case	tdyesno.no:
					if	foc.found then
						if	tdisg831.stat = tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	not isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
			ENDCASE	
			break
		case	tdyesno.both:
			on case sale.invn
				case	tdyesno.yes:
					if	foc.found then
						if	tdisg831.stat <> tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	rep.bptp = "Domestic"	then
							if	isspace(rep.sinv)	then
								return(false)
							endif	
						else
							if	isspace(rep.cinv)	then
								return(false)
							endif
						endif	
					endif	
					break
				case	tdyesno.no:
					if	foc.found then
						if	tdisg831.stat = tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	rep.bptp = "Domestic"	then
							if	not isspace(rep.sinv)	then
								return(false)
							endif
						else
							if	not isspace(rep.cinv)	then
								return(false)
							endif	
						endif		
					endif	
					break
			ENDCASE
			on case	acnt.voch
				case	tdyesno.yes:
					if	foc.found then
						if	tdisg831.stat <> tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
				case	tdyesno.no:
					if	foc.found then
						if	tdisg831.stat = tdisg.stat.process	then
							return(false)
						endif	
					else	
						if	not isspace(rep.sinv)	then
							return(false)
						endif	
					endif	
					break
			ENDCASE	
			break	
	ENDCASE
	on case var.ptrn
		case	tdyesno.yes:
			if	isspace(rep.ptrn)	then
				return(false)
			endif
			break
		case	tdyesno.no:
			if	not isspace(rep.ptrn)	then
				return(false)
			endif
			break	
	ENDCASE		
	return(true)
}

function domain tcdsca get.project.desc
			(
			domain	tccprj	i.cprj
			)
{
	domain	tcdsca	tmp.dsca
	
	tmp.dsca = ""
	select	pj_tcmcs052.dsca:tmp.dsca
	from	tcmcs052 pj_tcmcs052
	where	pj_tcmcs052._index1 = {:i.cprj}
	selectdo
	endselect
	
	return(tmp.dsca)
}

function domain tcnama get.bp.name
			(
			domain	tccom.bpid	i.otbp
			)
{
	domain	tcnama	tmp.nama
	
	tmp.nama = ""
	select	bp_tccom100.nama:tmp.nama
	from	tccom100 bp_tccom100
	where	bp_tccom100._index1 = {:i.otbp}
	selectdo
	endselect
	
	return(tmp.nama)
}

function domain whreas.type get.reason.type
			(
			domain	tcmcs.str6	i.reas
			)
{
	domain	whreas.type	tmp.type
	
	tmp.type = empty
	select	rt_whisg311.type:tmp.type
	from	whisg311 rt_whisg311
	where	rt_whisg311._index1 = {:i.reas}
	selectdo
	endselect
	
	return(tmp.type)
}

function Get_gr_detail
		(
		domain	whinh.pksp	in.psno,
	ref	domain	tfacp.isup	ot.grno,	
	ref	domain	tcmcs.str10	ot.grdt,	
	ref	domain	tcdsca		ot.fmst,	
	ref	domain	tcdsca		ot.tost	
		)
{
	ot.grno = ""
	ot.grdt = ""
	ot.fmst = ""
	ot.tost = ""
	
	db.set.to.default(ttfisg001)
	db.set.to.default(ttfacp100)
	select	tfisg001.irno, tfacp100.invd
	from	tfisg001, tfacp100
	where	tfisg001._index1 = {:1}
	and	tfisg001.irno refers to tfacp100 Unref Clear
	as set with 1 rows
	wherebind(1, lval(in.psno))
	selectdo
		db.set.to.default(ttfisg002)
		select	tfisg002.grno, tfisg002.grdt, tfisg002.grbp
		from	tfisg002
		where	tfisg002._index1 = {:tfisg001.irno}
		selectdo
			db.set.to.default(ttfisg003)
			select	tfisg003.plcf, tfisg003.plct,
				tfisg003.cctf, tfisg003.cctt
			from	tfisg003
			where	tfisg003._index1 = {:tfisg002.grno, :tfisg002.grbp, :tfisg002.grdt}
			selectdo
				get.state.desc(tfisg003.cctf, tfisg003.plcf, ot.fmst)
				get.state.desc(tfisg003.cctt, tfisg003.plct, ot.tost)
			endselect
			ot.grno = tfisg002.grno
			ot.grdt = sprintf$("%D(%02m/%02d/%04Y)", tfisg002.grdt)
		endselect	
	endselect
}

function get.state.desc(
		domain	tcccty		in.ccty,
		domain	tcmcs.cste	in.cste,
	ref	domain	tcdsca		ot.dsca
			)
{
	ot.dsca = ""
	select	st_tcmcs143.dsca:ot.dsca
	from	tcmcs143 st_tcmcs143
	where	st_tcmcs143._index1 = {:in.ccty, :in.cste}
	selectdo
	endselect
}

function Get_Sale_Data
		(
		domain	tcorno		in.edrn,
		domain	whinh.shpm	in.rcno,
		domain	tcpono		in.rcln,
		domain	tccprj		in.cprj,
		domain	tccom.bpid	in.ofbp,
		domain	tcccur		in.ccur,
		domain	tcrtyp		in.rtyp,
	ref	domain	tcamnt		ot.bval,	|Billing Value
	ref	domain	tcamnt		ot.rem.edmt,	|ED Reimbursement
	ref	domain	tcamnt		ot.rem.samt,	|Service Reimbursement
	ref	domain	tcamnt		ot.rem.cstm,	|CST Reimbursement
	ref	domain	tcamnt		ot.rem.vatm,	|VAT Reimbursement
	ref	domain	tcamnt		ot.rem.fgmt,	|Freight Reimbursement
	ref	domain	tcamnt		ot.exc.amnt,	|Excise Tax
	ref	domain	tcamnt		ot.ser.amnt,	|Service Tax
	ref	domain	tcamnt		ot.cst.amnt,	|CST
	ref	domain	tcamnt		ot.vat.amnt	|VAT
		)
{
	domain	tcamnt		asv.val
	domain	tcamnt		ot.exmt, ot.srmt, ot.csmt, ot.vtmt
	
	db.set.to.default(tciisg000)
	tcmcs.dll0095.read.parm("ciisg000")
	
	ot.exmt = 0
	ot.srmt = 0
	ot.csmt = 0
	ot.vtmt = 0
	
	tdisg832.bivl = 0
	tdisg832.remb = empty
	tdisg832.sasa.l = 0
	tdisg831.ccty = ""
	tdisg831.cvat = ""
	select	tdisg832.bivl, tdisg832.remb, tdisg832.sasa.l, tdisg831.ccty,
		tdisg831.cvat
	from	tdisg832, tdisg831
	where	tdisg832._index1 = {:in.edrn, :in.rcno, :in.rcln}
	and	tdisg832.edrn refers to tdisg831 
	selectdo
		tpisg039.nins = 0
		tpisg039.rtyp = ""
		tpisg039.remb = empty
		tpisg039.rval = 0
		tpisg039.sidt = 0
		select	tpisg039.nins, tpisg039.rtyp, tpisg039.remb, tpisg039.rval,
			tpisg039.sidt
		from	tpisg039
		where	tpisg039._index2 = {:in.edrn, :in.rcno, :in.rcln}
		selectdo
			asv.val = 0
			on case tpisg039.remb
				case tcyesno.no:
					ot.bval = ot.bval + tpisg039.rval
					if	tdisg832.sasa.l <> 0	then
						asv.val = tdisg832.sasa.l
					else
						asv.val = tpisg039.rval
					endif	
					populate.tax.amounts(tdisg831.ccty, tdisg831.cvat, tpisg039.sidt, asv.val,
							in.ccur, tpisg039.sidt, in.rtyp, asv.val, asv.val, asv.val,
							ot.exmt, ot.srmt, ot.csmt, ot.vtmt)
					|ot.exc.amnt = ot.exc.amnt + ot.exmt		
					ot.ser.amnt = ot.ser.amnt + ot.srmt		
					ot.cst.amnt = ot.cst.amnt + ot.csmt		
					ot.vat.amnt = ot.vat.amnt + ot.vtmt		
					break
				case tcyesno.yes:
					select	tppin020.ccty, tppin020.cvat, tppin020.ccur,
						tppin020.easv.l, tppin020.vasv.l, tppin020.sasv.l,
						tppin020.insa
					from	tppin020
					where	tppin020._index1 = {:in.cprj, :in.ofbp, :tpisg039.nins}
					selectdo
					endselect
					populate.tax.amounts(tppin020.ccty, tppin020.cvat, tpisg039.sidt, tppin020.insa,
							tppin020.ccur, tpisg039.sidt, in.rtyp, tppin020.easv.l, tppin020.vasv.l, tppin020.sasv.l,
							ot.exmt, ot.srmt, ot.csmt, ot.vtmt)
					|ot.exc.amnt = ot.exc.amnt + ot.exmt		
					ot.ser.amnt = ot.ser.amnt + ot.srmt		
					ot.cst.amnt = ot.cst.amnt + ot.csmt		
					ot.vat.amnt = ot.vat.amnt + ot.vtmt	
					if	trim$(tpisg039.rtyp) = trim$(ciisg000.exii)	or
						trim$(tpisg039.rtyp) = trim$(ciisg000.hcex)	or
						trim$(tpisg039.rtyp) = trim$(ciisg000.scex)	then
						ot.rem.edmt = ot.rem.edmt + tpisg039.rval
					else
						if	trim$(tpisg039.rtyp) = trim$(ciisg000.csti)	then
							ot.rem.cstm = ot.rem.cstm + tpisg039.rval
						else
							if	trim$(tpisg039.rtyp) = trim$(ciisg000.vati)	then
								ot.rem.vatm = ot.rem.vatm + tpisg039.rval
							else	
								if	trim$(tpisg039.rtyp) = trim$(ciisg000.srvi)	or
									trim$(tpisg039.rtyp) = trim$(ciisg000.hcsv)	or
									trim$(tpisg039.rtyp) = trim$(ciisg000.scsv)	then
									ot.rem.samt = ot.rem.samt + tpisg039.rval
								else
									if	trim$(tpisg039.rtyp) = trim$(ciisg000.frgt)	then
										ot.rem.fgmt = ot.rem.fgmt + tpisg039.rval
									endif
								endif
							endif	
						endif	
					endif
					break
			ENDCASE
		endselect	
	endselect		
}

function populate.tax.amounts(
			domain	tcccty		in.ccty,
			domain	tccvat		in.cvat,
			domain	tcdate		in.odat,
			domain	tcamnt		in.oamt,
			domain	tcccur		in.ccur,
			domain	tcdate		in.ratd,
			domain	tcrtyp		in.rtyp,	
			domain	tcamnt		in.tase.l,	
			domain	tcamnt		in.tasv.l,	
			domain	tcamnt		in.tass.l,	
		ref	domain	tcamnt		ot.exc.amt,	
		ref	domain	tcamnt		ot.ser.amt,	
		ref	domain	tcamnt		ot.cst.amt,	
		ref	domain	tcamnt		ot.vat.amt	
				)
{
	domain	tcamnt		line.tax.amount.array(1, 1)	based
	domain	tcamnt		line.base.amount.array(1, 1)	based
	domain	tccvat		line.tax.code.array(1, 1)	based
	domain	tctax.indt.l	o.line.indirect.tax.array(1, 1)	based
	domain	tctax.indt.l	i.duty.type.array(1, 1)		based
	domain	tcyesno		expensed.tax(1, 1)		based
	domain	tcmcs.s250m	o.comb.output.set(1)		based
	domain	tcpvat		o.tax.rates(1,1)		based
	domain	tcamnt		i.duties.array(1,1)		based
	domain tctax.seqn 	o.maximum.sequence.number
	domain tcamnt 		o.claimable.tax.amount
	domain tcamnt 		o.non.claimable.tax.amount
	domain tcamnt 		o.total.tax.amount
	domain tcamnt 		o.sales.tax
	domain tcmcs.s250m 	o.error.msg mb
	domain	tcamnt		tmp.rate		|#ISGEC0104.n
	
	tmp.rate = 0					|#ISGEC0104.n
	
	tctax.dll9141.determine.aggregate.tax.amounts.per.line( 
						in.ccty,			|tdpur401.ccty	| domain tcccty i.tax.country, 
						in.cvat,			|tdpur401.cvat	| domain tccvat i.aggregate.tax.code, 
						in.odat,			|tdpur401.odat	| domain tcdate i.tax.date, 
						in.oamt,			|tdpur401.oamt	| domain tcamnt i.order.line.price, 
						in.oamt,			|tdpur401.cuva	| domain tcamnt i.customs.value, 
						in.oamt,		|tdpur401.mrpi.l	| domain tcamnt i.market.retail.price, 
						0.00,						| domain tcamnt i.retail.sales.price, 
						0.00,						| domain tcamnt i.tariff.price, 
						in.ccur,			|tdpur400.ccur	| domain tcccur i.price.currency, 
						in.ratd,			|tdpur400.ratd	| domain tcdate i.currency.rate.date, 
						in.rtyp,			|tdpur400.ratt	| domain tcrtyp i.currency.exchange.rate.type, 
						in.tase.l,			|tdpur401.tase.l	| domain tcpric i.asv.excise, 
						in.tasv.l,		|tdpur401.tasv.l	| domain tcpric i.asv.vat, 
						in.tass.l,		|tdpur401.tass.l	| domain tcpric i.asv.service.tax, 
						in.odat,			|tdpur401.ddta	| domain tcdate i.ship.or.receive.date, 
						tcyesno.no,				| domain tcyesno i.as.is.sales, 
						tcyesno.no,				| domain tcyesno i.yesno.flag, 
						i.duty.type.array,			| ref domain tctax.indt.l i.duty.type.array(,), 
						i.duties.array,				| ref domain tcamnt i.duties.array(,), 
						o.tax.rates,				| ref domain tcpvat o.tax.rates(,), 
						o.maximum.sequence.number,		| ref domain tctax.seqn o.maximum.sequence.number, 
						line.base.amount.array,			| ref domain tcamnt o.line.base.amount.array(,), 
						line.tax.amount.array,			| ref domain tcamnt o.line.tax.amount.array(,), 
						line.tax.code.array,			| ref domain tccvat o.line.tax.code.array(,) fixed, 
						o.line.indirect.tax.array,		| ref domain tctax.indt.l o.line.indirect.tax.array(,), 
						expensed.tax,				| ref domain tcyesno o.expensed.tax(,), 
						o.claimable.tax.amount,			| ref domain tcamnt o.claimable.tax.amount, 
						o.non.claimable.tax.amount,		| ref domain tcamnt o.non.claimable.tax.amount, 
						o.total.tax.amount,			| ref domain tcamnt o.total.tax.amount, 
						o.sales.tax,				| ref domain tcamnt o.sales.tax, 
						o.comb.output.set,			| ref domain tcmcs.s250m o.comb.output.set() fixed mb, 
						o.error.msg)				| ref domain tcmcs.s250m o.error.msg mb )
	
	db.set.to.default(ttctax941)
	db.set.to.default(ttcmcs036)
	select	tctax941.*,tcmcs036.*
	from	tctax941,tcmcs036
	where	tctax941._index1 = {:in.ccty,:in.cvat}
	and	tctax941.type = 20		|tctax.type.l.tax
	and	tctax941.cmbb refers to tcmcs036
	selectdo
		on case tcmcs036.indt.l
			case tctax.indt.l.bed:
			case tctax.indt.l.e.cess.excise:	
			case tctax.indt.l.hse.cess.excise:
				ot.exc.amt = ot.exc.amt + line.tax.amount.array(tctax941.layr,tctax941.seqn)
				break
			case tctax.indt.l.service:
			case tctax.indt.l.e.cess.service:	
			case tctax.indt.l.hse.cess.servic:
				ot.ser.amt = ot.ser.amt + line.tax.amount.array(tctax941.layr,tctax941.seqn)	
				break	
			case tctax.indt.l.cst:
				ot.cst.amt = ot.cst.amt + line.tax.amount.array(tctax941.layr,tctax941.seqn)
				break	
			case tctax.indt.l.vat:	
			case tctax.indt.l.lst:	
			case tctax.indt.l.n.a:
				ot.vat.amt = ot.vat.amt + line.tax.amount.array(tctax941.layr,tctax941.seqn)	
				break
		ENDCASE		
	endselect
}

function Get_Sale_Detail
		(
		domain	tccprj		in.cprj,	|Project
		domain	tfgld.ttyp	in.ttyp,	|Tran. Type
		domain	tfgld.docn	in.docn,	|Document
		domain	tcdate		date.f,		|From Date
		domain	tcdate		date.t,		|To Date
		domain	tcdate		ot.date,	|Inv. Date
	ref	domain	tccom.bpid	ot.cuno,	|Customer
	ref	domain	tcnama		ot.cnnm,	|Customer Name
	ref	domain	tcamnt		ot.bamt,	|Basic Amount
	ref	domain	tcamnt		ot.samt,	|Sales Tax Amount
	ref	domain	tcamnt		ot.rem.edmt,	|ED Reimbursement
	ref	domain	tcamnt		ot.rem.samt,	|Service Reimbursement
	ref	domain	tcamnt		ot.rem.cstm,	|CST Reimbursement
	ref	domain	tcamnt		ot.rem.vatm,	|VAT Reimbursement
	ref	domain	tcamnt		ot.rem.fgmt,	|Freight Reimbursement
	ref	domain	tcamnt		ot.gross.val,	|Gross Value
	ref	domain	tcamnt		ot.advn,	|Advance
	ref	domain	tcamnt		ot.retn,	|Retention
	ref	domain	tcamnt		ot.nt.inmt	|Net Value
		)
{
	domain	tcyesno		tmp.remb
	domain	tcccty		tmp.rtyp
	domain	tcamnt		o.adv.amnt		
	domain	tcamnt		o.rtn.amnt
	domain	tcdate		v.indt.f	
	domain	tcdate		v.indt.t	
	
	tcmcs.dll0095.read.parm("ciisg000")
	
	get.date.utc(date.f, 00, 00, 00, v.indt.f)
	get.date.utc(date.t, 23, 59, 59, v.indt.t)
	
	select	cisli235.cprj, cisli235.ityp, cisli235.idoc
	from	cisli235
	where	cisli235.cprj	= :in.cprj
	and	cisli235.codt	inrange :v.indt.f	and	:v.indt.t
	and	cisli235.ityp	= :in.ttyp
	and	cisli235.idoc	= :in.docn
	and	cisli235.stat	in	(cisli.stat.printed, cisli.stat.posted)
	group by cisli235.cprj, cisli235.ityp, cisli235.idoc
	order by cisli235.cprj, cisli235.ityp, cisli235.idoc
	selectdo
		ot.cuno = ""
		ot.cnnm = ""
		ot.bamt = 0
		ot.samt = 0
		ot.rem.edmt = 0
		ot.rem.fgmt = 0
		ot.rem.samt = 0
		ot.rem.cstm = 0
		ot.rem.vatm = 0
		ot.gross.val = 0
		ot.advn = 0						
		ot.retn = 0						
		ot.nt.inmt = 0	
		select	cisli235.ofbp, cisli235.nins, cisli235.amth, cisli235.txah,
			cisli235.slcp, cisli235.ityp, cisli235.idoc, cisli235.codt,
			tccom100.nama			
		from	cisli235, tccom100
		where	cisli235.cprj = :cisli235.cprj
		and	cisli235.ityp = :cisli235.ityp
		and	cisli235.idoc = :cisli235.idoc
		and	cisli235.codt inrange :v.indt.f	and	:v.indt.t
		and	cisli235.stat	in	(cisli.stat.printed, cisli.stat.posted)
		and	cisli235.ofbp refers to tccom100	Unref Clear
		selectdo
			tmp.remb = empty
			tmp.rtyp = ""
			ot.cuno = cisli235.ofbp	
			ot.cnnm = tccom100.nama	
			ot.date = cisli235.codt
			select	tppin020.cdf_remb:tmp.remb,
				tppin020.cdf_rtyp:tmp.rtyp
			from	tppin020
			where	tppin020._index1 = {:cisli235.cprj, :cisli235.ofbp, :cisli235.nins}
			and	tppin020._compnr = :cisli235.slcp
			selectdo
			endselect
			if	tmp.remb = tcyesno.no	then
				ot.bamt = ot.bamt + cisli235.amth(1)
			else
				if	not isspace(tmp.rtyp)	then
					if	trim$(tmp.rtyp) = trim$(ciisg000.exii)	or
						trim$(tmp.rtyp) = trim$(ciisg000.hcex)	or
						trim$(tmp.rtyp) = trim$(ciisg000.scex)	then
						ot.rem.edmt = ot.rem.edmt + cisli235.amth(1)
					else
						if	trim$(tmp.rtyp) = trim$(ciisg000.csti)	then
							ot.rem.cstm = ot.rem.cstm + cisli235.amth(1)
						else
							if	trim$(tmp.rtyp) = trim$(ciisg000.vati)	then
								ot.rem.vatm = ot.rem.vatm + cisli235.amth(1)
							else	
								if	trim$(tmp.rtyp) = trim$(ciisg000.srvi)	or
									trim$(tmp.rtyp) = trim$(ciisg000.hcsv)	or
									trim$(tmp.rtyp) = trim$(ciisg000.scsv)	then
									ot.rem.samt = ot.rem.samt + cisli235.amth(1)
								else
									if	trim$(tmp.rtyp) = trim$(ciisg000.frgt)	then
										ot.rem.fgmt = ot.rem.fgmt + cisli235.amth(1)
									endif
								endif
							endif	
						endif	
					endif
				endif
			endif
			ot.samt = ot.samt + cisli235.txah(1)
		endselect
		get.advance.retention(cisli235.ityp, cisli235.idoc, ot.advn, ot.retn)
		ot.gross.val = ot.bamt + ot.samt + ot.rem.edmt + ot.rem.cstm + ot.rem.vatm + ot.rem.samt + ot.rem.fgmt
		ot.nt.inmt = ot.gross.val - (ot.advn + ot.retn)		
	endselect
}

function get.advance.retention(
			domain	tfgld.ttyp	i.ttyp,
			domain	tfgld.docn	i.docn,
		ref	domain	tcamnt		o.advn,
		ref	domain	tcamnt		o.retn
				)
{
	o.advn = 0
	o.retn = 0
	db.set.to.default(ttfacr200)
	select	tfacr200.amth, tfacr200.trec
	from	tfacr200
	where	tfacr200._index1 = {:i.ttyp, :i.docn}
	and	tfacr200.docn <> 0
	and	tfacr200.trec in (tfacr.trec.assignment, tfacr.trec.credit)
	selectdo
		on case tfacr200.trec
			case tfacr.trec.assignment:
				o.advn = o.advn + abs(tfacr200.amth(1))
				break
			case tfacr.trec.credit:
				o.retn = o.retn + abs(tfacr200.amth(1))
				break
		EndCAsE
	endselect	
}	

						|#ISGEC001124.sn

function get.sent.to.details
			(
			domain	tcorno		is.edrn,
			domain	whinh.shpm	is.rcno,
			domain	tcpono		is.rcln,
		ref	domain	tccom.bpid	os.fsup,
		ref	domain	tcnama		os.fsnm,
		ref	domain	tcdsca		os.fcty,
		ref	domain	tcmcs.cste	os.fstt,
		ref	domain	tcnama		os.floc,
		ref	domain	tcorno		os.forn,
		ref	domain	tccprj		os.fprj,
		ref	domain	tcdsca		os.fpdc
			)
{
	select	tdisg867.orno, tdisg867.pono
	from	tdisg867
	where	tdisg867._index1 = {:is.edrn, :is.rcno, :is.rcln}
	selectdo
		select	tdpur401.cprj:os.fprj, tdpur400.otbp:os.fsup,
			tccom130.cste:os.fstt, tccom139.dsca:os.fcty
		from	tdpur401, tdpur400, tccom130, tccom139
		where	tdpur401._index1 = {:tdisg867.orno, :tdisg867.pono}
		and	tdpur401.orno refers to tdpur400
		and	tdpur400.otad refers to tccom130 Unref Clear
		and	tccom130.cmbb refers to tccom139 Unref Clear
		selectdo
		endselect
		os.fsnm = get.bp.name(os.fsup)
		os.forn = tdisg867.orno
		os.fpdc = get.project.desc(os.fprj)
		if	not isspace(os.fstt)	and	not isspace(os.fcty)	then
			os.floc = os.fcty & "(" & os.fstt & ")"
		endif	
	endselect
}

						|#ISGEC001124.en

function get.utc.to.date(
		domain	tcdate		i.date,
	ref	domain	tfgld.date	o.date
			)
{
	long	dd, mm, yy, hh, mn, ss
	
	utc.to.date(i.date, yy , mm, dd, hh, mn, ss)
	o.date = date.to.num(yy, mm, dd)
	
	if	o.date < 0	then
		o.date = 0
	endif
}

function get.fiscal.year.period
			(
			domain	tfgld.date	in.dte,
		ref	domain	tfgld.year	ot.year,
		ref	domain	tfgld.prod	ot.prod
			)
{
	domain	tfgld.date	t.dte
	
	ot.year = 0
	ot.prod = 0
	select	fy_tfgld005.year:ot.year,
		fy_tfgld005.prno:ot.prod,
		fy_tfgld005.stdt:t.dte
	from	tfgld005 fy_tfgld005
	where	fy_tfgld005._index1 = {tfgld.ptyp.financial}
	and	fy_tfgld005.stdt <= :in.dte
	and	fy_tfgld005.corr = tcyesno.no
	order by fy_tfgld005.stdt desc 
	as set with 1 rows
	selectdo
	endselect
}

function	generate.header()
{
	line4 =	concat$("	",
		sprintf$("Project"),					|1		
		sprintf$("Description"),				|2		
		sprintf$("Project Type"),				|3		
		sprintf$("PTR No."),					|4		
		sprintf$("PTR Date"),					|5		
		sprintf$("PTR Year"),					|6		
		sprintf$("PTR Period"),				|7		
		sprintf$("PO Number"),					|8
		sprintf$("PO Date"),					|9	
		sprintf$("Supplier"),					|10		
		sprintf$("Supplier Name"),				|11
		sprintf$("Receipt Type"),				|12
		sprintf$("Receipt"),					|13
		sprintf$("Line"),					|14
		sprintf$("Receipt Date"),				|15
		sprintf$("Receipt Status"),				|16
		sprintf$("Bill Number"),				|17
		sprintf$("Bill Date"),					|18		
		sprintf$("GR No"),					|19		
		sprintf$("GR Date"),					|20		
		sprintf$("From State"),				|21		
		sprintf$("To State"),					|22		
		sprintf$("Item"),					|23
		sprintf$("Description"),		  		|24
		sprintf$("Item Type"),		  			|25			|#ISGEC001137.n
		sprintf$("Quantity"),					|26
		sprintf$("Receipt Price"),				|27
		sprintf$("Basic Amount"),				|28
		sprintf$("Excise"),					|29
		sprintf$("CST"),					|30
		sprintf$("VAT"),					|31
		sprintf$("Service"),					|32
		sprintf$("Other Charge"),				|33
		sprintf$("Gross Amount"),				|34
		sprintf$("Inventory Value"),				|34.1
		sprintf$("Billing Advice"),			  	|35
		sprintf$("Billing Advice Status"),		  	|36
		sprintf$("Customer"),				  	|37
		sprintf$("Customer Name"),				|38
		sprintf$("Bill of Lading"),			        |39
		sprintf$("B/L Date"),					|40
		sprintf$("Commercial Invoice"),			|41
		sprintf$("Invoice Date"),				|42
		sprintf$("Accounting Voucher No"),			|43
		sprintf$("Date"),					|44	
		sprintf$("Year"),					|45	
		sprintf$("Period"),					|46	
		sprintf$("Billing Value"),				|47
		sprintf$("ED Reimbursement"),				|48
		sprintf$("CST Reimbursement"),				|49
		sprintf$("Freight Reimbursement"),			|50
		sprintf$("Misc. Claims"),				|51
		sprintf$("CST"),					|52
		sprintf$("VAT"),					|53
		sprintf$("Service Tax"),				|54
		sprintf$("Total"),					|55
		sprintf$("Location[State]"),				|56
		sprintf$("Sent To Party Code"),			|57			|#ISGEC001124.n
		sprintf$("Sent To Party Name"),			|58			|#ISGEC001124.n
		sprintf$("Sent To Location"),				|59			|#ISGEC001124.n
		sprintf$("Sent To PO"),				|60			|#ISGEC001124.n
		sprintf$("Sent To Project"),				|61			|#ISGEC001124.n
		sprintf$("Sent To Project Description"),		|62			|#ISGEC001124.n
		sprintf$("Material Issue Date"))			|63			|#ISGEC001137.n
	
	line4 = strip$(shiftl$(line4))		
	seq.puts(line4, stat.fp)	
}

function	print.detail()
{	
	line3 =	concat$("	",
		sprintf$("%s", rep.bprj),				|1
		sprintf$("%s", rep.bpdc),				|2				
		sprintf$("%s", rep.bptp),				|3				
		sprintf$("%s", rep.ptrn),				|4				
		sprintf$("%s", rep.ptdt),				|5				
		sprintf$("%s", rep.ptfy),				|6				
		sprintf$("%s", rep.ptfp),				|7				
		sprintf$("%s", rep.born),				|8				
		sprintf$("%s", rep.odat),				|9				
		sprintf$("%s", rep.bsup),				|10				
		sprintf$("%s", rep.bsnm),				|11
		sprintf$("%s", rep.rtyp),				|12
		sprintf$("%s", rep.rcno),				|13
		sprintf$("%d", rep.rcln),				|14
		sprintf$("%s", rep.rcdt),				|15
		sprintf$("%s", rep.rstt),				|16
		sprintf$("%s", rep.isup),				|17
		sprintf$("%s", rep.isdt),				|18				
		sprintf$("%s", rep.grno),				|19
		sprintf$("%s", rep.grdt),				|20
		sprintf$("%s", rep.fmst),				|21
		sprintf$("%s", rep.tost),				|22
		sprintf$("%s", rep.item),				|23
		sprintf$("%s", rep.itdsc),				|24
		sprintf$("%s", rep.kitm),				|25		|#ISGEC001137.n
		sprintf$("%f", rep.qnty),				|26	
		sprintf$("%f", rep.rprc),				|27	
		sprintf$("%f", rep.rbmt),				|28	
		sprintf$("%f", rep.rexc),				|29	
		sprintf$("%f", rep.rcst),				|30	
		sprintf$("%f", rep.rvat),				|31	
		sprintf$("%f", rep.rsrv),				|32	
		sprintf$("%f", rep.roth),				|33	
		sprintf$("%f", rep.bamt),				|34	
		sprintf$("%f", whisg312.amnt),				|34.1	
		sprintf$("%s", rep.edrn),				|35
		sprintf$("%s", rep.stat),				|36
		sprintf$("%s", rep.cuno),				|37
		sprintf$("%s", rep.cnnm),				|38
		sprintf$("%s", rep.blno),				|39
		sprintf$("%s", rep.bldt),				|40
		sprintf$("%s", rep.cinv),				|41
		sprintf$("%s", rep.cidt),				|42
		sprintf$("%s", rep.sinv),				|43
		sprintf$("%s", rep.sidt),				|44
		sprintf$("%s", rep.slfy),				|45
		sprintf$("%s", rep.slfp),				|46
		sprintf$("%f", rep.bval),				|47
		sprintf$("%f", rep.ed.reim),				|48
		sprintf$("%f", rep.cst.reim),				|49
		sprintf$("%f", rep.fgt.reim),				|50
		sprintf$("%f", rep.misc.claim),			|51
		sprintf$("%f", rep.cstm),				|52
		sprintf$("%f", rep.vatm),				|53
		sprintf$("%f", rep.serv),				|54
		sprintf$("%f", rep.sale),				|55
		sprintf$("%s", rep.loca),				|56
		sprintf$("%s", rep.fsup),				|57			|#ISGEC001124.n
		sprintf$("%s", rep.fsnm),				|58			|#ISGEC001124.n
		sprintf$("%s", rep.floc),				|59			|#ISGEC001124.n
		sprintf$("%s", rep.forn),				|60			|#ISGEC001124.n
		sprintf$("%s", rep.fprj),				|61			|#ISGEC001124.n
		sprintf$("%s", rep.fpdc),				|62			|#ISGEC001124.n
		sprintf$("%s", rep.trdt))				|63			|#ISGEC001137.n

		line3 = strip$(shiftl$(line3))
		seq.puts(line3, stat.fp)
}	

function Initialize_Variables()
{
	rep.bprj = ""				|1
	rep.bpdc = ""				|2				
	rep.bptp = ""				|3				
	rep.tptr = ""				|4
	rep.dptr = 0				|4				
	rep.ptrn = ""				|4				
	rep.ptdt = ""				|5				
	rep.ptfy = ""				|6				
	rep.ptfp = ""				|7				
	rep.born = ""				|8				
	rep.odat = ""				|9				
	rep.bsup = "" 				|10				
	rep.bsnm = ""				|11
	rep.rtyp = ""				|12
	rep.rcno = ""				|13
	rep.rcln = 0				|14
	rep.rcdt = ""				|15
	rep.rstt = ""				|16
	rep.isup = ""				|17
	rep.isdt = ""				|18				
	rep.grno = ""				|19				
	rep.grdt = ""				|20				
	rep.fmst = ""				|21				
	rep.tost = ""				|22				
	rep.item = ""				|23
	rep.itdsc = ""				|24
	rep.kitm = ""				|25			|#ISGEC001137.n
	rep.qnty = 0				|26	
	rep.rprc = 0				|27	
	rep.rbmt = 0				|28	
	rep.rexc = 0				|29	
	rep.rcst = 0				|30	
	rep.rvat = 0				|31	
	rep.rsrv = 0				|32	
	rep.roth = 0				|33	
	rep.bamt = 0				|34
	rep.edrn = ""				|35	
	rep.stat = ""				|36	
	rep.cuno = ""				|37
	rep.cnnm = ""				|38
	rep.blno = ""				|39
	rep.bldt = ""				|40
	rep.cinv = ""				|41
	rep.cidt = ""				|42
	rep.sinv = ""				|43
	rep.sidt = ""				|44
	rep.slfy = ""				|45
	rep.slfp = ""				|46
	rep.bval = 0				|47
	rep.ed.reim = 0				|48
	rep.cst.reim = 0			|49
	rep.fgt.reim = 0			|50
	rep.misc.claim = 0			|51
	rep.cstm = 0				|52
	rep.vatm = 0				|53
	rep.serv = 0				|54
	rep.sale = 0				|55
	rep.loca = ""				|56
	rep.fsup = ""				|57				|#ISGEC001124.n
	rep.fsnm = ""				|58				|#ISGEC001124.n
	rep.fcty = ""				|59				|#ISGEC001124.n
	rep.fstt = ""				|60				|#ISGEC001124.n
	rep.floc = ""				|61				|#ISGEC001124.n
	rep.forn = ""				|62				|#ISGEC001124.n
	rep.fprj = ""				|63				|#ISGEC001124.n
	rep.fpdc = ""				|64				|#ISGEC001124.n
	rep.trdt = ""				|65				|#ISGEC001137.n

}

function get.date.utc(
		domain	tcdate	i.date,
		long		i.hh,
		long		i.mn,
		long		i.ss,
	ref	domain	tcdate	o.date
			)
{
	long	dd, mm, yy, hh, mn, ss
	
	utc.to.date(i.date, yy , mm, dd, hh, mn, ss)
	o.date = date.to.utc(yy, mm, dd, i.hh, i.mn, i.ss)
	if	o.date < 0	then
		o.date = 0
	endif
}	

function open.file()
{
	err.file = bse.tmp.dir$() & str$(utc.num()) & ".xls"
	
	file.name = "c:\temp\" & str$(utc.num())  & ".xls"
	
	stat.fp = seq.open(err.file, "w+")
	if stat.fp >0 then
 		seq.seek(0, 0, stat.fp)
	endif
}

function close.file()
{
	seq.close(stat.fp)
	ret2 = server2client(err.file,file.name,1)
	ret2 = app_start(file.name,"c:","","","")
}


function set.enable.disable.fields()
{
	if	all.rcpt = tcyesno.yes	then
		only.stck = tcyesno.no
		rcpt.conf = tcyesno.no
		lsta.f = whinh.lstc.unexpected
		lsta.t = whinh.lstc.confirmed
		disable.fields("only.stck", "rcpt.conf")
	else
		if	only.stck = tcyesno.yes	then
			all.rcpt = tcyesno.no
			rcpt.conf = tcyesno.no
			lsta.f = whinh.lstc.confirmed
			lsta.t = whinh.lstc.confirmed
			disable.fields("all.rcpt", "rcpt.conf")
		else	
			if	rcpt.conf = tcyesno.yes	then
				only.stck = tcyesno.no
				all.rcpt = tcyesno.no
				lsta.f = whinh.lstc.confirmed
				lsta.t = whinh.lstc.confirmed
				disable.fields("all.rcpt", "only.stck")
			else	
				only.stck = tcyesno.no
				all.rcpt = tcyesno.no
				rcpt.conf = tcyesno.no
				lsta.f = empty
				lsta.t = empty
				enable.fields("all.rcpt", "only.stck", "rcpt.conf")
			endif
		endif
	endif
		
		
}

function get.filter.field()
{
	on case var.type
		case tpproj.type.dom:
			ccur.f = "INR"
			ccur.t = "INR"
			set.fmin(ccur.exp)
			ccty.f = "IN "
			ccty.t = "IN "
			set.fmin(ccty.exp)
			break
		case tpproj.type.exp:
			set.fmin(ccur.f)
			set.fmax(ccur.t)
| 			ccur.exp = "INR"
			set.fmin(ccur.exp)
			set.fmin(ccty.f)
			set.fmax(ccty.t)
			ccty.exp = "IN "
			break
		case tpproj.type.both:
			set.fmin(ccur.f)
			set.fmax(ccur.t)
			set.fmin(ccur.exp)
			set.fmin(ccty.f)
			set.fmax(ccty.t)
			set.fmin(ccty.exp)
			break
	ENDCASE	

}

function get.rcpt.type()
{
	on case rcpt.type
		case tdrcpt.type.conf:
			lsta.f = whinh.lstc.confirmed
			lsta.t = whinh.lstc.confirmed
			break
		case tdrcpt.type.unconf:
			lsta.f = whinh.lstc.unexpected	
			lsta.t = whinh.lstc.received
			break
		case tdrcpt.type.both:
			lsta.f = whinh.lstc.unexpected	
			lsta.t = whinh.lstc.confirmed
			break
	ENDCASE		
}

function put.default.values()
{
	odat.f = 0
	odat.t = utc.num()
	lsta.f = whinh.lstc.confirmed
	lsta.t = whinh.lstc.confirmed
	set.fmin(orno.f)
	set.fmax(orno.t)
	set.fmin(suno.f)
	set.fmax(suno.t)
	sale.invn = tdyesno.no
	acnt.voch = tdyesno.no
	var.ptrn = tdyesno.both

}

function get.cut.off.date(domain tcdate i.date)
{
	long	dd, mm, yy, hh, mn, ss
	
	utc.to.date(i.date, yy , mm, dd, hh, mn, ss)
	cut.off.date = date.to.num(yy, mm, dd)

}

