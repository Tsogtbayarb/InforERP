|******************************************************************************
|* dmisg0101m200  0  VRC B61U a7 live
|* Document Submission Functionality
|* Installation user             
|* 2014-12-23
|******************************************************************************
|* Main table dmisg001 Incoming Document Master, Form Type 1
|******************************************************************************
|* ISGECDV001211, IT0047, Dharmendra, Dt. 05-01-2015, VRC B61U a7 live
|* Changes done as discussed with Nishant Kaushik 
|*
|* ISGEC004003, IT0047, Dharmendra, 12-01-2015, B61U a7 isg
|*
|* PATCH001015, Dharmendra, 12-03-2015
|*
|*PATCH001018, Dharmendra, 13-03-2015
|*
|*IDENT PATCH002030, Mani sharma , 14-03-2015, Email Alert
|*

|* ISGEC015042, Shilpa Janardanan, Dt. 20-08-2015, Vrc B61U a7 isg
|* Linking Document master session
|*
|* ISGEC004021, IT0047, Dharmendra, 12-10-2015, B61U a7 isg
|*
|* ISGECMOD021, Atul Ojha, 30/03/2018, B61U a7 isg
|* Changes in Zoom Condition 
|* 
|* ID: ISGEC01175,Bharti Garg, 15-03-2019
|* chnages for zoom for reviewer.
|*
|* Adarsh Pal, 06-06-2019
|* Additional logic for updating missing item in revised Document
|****************************** declaration section ***************************
declaration:

  table   	tdmisg001 | Incoming Document Master
  table		ttpptc100
  table		tdmisg101	  |#ISGECDV001211.n
  table		ttpmsl000		|#ISGEC004003.sn
  table		tdmisg002
  table		ttcibd001
  table		tdmisg003		
  table		tdmisg114
  table		tdmisg115
  table		tdmisg000
  table 	tdmisg007
  table         ttccom001
  table         tbpmdm001
  table		tdmisg140
  table		ttpisg063		|#sujeet20150513.n
  #include <bic_dam>
					|#ISGEC004003.en
  #include <bic_cmf>			
					
					|PATCH002030.n
	extern	domain	tcemno		o.emno
	extern	domain tcemm.grid	division	|#ISGECDV001211.sn
	extern	domain	tcccty		grouped		|#ISGECDV001211.en
	string	query.string1(500)			|##ISGECDV001211.n
	extern	long	count.item			|##ISGEC004003.n
	extern	domain	tclogn		logon.code
		domain	tcpono		get.stnd.error	|#ISGEC004003.sn
		domain	tcsern		selected.records, first.time
	string unlock.path(100), query.string(100)			|#ISGEC004003.en		
	
	long global.variable
	extern domain tcorno reviewer.approvar        |PATCH002030.n
|****************************** program section ********************************
before.program:
	if not dmisgdll0100.approval.rule.document.master(logname$,o.emno) then
		message("You are not Authorized!!!")
		exit()
	endif	
	first.time = 0
	logon.code = logname$
	tcmcs.dll0095.read.parm("tpmsl000")
	show.submitted()
	
| 	query.string = "dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.submitted"
| 	query.string = "dmisg001.wfst = dmisg.wfst.submitted"
| 	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.submitted")
| 	query.extend.where(query.string)
	
	
| 	if update.status <> find.data then
| 		global.variable = 1 
| 		query.extension = "dmisg001.wfst = dmisg.wfst.submitted"
| 	endif
	
| 	
| choice.find.data:	
| before.choice:
| 	if update.status = find.data then
| 		global.variable = 0
| 	endif
	
| choice.change.order:
| after.choice:
| 	query.extend.where("dmisg001.user = :logon.code")
| 	rebuild.query()	
	
| group.2:
| after.group:
| 	if not global.variable then
| 		
| 		query.extend.where("dmisg001.user = :logon.code")
| 		rebuild.query()	
| 	endif
	
| choice.def.find:
| on.choice:
| 	if not global.variable then
		
| 		query.extend.where("dmisg001.user = :logon.code")
| 		rebuild.query()	
| 	endif
| choice.end.program:
| before.choice:
	

|****************************** field section **********************************
	
field.dmisg001.rusr:
before.zoom:
	division = ""
	grouped = ""
	query.string1= ""
	select 	dmisg101.*
	from	dmisg101
	where	dmisg101._index2 = {:o.emno, dmisg.cact.designer}
	as set with 1 rows
	selectdo
		division = dmisg101.eunt
		grouped = dmisg101.grup
	endselect
	
	if not isspace(grouped) then
| 		query.string1 = "tccom001.emno in(select dmisg101.emno from dmisg101 where dmisg101._index1 = {" & quoted.string(division)	|#ISGECMOD021.so
| 		query.string1 = strip$(query.string1) & " , " & quoted.string(grouped) & "}" 							|#ISGECMOD021.eo
		
		query.string1 = "dmisg101.emno in (select tccom001.emno from tccom001)"		|#ISGECMOD021.n						
| 		query.string1 = strip$(query.string1) & " and dmisg101.eunt = " & quoted.string(division)	|#ISGEC01175.o
		query.string1 = strip$(query.string1) & " and dmisg101.grup = " & quoted.string(grouped)
		query.string1 = strip$(query.string1) & " and dmisg101.cact = dmisg.cact.reviewer"
		query.string1 = strip$(query.string1) & " and dmisg101.emno in(select tiisg906.emno from tiisg906 where tiisg906.stat = 1)"	|ISGEC01175.n
	
		query.extend.where.in.zoom(query.string1)
	else
| 		query.string1 = "tccom001.emno in(select dmisg101.emno from dmisg101 where dmisg101._index1 = {" & quoted.string(division) & "}"
		
		query.string1 = "dmisg101.emno in (select tccom001.emno from tccom001)"				|#ISGECMOD021.n				
| 		query.string1 = strip$(query.string1) & " and dmisg101.eunt = " & quoted.string(division)	|#ISGEC01175.o
		query.string1 = strip$(query.string1) & " and dmisg101.cact = dmisg.cact.reviewer"
		query.string1 = strip$(query.string1) & " and dmisg101.emno in(select tiisg906.emno from tiisg906 where tiisg906.stat = 1)"	|ISGEC01175.n

		query.extend.where.in.zoom(query.string1)
	endif
	
field.dmisg001.ausr:
before.zoom:
	division = ""
	grouped = ""
	query.string1= ""
	select 	dmisg101.*
	from	dmisg101
	where	dmisg101._index2 = {:o.emno, dmisg.cact.designer}
	as set with 1 rows
	selectdo
		division = dmisg101.eunt
		grouped = dmisg101.grup
	endselect
	
	if not isspace(grouped) then
| 		query.string1 = "tccom001.emno in(select dmisg101.emno from dmisg101 where dmisg101._index1 = {" & quoted.string(division)		|#ISGECMOD021.so
| 		query.string1 = strip$(query.string1) & " , " & quoted.string(grouped) & "}" 								|#ISGECMOD021.eo	
														|#ISGECMOD021.sn	
		query.string1 = "dmisg101.emno in (select tccom001.emno from tccom001)"									
| 		query.string1 = strip$(query.string1) & " and dmisg101.eunt = " & quoted.string(division)	|#ISGEC01175.o
		query.string1 = strip$(query.string1) & " and dmisg101.grup = " & quoted.string(grouped)
		query.string1 = strip$(query.string1) & " and dmisg101.cact = dmisg.cact.approver"
		query.string1 = strip$(query.string1) & " and dmisg101.emno in(select tiisg906.emno from tiisg906 where tiisg906.stat = 1)"	|ISGEC01175.n

		query.extend.where.in.zoom(query.string1)							|#ISGECMOD021.en
	else
| 		query.string1 = "tccom001.emno in(select dmisg101.emno from dmisg101 where dmisg101._index1 = {" & quoted.string(division) & "}"	|#ISGECMOD021.o
														|#ISGECMOD021.sn	
		query.string1 = "dmisg101.emno in (select tccom001.emno from tccom001)"									
| 		query.string1 = strip$(query.string1) & " and dmisg101.eunt = " & quoted.string(division)	|#ISGEC01175.o
		query.string1 = strip$(query.string1) & " and dmisg101.cact = dmisg.cact.approver"
														|#ISGECMOD021.en
		query.string1 = strip$(query.string1) & " and dmisg101.emno in(select tiisg906.emno from tiisg906 where tiisg906.stat = 1)"	|ISGEC01175.n
														
		query.extend.where.in.zoom(query.string1)
																
	endif
								|#ISGECDV001211.en	
	
choice.cont.generate:
before.choice:							|#ISGEC004003.sn
	selected.records = 0
	do.selection(false,update.missing.item)			|Adarsh.06.06.19.n
	do.selection(false, before_new_function_for_generate)
	

on.choice:
	if selected.records = 0 then
		message("No Records selected for process")
	else
		do.selection(false, on_new_function_for_generate)
		message("Process Complete.")
								|#sujeet20150513.so
| 		if send.email.alert() then
| 		message("Sending Email Failed")
| 		endif	
								|#sujeet20150513.eo
	endif
								|#ISGEC004003.en
	
							|#ISGECDV001211.sn
functions:
function extern modify.document()
{
	select	dmisg001.*
	from	dmisg001 for update
	where	dmisg001._index1 = {:dmisg001.docn, :dmisg001.revn}
	selectdo
		create.xml.file()				|#ISGEC004003.n
		dmisg001.wfst = dmisg.wfst.underdesign
		db.update(tdmisg001, db.retry, e)
		commit.transaction()
	endselect
	
}
							|#ISGECDV001211.en
							
function boolean Check_Project_Exist(domain	tccprj	i.cprj)
{
	select	tppdm600.psts
	from	tppdm600
	where	tppdm600._index1 = {:i.cprj}
	and	tppdm600.psts in (tppdm.psts.construction, tppdm.psts.finished)
	selectdo
	selectempty
		return(false)
	endselect
	
	return(true)
}

function boolean Check_Element_Level(domain	tccprj	i.cprj,
				domain	tppdm.cspa	i.cspa)
{
	long	level
	domain	tppdm.cspa	o.elem
	
	level = tpmsl000.levl + 1
		
	select 	tpest120.sele:o.elem
	from	tpest120
	where	tpest120._index1 = {:i.cprj}
	and	tpest120.sele = :i.cspa
	and	tpest120.levl > :level
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)
	
}				

function boolean Check_Element_Status(domain	tccprj	i.cprj,
				domain	tppdm.cspa	i.cspa)
{
	domain	tppdm.cspa	o.elem
		
	select 	tpptc100.cspa:o.elem
	from	tpptc100
	where	tpptc100._index1 = {:i.cprj, :i.cspa}
	and	tpptc100.wast = tppdm.wast.released
	selectdo
		return(true)
	endselect
	
	return(false)
}

function Check_Duplicate_Item_Exists()
{
	select 	count(dmisg002.item):count.item,
		dmisg002.item
	from	dmisg002
	where	dmisg002._index1 = {:dmisg001.docn,:dmisg001.revn}
	group by dmisg002.item
	selectdo
		if count.item > 1 then
			message("Duplicate Item Found %s",dmisg002.item)
			choice.again()
		endif
	endselect
}

function Check_Item_Length()
{
	select	dmisg002.item
	from	dmisg002
	where	dmisg002._index1 = {:dmisg001.docn,:dmisg001.revn}
	group by dmisg002.item
	selectdo
		if	(len(trim$(dmisg002.item)) < 6) then
			message("Length of Item %s must be greater than 6",dmisg002.item)
			choice.again()
		endif
	endselect
}


function boolean Check_Previous_Rev_Expire(domain dmdoc.docid	i.docn,
					domain	dmdoc.revv	i.revi)
{
	domain	dmstat		tmp.stat
	domain	dmdoc.revv	tmp.revi
	
	select	a_dmisg001.stat:tmp.stat, a_dmisg001.revn:tmp.revi
	from	dmisg001 a_dmisg001
	where	a_dmisg001._index1 = {:i.docn}
	and	a_dmisg001.revn < :i.revi
	order by a_dmisg001.revn desc
	as set with 1 rows
	selectdo
		if	tmp.stat = dmstat.expire	then
			return(true)
		endif
	selectempty
		return(true)
	endselect
	
	return(false)	
}					

function extern domain tcpono Get_Standard_Item_Updated()
{
	long	ret
	domain	tcpono	found
	
	found = 0
	select	dmisg002.*
	from	dmisg002 for update
	where	dmisg002._index1 = {:dmisg001.docn, :dmisg001.revn}
	and	dmisg002.itmt = "S"
	selectdo	
		select	tcibd001.dsca, tcibd001.citg, tcibd001.cuni, tcibd001.wght, tcibd001.csig
		from	tcibd001
		where	tcibd001._index1 = {:dmisg002.oitm}
		selectdo
			select	tcmcs018.blcp
			from	tcmcs018
			where	tcmcs018._index1 = {:tcibd001.csig}
			and	tcmcs018.blcp = tcblst.blocked
			selectdo
				found = 1
			endselect
			
			dal.change.object("dmisg002")
			dal.set.field("dmisg002.dsca", tcibd001.dsca)
			dal.set.field("dmisg002.citg", tcibd001.citg)
			dal.set.field("dmisg002.cuni", tcibd001.cuni)
			dal.set.field("dmisg002.wght", dmisg002.qnty * tcibd001.wght)
			ret = dal.save.object("dmisg002")
			if	ret = 0	then
				commit.transaction()
			else
				abort.transaction()
			endif
		selectempty
			found = 2
		endselect
		
		select	dmisg007.item, dmisg007.docn, dmisg007.revn, dmisg007.dsca,
			dmisg007.pdfn
		from	dmisg007
		where	dmisg007._index1 = {:dmisg002.oitm}
		selectdo
			select	dmisg003.*
			from	dmisg003
			where	dmisg003._index1 = {:dmisg001.docn, :dmisg001.revn, :dmisg007.item}
			selectdo
			selectempty
				dmisg003.docn = dmisg001.docn
				dmisg003.revn = dmisg001.revn
				dmisg003.drgt = dmisg007.docn
				dmisg003.drev = dmisg007.revn
				dmisg003.drgn = dmisg007.docn
				dmisg003.dcfn = dmisg007.dsca
				dmisg003.pdff = dmisg007.pdfn
				dmisg003.type = dmcatg.reference
				db.insert(tdmisg003, db.skip.dupl, e)
			endselect
		endselect
		if	ret = 0	then
			commit.transaction()
		else
			abort.transaction()
		endif
		
	endselect

	return(found)
}

| function before_new_function_for_generate()
| {
| 	selected.records = selected.records + 1
| 	
| 						|#sujeet20150513.sn
| 	select 	tpisg063.engs
| 	from	tpisg063
| 	where	tpisg063._index1 = {:dmisg001.cprj,:dmisg001.cspa}
| 	and	tpisg063.appl = tcyesno.yes
| 	and	tpisg063.engs = tpengs.partial
| 	as set with 1 rows
| 	selectdo
| 		on case	tpisg063.engs
| 		case	tpengs.free:
| 			message("%s Element of Project %s is not Enabled for Engineering!!! Cann't Proceed..",dmisg001.cspa,dmisg001.cprj)
| 			choice.again()
| 			break
| 		case	tpengs.complete:
| 			message("%s Element of Project %s is C L O S E D for Engineering!!! Cann't Proceed..",dmisg001.cspa,dmisg001.cprj)
| 			choice.again()
| 			break
| 		endcase
| 	selectempty
| 		message("%s Element of Project %s is not Enabled for Engineering!!! Cann't Proceed..",dmisg001.cspa,dmisg001.cprj)
| 		choice.again()
| 	endselect
| 	
| 						|#sujeet20150513.en
| 	
| 	if isspace(dmisg001.rusr) and isspace(dmisg001.ausr) then
| 		message("Can't Process without Reviewer OR Approver Input.")
| 		choice.again()
| 	endif
| 	
| 	if	not Check_Project_Exist(dmisg001.cprj)	then
| 		message("Project is not Active")
| 		choice.again()
| 	endif
| 						
| 	if dmisg001.crtp = tcyesno.yes then
| 		select	dmisg002.elem
| 		from	dmisg002
| 		where	dmisg002._index1 = {:dmisg001.docn,:dmisg001.revn}
| 		group by dmisg002.elem
| 		selectdo
| 			if	not Check_Element_Level(dmisg001.cprj, dmisg002.elem)	then
| 				message("Element must be Equal or Greater than Level 4")
| 				choice.again()
| 			else	
| 				if	not Check_Element_Status(dmisg001.cprj, dmisg002.elem)	then
| 					message("Work Authorization Status of Element is not Released")
| 					choice.again()
| 				endif	
| 			endif	
| 		endselect
| 	else		
| 		if	not Check_Element_Level(dmisg001.cprj, dmisg001.cspa)	then
| 			message("Element must be Equal or Greater than Level 4")
| 			choice.again()
| 		else	
| 			if	not Check_Element_Status(dmisg001.cprj, dmisg001.cspa)	then
| 				message("Work Authorization Status of Element is not Released")
| 				choice.again()
| 			endif	
| 		endif
| 	endif
| 	
| 	Check_Duplicate_Item_Exists()
| 	Check_Item_Length()
| 	if	not Check_Previous_Rev_Expire(dmisg001.docn, dmisg001.revn)	then
| 		message("Previous Revision of Document %s is not Expire", dmisg001.docn)
| 		choice.again()
| 	endif	
| 	get.stnd.error = Get_Standard_Item_Updated()
| 	if get.stnd.error = 1 then
| 		message("Item is Block for Purchase.")
| 		choice.again()
| 	else if get.stnd.error = 2 then	
| 		message("Item not available in Standard Item")
| 		choice.again()
| 	endif	
| 	endif
| 							|#ISGEC004021.sn
| 	if check_parameter() then
| 		if not check_document_present_in_master(dmisg001.docn, dmisg001.revn) then
| 			message("Document not present in Master List.")
| 			choice.again()
| 		endif
| 	endif
| 							|#ISGEC004021.en
| }
|

function before_new_function_for_generate()
{
	domain	tcpono		cdf.val
	domain tcbool		skip.rec
	domain	tpisg.catg	catg.v
	skip.rec = false
	
	selected.records = selected.records + 1
	
						|#sujeet20150513.sn
	select 	tpisg063.engs
	from	tpisg063
	where	tpisg063._index1 = {:dmisg001.cprj,:dmisg001.cspa}
	and	tpisg063.appl = tcyesno.yes
| 	and	tpisg063.engs = tpengs.partial
	as set with 1 rows
	selectdo
			
| 		select	tppdm090.cdf_catg:cdf.val			|ISGEC002019.sn
| 		from	tppdm090
| 		where	tppdm090._index1 = {:dmisg001.cspa}
| 		selectdo
| 			catg.v = ltoe(cdf.val)
| 			if catg.v = tpisg.catg.bought then
| 				skip.rec = true
| 			endif	
| 		endselect						|ISGEC002019.en
		
		select orgn from dmisg140 				|Veena 04-01-2019.sn
		where dmisg140.cprj = :dmisg001.cprj 
		and dmisg140.docn = :dmisg001.docn
		selectdo
			if dmisg140.orgn = "VEN" then
				skip.rec = true
			endif
			
		endselect						|Veena 04-01-2019.en	
		
		if not skip.rec then					|ISGEC002019.n
			on case	tpisg063.engs
			case	tpengs.free:
				message("%s Element of Project %s is not Enabled for Engineering!!! Can't Proceed..",dmisg001.cspa,dmisg001.cprj)
				choice.again()
				break
			case	tpengs.complete:
				message("%s Element of Project %s is C L O S E D for Engineering!!! Can't Proceed..",dmisg001.cspa,dmisg001.cprj)
				choice.again()

				break
			endcase
		endif							|ISGEC002019.n
	selectempty
		message("%s Element of Project %s is not Enabled for Engineering!!! Can't Proceed..",dmisg001.cspa,dmisg001.cprj)
		choice.again()
	endselect
	
						|#sujeet20150513.en
	
	if isspace(dmisg001.rusr) and isspace(dmisg001.ausr) then
		message("Can't Process without Reviewer OR Approver Input.")
		choice.again()
	endif
	
	if	not Check_Project_Exist(dmisg001.cprj)	then
		message("Project is not Active")
		choice.again()
	endif
						
	if dmisg001.crtp = tcyesno.yes then
		select	dmisg002.elem
		from	dmisg002
		where	dmisg002._index1 = {:dmisg001.docn,:dmisg001.revn}
		group by dmisg002.elem
		selectdo
			if	not Check_Element_Level(dmisg001.cprj, dmisg002.elem)	then
				message("Element must be Equal or Greater than Level 4")
				choice.again()
			else	
				if	not Check_Element_Status(dmisg001.cprj, dmisg002.elem)	then
					message("Work Authorization Status of Element is not Released")
					choice.again()
				endif	
			endif	
		endselect
	else		
		if	not Check_Element_Level(dmisg001.cprj, dmisg001.cspa)	then
			message("Element must be Equal or Greater than Level 4")
			choice.again()
		else	
			if	not Check_Element_Status(dmisg001.cprj, dmisg001.cspa)	then
				message("Work Authorization Status of Element is not Released")
				choice.again()
			endif	
		endif
	endif
	
	Check_Duplicate_Item_Exists()
	Check_Item_Length()
	if	not Check_Previous_Rev_Expire(dmisg001.docn, dmisg001.revn)	then
		message("Previous Revision of Document %s is not Expire", dmisg001.docn)
		choice.again()
	endif	
	get.stnd.error = Get_Standard_Item_Updated()
	if get.stnd.error = 1 then
		message("Item is Block for Purchase.")
		choice.again()
	else if get.stnd.error = 2 then	
		message("Item not available in Standard Item")
		choice.again()
	endif	
	endif
							|#ISGEC004021.sn
	if check_parameter() then
		if not check_document_present_in_master(dmisg001.docn, dmisg001.revn) then
			message("Document not present in Master List.")
			choice.again()
		endif
	endif
							|#ISGEC004021.en
}

function on_new_function_for_generate()
{
	
	select	dmisg001.docs, dmisg001.wfst, dmisg001.sudt, dmisg001.aact.1, dmisg001.aact.2,
		dmisg001.ract.1, dmisg001.ract.2, dmisg001.rdat, dmisg001.aact.3, dmisg001.adat
	from	dmisg001 for update
	where	dmisg001._index1 = {:dmisg001.docn,:dmisg001.revn}
	selectdo
		if not isspace(dmisg001.rusr) or not isspace(dmisg001.ausr) then
			dmisg001.docs = tcyesno.yes
			if not isspace(dmisg001.rusr) then
				dmisg001.wfst = dmisg.wfst.underreview
			else
				dmisg001.wfst = dmisg.wfst.underapproval
			endif
			dmisg001.ract.1 = tcyesno.no
			dmisg001.ract.2 = tcyesno.no			
			dmisg001.rdat = 0
			dmisg001.ract = dmisg.act.na
			dmisg001.aact.1 = tcyesno.no
			dmisg001.aact.2 = tcyesno.no
			dmisg001.aact.3 = tcyesno.no
			dmisg001.adat = 0
			dmisg001.aact = dmisg.act.na
			dmisg001.sudt = utc.num()		
									|#sujeet20150513.sn
			if send.email.alert() then
				message("Sending Email Failed")
			endif
									|#sujeet20150513.en
		endif
		db.update(tdmisg001,db.retry,e)
	endselect
	commit.transaction()
		
}
							|#ISGEC004003.sn
function create.xml.file()
{
	long    Head1, Head2, Head3, Head4, retval, cmfId, fd.write
	domain tclogn 	v.logname
	
	unlock.path = ""
	v.logname = logname$

	select	dmisg000.*
	from 	dmisg000
	where 	dmisg000._index1 = {:v.logname}
	as set with 1 rows
	selectdo
		unlock.path = strip$(dmisg000.ulok)
	selectempty
		message("Path Not Maintained for this User")
	endselect

	if not isspace(unlock.path) then
		select	dmisg115.*
		from	dmisg115
		where	dmisg115._index2 = {:dmisg001.docn, :dmisg001.revn}
		selectdo
		endselect
		
		select	dmisg114.*
		from	dmisg114
		where	dmisg114._index1 = {:dmisg115.dcrn}
		selectdo
		endselect
	
		cmfId = xmlNewNode("InforLN-PLM")
		Head2 = xmlSetAttribute(cmfID, "Type","Unlock")
		Head1 = xmlNewDataElement("Documents","", cmfId)
	
		Head3 = xmlNewDataElement("Document","", Head1)
	
		retval = xmlSetAttribute(Head3, "VaultUserName",trim$(dmisg001.user))
		retval = xmlSetAttribute(Head3, "VaultDBName",trim$(dmisg001.name))
		retval = xmlSetAttribute(Head3, "FileName",trim$(dmisg001.dsca))	|# PATCH001018.n
		retval = xmlSetAttribute(Head3, "IsgecDataSource",trim$(dmisg001.sorc))
		retval = xmlSetAttribute(Head3, "Main","True")
		retval = xmlSetAttribute(Head3, "ComponentStatus",dmisg114.comp)
		retval = xmlSetAttribute(Head3, "ApprovalRequiredBy",dmisg114.apdt)
		retval = xmlSetAttribute(Head3, "Description",trim$(dmisg114.dsca))
		retval = xmlSetAttribute(Head3, "RequestPriority",dmisg114.reqs)
		retval = xmlSetAttribute(Head3, "DCRCategory",dmisg115.catg)
		retval = xmlSetAttribute(Head3, "DCRDate",dmisg114.apdt)
		retval = xmlSetAttribute(Head3, "DCRNo",dmisg115.dcrn)
		retval = xmlSetAttribute(Head3, "UserID",trim$(logname$))
		retval = xmlSetAttribute(Head3, "RevisionNo",trim$(dmisg001.revn))
		retval = xmlSetAttribute(Head3, "DocumentID",trim$(dmisg001.dcid))
		retval = xmlSetAttribute(Head3, "Element",trim$(dmisg001.cspa))	
		retval = xmlSetAttribute(Head3, "Project",trim$(dmisg001.cprj))
		
		select	dmisg003.*
		from	dmisg003
		where	dmisg003._index1 = {:dmisg001.docn, :dmisg001.revn}
		selectdo
			Head4 = xmlNewDataElement("Document","", Head1)

			retval = xmlSetAttribute(Head4, "Type",ltoe(1))
			retval = xmlSetAttribute(Head4, "Status",trim$(dmisg003.stat))
			retval = xmlSetAttribute(Head4, "PDF_filename",trim$(dmisg003.pdff))
			retval = xmlSetAttribute(Head4, "Main","False")		|# PATCH001018.n
			retval = xmlSetAttribute(Head4, "DrawingNumber",trim$(dmisg003.drgn))
			retval = xmlSetAttribute(Head4, "DocumentRevision",trim$(dmisg003.drev))
			retval = xmlSetAttribute(Head4, "DrawingTitle",trim$(dmisg003.dcfn))
			retval = xmlSetAttribute(Head4, "DocumentFileName",trim$(dmisg003.drgt))
		endselect
		
		fd.write = seq.open(unlock.path & "\" & trim$(dmisg001.docn) & ".xml", "w")
	
		xmlWritePretty(fd.write, cmfId, 0 )
		seq.close(fd.write)
	
		xmlDelete(cmfId, 0)

	endif

}

function extern view.submitted()
{
	show.submitted()
	rebuild.query()
	execute(find.data)
}

function show.submitted()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.submitted", EXTEND_OVERWRITE)
}


function extern view.underreview()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.underreview", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}


function extern under.approval()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.underapproval", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern view.released()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.released", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern withdrawn()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.withdrawn", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern underrevision()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.underrevision", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern superseded()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.superseded", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern underdcr()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.underdcr", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern underdesign()
{
	query.extend.where("dmisg001.user = :logon.code and dmisg001.wfst = dmisg.wfst.underdesign", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

						


function long send.email.alert()					|PATCH002030.sn
{
	string tmp.file(200),line(500)
	long    fp,srno
	domain	tclogn	user.id
	long    message.ID
        long    to.ID
        long    attachment.ID
        long    ret

        domain ttcmf.prov service       
                        |Infor ERP Enterprise eMessage Connector service for 
                        |transporting messages
        long stat       |Variable to hold return values
        long mid        |CMF message id
	
	tmp.file = creat.tmp.file$(bse.tmp.dir$())
	fp = seq.open(tmp.file,"w+")
	if fp <=0 then
		message("Temp file can not be created")
		return(1)
	endif
	
	
	line = ""
	
						|#sujeet20150513.sn
	select 	dmisg001.rusr,dmisg001.ausr
	from	dmisg001
	where	dmisg001._index1 = {:dmisg001.docn,:dmisg001.revn}
	as set with 1 rows
	selectdo
	endselect
						|#sujeet20150513.en

	select  tccom001.nama
	from    tccom001
	where   tccom001._index4 = {:dmisg001.user}
	selectdo
	endselect	

	if not isspace(dmisg001.rusr)   then
		reviewer.approvar = dmisg001.rusr
		line = strip$(line) & "Document No. " & dmisg001.docn & " and "
		line = strip$(line) & "Revision No. " & dmisg001.revn & " has been submitted for review"
		line = strip$(line) & " by " & tccom001.nama
	else	
		reviewer.approvar = dmisg001.ausr
		line = strip$(line) & "Document No. " & dmisg001.docn & " and  "
		line = strip$(line) & "Revision No. " & dmisg001.revn & " has been submitted for approval"
		line = strip$(line) & "by "  & tccom001.nama
	endif
	
	seq.write(line,len(line),fp)
	ret = seq.close(fp)
	
	user.id = logname$
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:user.id}
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
	selectempty
		bpmdm001.mail = ""
	endselect
	
	if isspace(bpmdm001.mail) then
		message("Email ID for User " & tccom001.nama & " Not maintained")
		return(1)
	endif		
	|******* Email Header
        message.ID = cmf.create()
	
| 	line = "Regarding Review/Approve Document Submission" 
	line = "Submitted:" & " Document No. " & strip$(str$(dmisg001.docn)) & " Revision No. " & strip$(str$(dmisg001.revn))
	
        ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        ret = cmf.setSubject(message.ID,line)
	
	|******** from ID
	to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	ret = cmf.setRecipientName(to.ID,tccom001.nama)
        ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	ret = cmf.setRecipientType(to.ID, "SMTP")
 
	|******** to ID
	if not isspace(reviewer.approvar) then
		select 	bpmdm001.mail,tccom001.nama 
		from 	tccom001,bpmdm001
		where 	tccom001._index1 = {:reviewer.approvar}
		and	tccom001.emno refers to bpmdm001
		selectdo
			to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
			ret = cmf.setRecipientName(to.ID,tccom001.nama)
			ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
			ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
			ret = cmf.setRecipientType(to.ID, "SMTP")
		selectempty
			message("Email ID for Approver/Reviewer not maintained" )
			return(1)
		endselect
	else
		message("Either Approver/Reviewer not Maintained")
		return(1)
	endif
	|********* Mail Body
	attachment.ID = cmf.createAttachment(message.ID)
	ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	ret = cmf.setAttachmentMIME(attachment.ID,"text/plain")                       
	ret = cmf.setAttachmentFileName(attachment.ID,tmp.file,"abc.txt")


	|*********  Send mail
        if message.ID <>0 then
                stat = cmf.startService("SMTP",2)
                if stat<>0 then
                        message("Message could not be sent "&
                                "(Infor ERP Enterprise eMessage Connector"&
                                " service did not start)")
                        return(1)
                endif
                stat = cmf.send(message.ID,"SMTP")
                if stat<>0 then
                        message("Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&
                                "service refused message)")
                        cmf.stopService("SMTP",2)
                        return(1)
                endif
                stat = cmf.stopService("SMTP",2)
        endif
	return(0)
}											|PATCH002030.en
						

						|#ISGEC004021.sn
function boolean check_parameter()						
{	
	if tpmsl000.dms1 = tcyesno.yes then
		return(true)
	endif	
	return(false)
}						


function boolean check_document_present_in_master(domain dmdoc.docid	i.docn,
						domain dmdoc.docid i.revn)
{
	select	dmisg121.docn
	from	dmisg121
	where	dmisg121._index1 = {:i.docn, :i.revn}
	selectdo
		return(true)
	endselect
	return(false)
}									
						|#ISGEC004021.en
						|Adarsh.06.06.19.sn
function update.missing.item()
{
	domain	tcitem		item
	domain	tcpono		max.srno.val
		long		prev.revn.lng
		string		prev.revn.str(5)
		string		curr.revn.str(5)
		
	item = ""
	prev.revn.lng = 0
	max.srno.val = 0
	prev.revn.str = ""
	curr.revn.str = ""
	
	curr.revn.str = dmisg001.revn
	curr.revn.str = trim$(curr.revn.str)
	
	if curr.revn.str <> "00" then
		prev.revn.lng = lval(curr.revn.str)
		prev.revn.lng = prev.revn.lng - 1
		prev.revn.str = str$(prev.revn.lng)
		
		if len(prev.revn.str) = 1 then
			prev.revn.str = str.insert$(prev.revn.str,-1,"0")
		endif	
		
		select	dmisg002.*
		from	dmisg002
		where	dmisg002._index1 = {:dmisg001.docn,:prev.revn.str}
		selectdo
			max.srno.val = get.max.serial.no(dmisg002.docn,curr.revn.str)
			db.retry.point()
			select	a_dmisg002.item:item
			from	dmisg002 a_dmisg002
			where	a_dmisg002._index1 = {:dmisg002.docn,:curr.revn.str}
			and	a_dmisg002.item = :dmisg002.item
			selectdo
			selectempty
				dmisg002.docn = dmisg002.docn
				dmisg002.revn = curr.revn.str
				dmisg002.srno = max.srno.val + 1  
				dmisg002.item = dmisg002.item
				dmisg002.dsca = dmisg002.dsca
				dmisg002.citg = dmisg002.citg
				dmisg002.qnty = 0.0
				dmisg002.wght = 0.0
				dmisg002.itmt = dmisg002.itmt
				dmisg002.txta = dmisg002.txta
				dmisg002.txtb = dmisg002.txtb
				dmisg002.cuni = dmisg002.cuni
				dmisg002.oitm = dmisg002.oitm
				dmisg002.elem = dmisg002.elem
				dmisg002.sitm = dmisg002.sitm
				db.insert(tdmisg002,DB.RETRY)
				commit.transaction()
			endselect
		endselect
	endif
}

function domain	tcpono get.max.serial.no(
						domain	dmdoc.docid	i.docn,
						domain	dmdoc.revv	i.revn
										)
{
	domain	tcpono	max.srno
	
	max.srno = 0
	
	select	max(b_dmisg002.srno):max.srno
	from	dmisg002 b_dmisg002
	where	b_dmisg002._index1 = {:i.docn,:i.revn}
	selectdo
		return(max.srno)
	selectempty
		return(0)
	endselect
	return(0)
}
						|Adarsh.06.06.19.en
