|******************************************************************************
|* dmisg0101m400  0  VRC B61U a7 live
|* Document Approval Functionality
|* Installation user             
|* 2014-12-23
|******************************************************************************
|* Main table dmisg001 Incoming Document Master, Form Type 1
|******************************************************************************
|* ISGECDV001211, IT0047, Dharmendra, Dt. 05-01-2015, VRC B61U a7 live
|* Changes done as discussed with Nishant Kaushik  
|*
|* ISGEC004003, IT0047, Dharmendra, Dt. 12-01-2015, B61U a7 isg
|******************************************************************************
|* PATCH002030, Mani sharma, Dt . 14-04-2015, VRC  B61U a7 isg
|* Email Alert on Accept/Reject
|*
|* IDENT ISGEC001175, Ritu Sharma, 2015-05-14
|* Created this dll to update the size for man hours.
|******************************************************************************
|* IDENT ISGEC01127 Saikat Ghosh, Date 28-07-2015, Case 36522 
|* PLM-Update Incoming document Master needs modifications 
|* Requirement:
|* Generate XML file similar to "LOCK" when document is approved trough 
|*	BaaN-PLM workflow, The keyword LOCK will be changed to RELEASED in Lock 
|*	in vault folder as configured in session dmisg0100m000.

|* ISGEC015042, Shilpa Janardanan, Dt. 20-08-2015, Vrc B61U a7 isg
|* Linking Document master session
|****************************** declaration section ***************************
declaration:

  table         tdmisg001 | Incoming Document Master
  table		tdmisg002
  table		tdmisg005
  table		tdmisg000
  table         tdmisg103
  table         tbpmdm001
  table         ttccom001
  table         tdmisg101
  
							|#ISGEC01127.sn
	table	tdmisg114	|* DCR			
	table	tdmisg115	|* DCR Lines
	table	tdmisg003	|* Incoming Document Parts
	
							|#ISGEC01127.en
	
  
	extern	domain	tcemno		o.emno
						|#ISGEC004003.sn
	extern	domain	tclogn		logon.code
	extern	domain	tcmcs.str215	error.msg
						|#ISGEC004003.en
						
						|#ISGEC01127.sn
		long		Head1
		long		fd.write
		long		Head3
		long		Head4
		long		cmfID
		domain		tclogn 			v.logname
		string		lock.path(100)
		
	#pragma used dll        ottdllbw
						|#ISGEC01127.en
	#include <bic_cmf>					
|****************************** program section ********************************
before.program:
	if not dmisgdll0100.approval.rule.document.master(logname$,o.emno) then
		message("You are not Authorized!!!")
		exit()
	endif
	
	logon.code = logname$
	show.underapproval()	

							|#ISGEC004003.sn
before.display.object:	
	set.enum.values.for.field("dmisg001.wfst", dmisg.wfst.underapproval, dmisg.wfst.released, dmisg.wfst.withdrawn)


|****************************** choice section ********************************	
choice.cont.generate:
on.choice:
	do.selection(false, on_new_function_for_generate)
	

	message("Process Complete.")	
							|#ISGEC004003.en
	if send.email.alert() then			|PATCH002030.sn
		message("Sending Email Failed")
	endif	
							|PATCH002030.en
|****************************** field section ********************************
functions:

function InsertRecord_dmisg005()
{
	domain	tcitem		o.loti
	domain	dmdoc.revv	o.revn
	
	select 	dmisg002.*
	from	dmisg002
	where	dmisg002._index1 = {:dmisg001.docn,:dmisg001.revn}
	selectdo
		|* If Record Exists for Same Drawing
		|* Lot Item is Defaulted
		select 	dmisg005.loti:o.loti,
			dmisg005.revn:o.revn
		from	dmisg005
		where	dmisg005._index1 = {:dmisg001.cprj,:dmisg001.cspa,:dmisg002.docn}
		and	dmisg005.item = :dmisg002.item
		and	dmisg005.loti <> ""
		order by dmisg005.revn desc
		as set with 1 rows
		selectdo
		selectempty
			o.loti = ""
		endselect
		
		dmisg005.cprj = dmisg001.cprj
		dmisg005.cspa = dmisg001.cspa
		dmisg005.docn = dmisg002.docn
		dmisg005.revn = dmisg002.revn
		dmisg005.srno = dmisg002.srno
		dmisg005.item = dmisg002.item
		dmisg005.dsca = dmisg002.dsca
		dmisg005.qnty = dmisg002.qnty
		dmisg005.wght = dmisg002.wght
		dmisg005.loti = o.loti
		dmisg005.stat = dmstat.process
		dmisg005.cuni = dmisg002.cuni
		db.insert(tdmisg005,db.skip.dupl,e)
	selecteos
| 		select 	dmisg001.stat, dmisg001.drdt, dmisg001.drur
| 		from	dmisg001 for update
| 		where	dmisg001._index1 = {:dmisg001.docn,:dmisg001.revn}
| 		as set with 1 rows
| 		selectdo
| 			dmisg001.stat = dmstat.process
| 			dmisg001.drdt = utc.num()	
| 			dmisg001.drur = logname$				
| 			db.update(tdmisg001,db.retry,e)
| 		endselect	
	selectempty
| 		select 	dmisg001.stat, dmisg001.drdt, dmisg001.drur
| 		from	dmisg001 for update
| 		where	dmisg001._index1 = {:dmisg001.docn,:dmisg001.revn}
| 		as set with 1 rows
| 		selectdo
| 			dmisg001.stat = dmstat.process
| 			dmisg001.drdt = utc.num()							
| 			dmisg001.drur = logname$						
| 			db.update(tdmisg001,db.retry,e)
| 		endselect
	endselect
}

function on_new_function_for_generate()
{
	select 	dmisg001.aact.1,
		dmisg001.aact.2,
		dmisg001.aact.3,
		dmisg001.aact,
		dmisg001.wfst, dmisg001.adat, dmisg001.stat, dmisg001.drdt, dmisg001.drur
	from	dmisg001 for update
	where	dmisg001._index1 = {:dmisg001.docn,:dmisg001.revn}	
	selectdo
		if dmisg001.aact.1 = tcyesno.yes then
			dmisg001.wfst = dmisg.wfst.submitted
			dmisg001.aact = dmisg.act.reject
			dmisg001.adat = utc.num()
		endif
		
		if dmisg001.aact.2 = tcyesno.yes then
				dmisg001.wfst = dmisg.wfst.released
				dmisg001.aact = dmisg.act.accept
				dmisg001.adat = utc.num()
				dmisg001.stat = dmstat.process
				dmisg001.drdt = utc.num()							
				dmisg001.drur = logname$
				InsertRecord_dmisg005()
				dmisg.dll0910.update.size.man.haours(dmisg001.docn,dmisg001.revn,dmisg001.size)	|#ISGEC001175.n
				
				continue.xmlfile()				|#ISGEC01127.n
		endif
		
		if dmisg001.aact.3 = tcyesno.yes then
			dmisg001.wfst =  dmisg.wfst.withdrawn
			dmisg001.aact = dmisg.act.withdrawn
			dmisg001.adat = utc.num()
		endif
		
		db.update(tdmisg001,db.retry,e)
	endselect
	commit.transaction()

}
								|#ISGEC004003.sn
function extern under.approval()
{
	show.underapproval()
	rebuild.query()
	execute(find.data)
}

function show.underapproval()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.underapproval", EXTEND_OVERWRITE)
}

function extern view.released()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.released", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern withdrawn()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.withdrawn", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern underrevision()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.underrevision", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern superseded()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.superseded", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern underdcr()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.underdcr", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}

function extern underdesign()
{
	query.extend.where("dmisg001.ausr = :o.emno and dmisg001.wfst = dmisg.wfst.underdesign", EXTEND_OVERWRITE)
	rebuild.query()
	execute(find.data)
}


								|#ISGEC004003.en

function long send.email.alert()			
{
	string tmp.file(200),line(500)
	long   fp
	domain	tclogn	user.id
	long    message.ID
        long    to.ID
        long    attachment.ID
        long    ret
                        |Infor ERP Enterprise eMessage Connector service for 
                        |transporting messages
        long stat       |Variable to hold return values
	
	tmp.file = creat.tmp.file$(bse.tmp.dir$())
	fp = seq.open(tmp.file,"w+")
	if fp <=0 then
		message("Temp file can not be created")
		return(1)
	endif
	
	user.id = logname$
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index4 = {:user.id}
	and	tccom001.emno refers to bpmdm001
	as set with 1 rows
	selectdo
	selectempty
		bpmdm001.mail = ""
	endselect
	
	if isspace(bpmdm001.mail) then
		message("Email ID for Approver/Rejector Not maintained")
		return(1)
	endif		
	
	line = ""
	if dmisg001.aact.2 = tcyesno.yes then
		line = strip$(line) & "Document No. " & strip$(shiftl$(dmisg001.docn)) & " and "
		line = strip$(line) & " Revision No. " & strip$(shiftl$(dmisg001.revn)) & " has been approved "
		line = strip$(line) & " by " & tccom001.nama & "."
	else
		line = strip$(line) & "Document No. " & strip$(shiftl$(dmisg001.docn)) & " and "
		line = strip$(line) & " Revision No. " & strip$(shiftl$(dmisg001.revn)) & " has been rejected "
		line = strip$(line) & " by " & strip$(shiftl$(tccom001.nama)) & "."
	endif
	seq.write(line,len(line),fp)
	ret = seq.close(fp)
	
	|******* Email Header
        message.ID = cmf.create()
	
	if dmisg001.aact.2 = tcyesno.yes then
		line = "Document No. " & strip$(shiftl$(str$(dmisg001.docn))) & " Revision No. "& strip$(shiftl$(str$(dmisg001.revn))) & " Approved"
	else
		line = "Document No. " & strip$(shiftl$(str$(dmisg001.docn))) & " Revision No. "& strip$(shiftl$(str$(dmisg001.revn))) & " Rejected"
	endif
        ret = cmf.setClass(message.ID, "CMF.NOTE.EMAIL")
        ret = cmf.setSubject(message.ID,line)
	
	|******** from ID
	to.ID = cmf.createRecipient(message.ID, ttcmf.role.from)  
	ret = cmf.setRecipientName(to.ID,tccom001.nama)
        ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
	ret = cmf.setRecipientType(to.ID, "SMTP")
 
	|******** to ID
	if dmisg001.aact.1 = tcyesno.yes then 
		select 	bpmdm001.mail,tccom001.nama 
		from 	tccom001,bpmdm001
		where 	tccom001._index1 = {:dmisg001.user}
		and	tccom001.emno refers to bpmdm001
		selectdo
			to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
			ret = cmf.setRecipientName(to.ID,tccom001.nama)
			ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
			ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
			ret = cmf.setRecipientType(to.ID, "SMTP")
		selectempty
			message("Email ID of "&tccom001.nama& " not maintained" )
			return(1)
		endselect
		
		select 	bpmdm001.mail,tccom001.nama 
		from 	tccom001,bpmdm001
		where 	tccom001._index1 = {:dmisg001.rusr}
		and	tccom001.emno refers to bpmdm001
		selectdo
			to.ID = cmf.createRecipient(message.ID, ttcmf.role.to)  
			ret = cmf.setRecipientName(to.ID,tccom001.nama)
			ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
			ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
			ret = cmf.setRecipientType(to.ID, "SMTP")
		selectempty
			message("Email ID of "&tccom001.nama& " not maintained" )
			return(1)
		endselect
	endif
	if dmisg001.aact.2 = tcyesno.yes then 
		
		select dmisg101.eunt
		from   dmisg101
		where  dmisg101._index2 = {:dmisg001.ausr,dmisg.cact.approver} 
		as set with 1 rows
		selectdo
		endselect	
		
		
		select dmisg103.emno
		from    dmisg103
		where   dmisg103._index2 = {:dmisg101.eunt,:dmisg001.cspa,:dmisg001.cprj}
		and     dmisg103.aopt = (dmalert.doc.release)
		selectdo
			create.receiptant(dmisg103.emno,message.ID)
		selectempty
			select dmisg103.emno
			from    dmisg103
			where   dmisg103._index2 = {:dmisg101.eunt,:dmisg001.cspa}
			and     dmisg103.aopt = (dmalert.doc.release)
			selectdo
				create.receiptant(dmisg103.emno,message.ID)
			selectempty
				select dmisg103.emno
				from   dmisg103
				where  dmisg103._index1 = {dmalert.doc.release,:dmisg101.eunt}
				selectdo
					create.receiptant(dmisg103.emno,message.ID)
				endselect	
			endselect	
		endselect	
	endif	
	|********* Mail Body
	attachment.ID = cmf.createAttachment(message.ID)
	ret = cmf.setAttachmentBody(attachment.ID,ttyeno.yes)
	ret = cmf.setAttachmentMIME(attachment.ID,"text/plain")                       
	ret = cmf.setAttachmentFileName(attachment.ID,tmp.file,"abc.txt")


	|*********  Send mail
        if message.ID <>0 then
                stat = cmf.startService("SMTP",2)
                if stat<>0 then
                        message("Message could not be sent "&
                                "(Infor ERP Enterprise eMessage Connector"&
                                " service did not start)")
                        return(1)
                endif
                stat = cmf.send(message.ID,"SMTP")
                if stat<>0 then
                        message("Message could not be sent "& "(Infor ERP Enterprise eMessage Connector "&
                                "service refused message)")
                        cmf.stopService("SMTP",2)
                        return(1)
                endif
                stat = cmf.stopService("SMTP",2)
        endif
	return(0)
}
							
function long create.receiptant(domain tcemno in.emno,long i.message.ID)
{

	long    to.ID,ret
	
	select 	bpmdm001.mail,tccom001.nama 
	from 	tccom001,bpmdm001
	where 	tccom001._index1 = {:in.emno}
	and	tccom001.emno refers to bpmdm001
	selectdo
		to.ID = cmf.createRecipient(i.message.ID, ttcmf.role.to)  
		ret = cmf.setRecipientName(to.ID,tccom001.nama)
		ret = cmf.setRecipientAddress(to.ID, bpmdm001.mail)	
		ret = cmf.setRecipientResponsibility(to.ID, "TRUE")		
		ret = cmf.setRecipientType(to.ID, "SMTP")
	selectempty
		message("Email ID of "&tccom001.nama&" not maintained" )
		return(1)
	endselect
	return(0)	
}								
										|#ISGEC01127.sn
function continue.xmlfile()
{
	
	v.logname = logname$
		
	select	dmisg000.*
	from 	dmisg000
	where 	dmisg000._index1 = {:v.logname}
	as set with 1 rows
	selectdo
		lock.path = strip$(dmisg000.lock)
		xml.main.document()
	selectempty
		message("Path Not Maintained for this User")
	endselect

}


function xml.main.document()
{
	long    Head2, retval
	
	select	dmisg115.*
	from	dmisg115
	where	dmisg115._index2 = {:dmisg001.docn, :dmisg001.revn}
	selectdo
	endselect
	
	select	dmisg114.*
	from	dmisg114
	where	dmisg114._index1 = {:dmisg115.dcrn}
	selectdo
	endselect
	
	cmfId = xmlNewNode("InforLN-PLM")
	Head2 = xmlSetAttribute(cmfID, "Type","Released")
	Head1 = xmlNewDataElement("Documents","", cmfId)
	
	Head3 = xmlNewDataElement("Document","", Head1)
	
	retval = xmlSetAttribute(Head3, "VaultUserName",trim$(dmisg001.user))
	retval = xmlSetAttribute(Head3, "VaultDBName",trim$(dmisg001.name))
	retval = xmlSetAttribute(Head3, "FileName",trim$(dmisg001.dsca))	|# PATCH001018.n
	retval = xmlSetAttribute(Head3, "IsgecDataSource",trim$(dmisg001.sorc))
	retval = xmlSetAttribute(Head3, "Main","True")
	retval = xmlSetAttribute(Head3, "ComponentStatus",dmisg114.comp)
	retval = xmlSetAttribute(Head3, "ApprovalRequiredBy",dmisg114.apdt)
	retval = xmlSetAttribute(Head3, "Description",trim$(dmisg114.dsca))
	retval = xmlSetAttribute(Head3, "RequestPriority",dmisg114.reqs)
	retval = xmlSetAttribute(Head3, "DCRCategory",dmisg115.catg)
	retval = xmlSetAttribute(Head3, "DCRDate",dmisg114.apdt)
	retval = xmlSetAttribute(Head3, "DCRNo",dmisg115.dcrn)
	retval = xmlSetAttribute(Head3, "UserID",trim$(logname$))
	retval = xmlSetAttribute(Head3, "RevisionNo",trim$(dmisg001.revn))
	retval = xmlSetAttribute(Head3, "DocumentID",trim$(dmisg001.dcid))
	retval = xmlSetAttribute(Head3, "Element",trim$(dmisg001.cspa))	
	retval = xmlSetAttribute(Head3, "Project",trim$(dmisg001.cprj))
		
	select	dmisg003.*
	from	dmisg003
	where	dmisg003._index1 = {:dmisg001.docn, :dmisg001.revn}
	selectdo
		Head4 = xmlNewDataElement("Document","", Head1)

		retval = xmlSetAttribute(Head4, "Type",ltoe(1))
		retval = xmlSetAttribute(Head4, "Status",trim$(dmisg003.stat))
		retval = xmlSetAttribute(Head4, "PDF_filename",trim$(dmisg003.pdff))
		retval = xmlSetAttribute(Head4, "Main","False")		
		retval = xmlSetAttribute(Head4, "DrawingNumber",trim$(dmisg003.drgn))
		retval = xmlSetAttribute(Head4, "DocumentRevision",trim$(dmisg003.drev))
		retval = xmlSetAttribute(Head4, "DrawingTitle",trim$(dmisg003.dcfn))
		retval = xmlSetAttribute(Head4, "DocumentFileName",trim$(dmisg003.drgt))
	endselect
	
	fd.write = seq.open(lock.path & "\" & trim$(dmisg001.docn) & ".xml", "w")

	xmlWritePretty(fd.write, cmfId, 0 )
	seq.close(fd.write)

	xmlDelete(cmfId, 0)
}
									|#ISGEC01127.en
