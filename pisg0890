|******************************************************************************
|* tdisg089  0  VRC B61U a7 live
|* DAL2 for tdisg089
|* baan
|* 14-12-10 [15:22]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
                                                                                
	|******************** Includes ************************
	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

	|*************** Table declaration ******************
		table	ttdisg089
		table	ttdmsl400
		
		
		

|****************************** object hooks **********************************

function extern boolean method.is.allowed(
			long		i.method)
{
	on case i.method
		case DAL_NEW:
		if not new.method.is.allowed() then
			dal.set.error.message("@Cannot insert a record.")	
			return(false)
		endif
		break
	case DAL_UPDATE:
		if not update.method.is.allowed() then
			dal.set.error.message("@Cannot modify this record.")
			return(false)
		endif
		break
	case DAL_DESTROY:
		if not destroy.method.is.allowed() then
			dal.set.error.message("@Cannot delete this record.")
			return(false)
		endif
		break
	endcase

	return(true)
}

function extern long before.open.object.set()
{
	read.parameters()
	define.field.dependencies()
	return(0)
}

function extern long before.save.object(long type)
{
	on case type
		case DAL_NEW :
			break
		case DAL_UPDATE:
			break
	ENDCASE
	return(0)
}

function extern long set.object.defaults()
{
	return(0)
}

function extern long before.new.object()
{		
	return(0)
}

function extern long before.get.object()
{
	return(0)
}

function extern long after.get.object()
{
	
	return(0)
}

function long read.parameters()
{
	return(0)
}

|**** Dependencies Section ****************************************************

function void define.field.dependencies()
{
	|* Initialize field relations.
	dal.init.field.dependencies()
	
	dal.field.depends.on("tdisg089.revi", HOOK_IS_DERIVED,
					"tdisg089.orno")
					
	|* Add direct dependent fields.
	|* Please keep the fields in alphabetical order.

	dal.finalize.field.dependencies()
}

function boolean new.method.is.allowed()
{
	return(true)
}

function boolean update.method.is.allowed()
{
	return(true)
}
function boolean destroy.method.is.allowed()
{
			long		delete.allowed

	with.old.object.values.do(	deleting_allowed,
					delete.allowed)	|* ref
	if not delete.allowed then
		return(false)
	endif

	return(true)
}

function void deleting_allowed(
	ref		long		o.delete.allowed)
{
	o.delete.allowed = true
}

|************** Order **************************
function extern boolean tdisg089.orno.is.valid()
{
	if	not PO_Sent_Approval()	then
		dal.set.error.message("@Order is not Sent for Approval")
		return(DALHOOKERROR)
	endif
	
	return(true)
}

|************** Revision **************************
function extern boolean tdisg089.revi.is.derived()
{
	tdisg089.revi = Get_Max_Revision(tdisg089.orno)
	return(true)
}

|**************** Internal Function *******************
function domain tcsern Get_Max_Revision
				(
				domain	tcorno	i.orno
				)
{
	domain	tcsern	t.vrsn
	
	t.vrsn = 0
	select	max(vr_tdmsl400.vrsn):t.vrsn
	from	tdmsl400 vr_tdmsl400
	where	vr_tdmsl400._index1 = {:i.orno}
	and	vr_tdmsl400.work = tdmsl.work.yes
	and	vr_tdmsl400.stat = tcyesno.no
	selectdo
	endselect

	return(t.vrsn)
}

function boolean PO_Sent_Approval()
{
	select	tdmsl400.vrsn
	from	tdmsl400 
	where	tdmsl400._index1 = {:tdisg089.orno}
	and	tdmsl400.work = tdmsl.work.yes
	and	tdmsl400.stat = tcyesno.no
	selectdo
		return(true)
	endselect
	
	return(false)
}
