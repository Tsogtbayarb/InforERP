|******************************************************************************
|* dmisg134  0  VRC B61U a7 isg 
|* DAL 2 for dmisg134
|* baan
|* 15-01-31 [12:11]
|******************************************************************************
|* Script Type: DAL
|******************************************************************************
        table	tdmisg134
	table	ttcmcs050
	table	ttpmsl000 	
	#include <bic_dal2>
	#include "itcmcs2000"	|* DAL(-GUI) Support Defines

function extern long before.open.object.set()
{
	read.parameters()
	return(0)
}

function extern boolean method.is.allowed(
			long		i.method)
{
	on case i.method
	case DAL_UPDATE:
		domain	tfgld.sess calling.prog
		get.var(pid,"prog.name$",calling.prog)

		on case calling.prog
		case "dmisg1134m000":
		case "dmisg1134m400":		
			if find.lines() then
				return(false)
			endif
			
			if dmisg134.stat <> dmisg.receipt.submitted then
				return(false)
			endif
			break
		endcase	
	endcase

	return(true)
}

function extern long before.save.object(long type)
{
	on case type
	case DAL_NEW:
		domain	tfgld.sess calling.prog
		get.var(pid,"prog.name$",calling.prog)

		on case calling.prog
		case "dmisg1134m000":
			if isspace(dmisg134.bpid) and isspace(dmisg134.nama) then
				dal.set.error.message("@Vendor ID OR Vendor name is required.")
				return(DALHOOKERROR)
			endif
			break
		endcase
		
		if  tcmcs.dll0050.check.and.generate.order.number(
				3, dmisg134.rcno, tpmsl000.rcno, 
				9, dmisg134.rcno) then
			return(DALHOOKERROR)
		endif
		dmisg134.revn = "00"
		dmisg134.user = logname$
		dmisg134.date = utc.num()	
		break
	endcase	
	return(0)
}


function long read.parameters()
{
	RETIFNOK(tcmcs.dll0095.read.parm("tpmsl000"))
	return(0)
}

function extern long before.new.object()
{	
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)

	on case calling.prog
	case "dmisg1134m000":
		dmisg134.rcno = tpmsl000.ser1
		break
	case "dmisg1134m400":
		dmisg134.rcno = tpmsl000.ser2
		break
	endcase
	return(0)
}

function extern boolean process.is.allowed()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)

	if calling.prog = "dmisg1134m000" then
		if dmisg134.stat = dmisg.receipt.comment then
			return(true)
		endif
	endif	
	return(false)

}


function extern boolean process.3.is.allowed()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)

	if calling.prog = "dmisg1134m400" then
		if dmisg134.stat = dmisg.receipt.issued then
			return(true)
		endif
	endif	
	return(false)

}

function extern boolean generate.tran.is.allowed()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)

	if calling.prog = "dmisg1134m500" then
		if dmisg134.stat = dmisg.receipt.comment or dmisg134.stat = dmisg.receipt.cleared then
			return(true)
		endif
	endif
	return(false)	

}


function extern boolean dmisg134.rcno.is.valid()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)

	on case calling.prog
	case "dmisg1134m000":
		if trim$(dmisg134.rcno) <> trim$(tpmsl000.ser1) then
			return(false)
		endif
		break
	case "dmisg1134m400":
		if trim$(dmisg134.rcno) <> trim$(tpmsl000.ser2) then
			return(false)
		endif	
		break
	endcase
	
	return(true)

}

function boolean find.lines()
{
	select	dmisg135.*
	from	dmisg135
	where	dmisg135._index1 = {:dmisg134.rcno}
	as set with 1 rows
	selectdo
		return(true)
	endselect
	return(false)

}

function extern boolean dmisg134.cprj.is.mandatory()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)
	if calling.prog = "dmisg1134m000" then
		return(true)
	endif	
	
	return(false)
}

function extern boolean dmisg134.item.is.mandatory()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)
	if calling.prog = "dmisg1134m000" then
		return(true)
	endif	
	
	return(false)
}

function extern boolean dmisg134.orno.is.mandatory()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)
	if calling.prog = "dmisg1134m400" then
		return(true)
	endif	
	
	return(false)
}

function extern boolean dmisg134.pono.is.mandatory()
{
	domain	tfgld.sess calling.prog
	get.var(pid,"prog.name$",calling.prog)
	if calling.prog = "dmisg1134m400" then
		return(true)
	endif	
	
	return(false)
}

| function extern boolean dmisg134.sent.is.readonly(1)
| {
| 	if dmisg114.stat <> dmisg.receipt.submitted then
| 		return(true)
| 	endif
| 	
| 	return(false)
| }

